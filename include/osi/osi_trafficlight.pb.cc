// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_trafficlight.proto

#include "osi_trafficlight.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace osi3 {
constexpr TrafficLight_Classification::TrafficLight_Classification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : assigned_lane_id_()
  , color_(0)

  , icon_(0)

  , counter_(0)
  , mode_(0)

  , is_out_of_service_(false){}
struct TrafficLight_ClassificationDefaultTypeInternal {
  constexpr TrafficLight_ClassificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficLight_ClassificationDefaultTypeInternal() {}
  union {
    TrafficLight_Classification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficLight_ClassificationDefaultTypeInternal _TrafficLight_Classification_default_instance_;
constexpr TrafficLight::TrafficLight(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_reference_()
  , model_reference_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(nullptr)
  , base_(nullptr)
  , classification_(nullptr)
  , color_description_(nullptr){}
struct TrafficLightDefaultTypeInternal {
  constexpr TrafficLightDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficLightDefaultTypeInternal() {}
  union {
    TrafficLight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficLightDefaultTypeInternal _TrafficLight_default_instance_;
}  // namespace osi3
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5ftrafficlight_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_osi_5ftrafficlight_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5ftrafficlight_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5ftrafficlight_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight_Classification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight_Classification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight_Classification, color_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight_Classification, icon_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight_Classification, mode_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight_Classification, counter_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight_Classification, assigned_lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight_Classification, is_out_of_service_),
  0,
  1,
  3,
  2,
  ~0u,
  4,
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight, id_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight, base_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight, classification_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight, model_reference_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight, source_reference_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight, color_description_),
  1,
  2,
  3,
  0,
  ~0u,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::osi3::TrafficLight_Classification)},
  { 18, 30, -1, sizeof(::osi3::TrafficLight)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficLight_Classification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficLight_default_instance_),
};

const char descriptor_table_protodef_osi_5ftrafficlight_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026osi_trafficlight.proto\022\004osi3\032\020osi_comm"
  "on.proto\"\336\n\n\014TrafficLight\022\034\n\002id\030\001 \001(\0132\020."
  "osi3.Identifier\022\"\n\004base\030\002 \001(\0132\024.osi3.Bas"
  "eStationary\0229\n\016classification\030\003 \001(\0132!.os"
  "i3.TrafficLight.Classification\022\027\n\017model_"
  "reference\030\004 \001(\t\0221\n\020source_reference\030\005 \003("
  "\0132\027.osi3.ExternalReference\0221\n\021color_desc"
  "ription\030\006 \001(\0132\026.osi3.ColorDescription\032\321\010"
  "\n\016Classification\0226\n\005color\030\001 \001(\0162\'.osi3.T"
  "rafficLight.Classification.Color\0224\n\004icon"
  "\030\002 \001(\0162&.osi3.TrafficLight.Classificatio"
  "n.Icon\0224\n\004mode\030\003 \001(\0162&.osi3.TrafficLight"
  ".Classification.Mode\022\017\n\007counter\030\004 \001(\001\022*\n"
  "\020assigned_lane_id\030\005 \003(\0132\020.osi3.Identifie"
  "r\022\031\n\021is_out_of_service\030\006 \001(\010\"~\n\005Color\022\021\n"
  "\rCOLOR_UNKNOWN\020\000\022\017\n\013COLOR_OTHER\020\001\022\r\n\tCOL"
  "OR_RED\020\002\022\020\n\014COLOR_YELLOW\020\003\022\017\n\013COLOR_GREE"
  "N\020\004\022\016\n\nCOLOR_BLUE\020\005\022\017\n\013COLOR_WHITE\020\006\"\321\004\n"
  "\004Icon\022\020\n\014ICON_UNKNOWN\020\000\022\016\n\nICON_OTHER\020\001\022"
  "\r\n\tICON_NONE\020\002\022\035\n\031ICON_ARROW_STRAIGHT_AH"
  "EAD\020\003\022\023\n\017ICON_ARROW_LEFT\020\004\022\030\n\024ICON_ARROW"
  "_DIAG_LEFT\020\005\022\"\n\036ICON_ARROW_STRAIGHT_AHEA"
  "D_LEFT\020\006\022\024\n\020ICON_ARROW_RIGHT\020\007\022\031\n\025ICON_A"
  "RROW_DIAG_RIGHT\020\010\022#\n\037ICON_ARROW_STRAIGHT"
  "_AHEAD_RIGHT\020\t\022\031\n\025ICON_ARROW_LEFT_RIGHT\020"
  "\n\022\023\n\017ICON_ARROW_DOWN\020\013\022\030\n\024ICON_ARROW_DOW"
  "N_LEFT\020\014\022\031\n\025ICON_ARROW_DOWN_RIGHT\020\r\022\024\n\020I"
  "CON_ARROW_CROSS\020\016\022\023\n\017ICON_PEDESTRIAN\020\017\022\r"
  "\n\tICON_WALK\020\020\022\022\n\016ICON_DONT_WALK\020\021\022\020\n\014ICO"
  "N_BICYCLE\020\022\022\037\n\033ICON_PEDESTRIAN_AND_BICYC"
  "LE\020\023\022\032\n\026ICON_COUNTDOWN_SECONDS\020\024\022\032\n\026ICON"
  "_COUNTDOWN_PERCENT\020\025\022\r\n\tICON_TRAM\020\026\022\014\n\010I"
  "CON_BUS\020\027\022\025\n\021ICON_BUS_AND_TRAM\020\030\"o\n\004Mode"
  "\022\020\n\014MODE_UNKNOWN\020\000\022\016\n\nMODE_OTHER\020\001\022\014\n\010MO"
  "DE_OFF\020\002\022\021\n\rMODE_CONSTANT\020\003\022\021\n\rMODE_FLAS"
  "HING\020\004\022\021\n\rMODE_COUNTING\020\005B\002H\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5ftrafficlight_2eproto_deps[1] = {
  &::descriptor_table_osi_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5ftrafficlight_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5ftrafficlight_2eproto = {
  false, false, 1429, descriptor_table_protodef_osi_5ftrafficlight_2eproto, "osi_trafficlight.proto", 
  &descriptor_table_osi_5ftrafficlight_2eproto_once, descriptor_table_osi_5ftrafficlight_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_osi_5ftrafficlight_2eproto::offsets,
  file_level_metadata_osi_5ftrafficlight_2eproto, file_level_enum_descriptors_osi_5ftrafficlight_2eproto, file_level_service_descriptors_osi_5ftrafficlight_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_osi_5ftrafficlight_2eproto_getter() {
  return &descriptor_table_osi_5ftrafficlight_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_osi_5ftrafficlight_2eproto(&descriptor_table_osi_5ftrafficlight_2eproto);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficLight_Classification_Color_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficlight_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficlight_2eproto[0];
}
bool TrafficLight_Classification_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficLight_Classification_Color TrafficLight_Classification::COLOR_UNKNOWN;
constexpr TrafficLight_Classification_Color TrafficLight_Classification::COLOR_OTHER;
constexpr TrafficLight_Classification_Color TrafficLight_Classification::COLOR_RED;
constexpr TrafficLight_Classification_Color TrafficLight_Classification::COLOR_YELLOW;
constexpr TrafficLight_Classification_Color TrafficLight_Classification::COLOR_GREEN;
constexpr TrafficLight_Classification_Color TrafficLight_Classification::COLOR_BLUE;
constexpr TrafficLight_Classification_Color TrafficLight_Classification::COLOR_WHITE;
constexpr TrafficLight_Classification_Color TrafficLight_Classification::Color_MIN;
constexpr TrafficLight_Classification_Color TrafficLight_Classification::Color_MAX;
constexpr int TrafficLight_Classification::Color_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficLight_Classification_Icon_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficlight_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficlight_2eproto[1];
}
bool TrafficLight_Classification_Icon_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_UNKNOWN;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_OTHER;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_NONE;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_STRAIGHT_AHEAD;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_LEFT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_DIAG_LEFT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_STRAIGHT_AHEAD_LEFT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_RIGHT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_DIAG_RIGHT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_STRAIGHT_AHEAD_RIGHT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_LEFT_RIGHT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_DOWN;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_DOWN_LEFT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_DOWN_RIGHT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_CROSS;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_PEDESTRIAN;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_WALK;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_DONT_WALK;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_BICYCLE;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_PEDESTRIAN_AND_BICYCLE;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_COUNTDOWN_SECONDS;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_COUNTDOWN_PERCENT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_TRAM;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_BUS;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_BUS_AND_TRAM;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::Icon_MIN;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::Icon_MAX;
constexpr int TrafficLight_Classification::Icon_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficLight_Classification_Mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficlight_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficlight_2eproto[2];
}
bool TrafficLight_Classification_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficLight_Classification_Mode TrafficLight_Classification::MODE_UNKNOWN;
constexpr TrafficLight_Classification_Mode TrafficLight_Classification::MODE_OTHER;
constexpr TrafficLight_Classification_Mode TrafficLight_Classification::MODE_OFF;
constexpr TrafficLight_Classification_Mode TrafficLight_Classification::MODE_CONSTANT;
constexpr TrafficLight_Classification_Mode TrafficLight_Classification::MODE_FLASHING;
constexpr TrafficLight_Classification_Mode TrafficLight_Classification::MODE_COUNTING;
constexpr TrafficLight_Classification_Mode TrafficLight_Classification::Mode_MIN;
constexpr TrafficLight_Classification_Mode TrafficLight_Classification::Mode_MAX;
constexpr int TrafficLight_Classification::Mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class TrafficLight_Classification::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficLight_Classification>()._has_bits_);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_out_of_service(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

void TrafficLight_Classification::clear_assigned_lane_id() {
  assigned_lane_id_.Clear();
}
TrafficLight_Classification::TrafficLight_Classification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  assigned_lane_id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficLight.Classification)
}
TrafficLight_Classification::TrafficLight_Classification(const TrafficLight_Classification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      assigned_lane_id_(from.assigned_lane_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_out_of_service_) -
    reinterpret_cast<char*>(&color_)) + sizeof(is_out_of_service_));
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficLight.Classification)
}

void TrafficLight_Classification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_out_of_service_) -
    reinterpret_cast<char*>(&color_)) + sizeof(is_out_of_service_));
}

TrafficLight_Classification::~TrafficLight_Classification() {
  // @@protoc_insertion_point(destructor:osi3.TrafficLight.Classification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficLight_Classification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrafficLight_Classification::ArenaDtor(void* object) {
  TrafficLight_Classification* _this = reinterpret_cast< TrafficLight_Classification* >(object);
  (void)_this;
}
void TrafficLight_Classification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficLight_Classification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficLight_Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficLight.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assigned_lane_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_out_of_service_) -
        reinterpret_cast<char*>(&color_)) + sizeof(is_out_of_service_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficLight_Classification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.TrafficLight.Classification.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::TrafficLight_Classification_Color_IsValid(val))) {
            _internal_set_color(static_cast<::osi3::TrafficLight_Classification_Color>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficLight.Classification.Icon icon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::TrafficLight_Classification_Icon_IsValid(val))) {
            _internal_set_icon(static_cast<::osi3::TrafficLight_Classification_Icon>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficLight.Classification.Mode mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::TrafficLight_Classification_Mode_IsValid(val))) {
            _internal_set_mode(static_cast<::osi3::TrafficLight_Classification_Mode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double counter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_counter(&has_bits);
          counter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Identifier assigned_lane_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assigned_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_out_of_service = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_out_of_service(&has_bits);
          is_out_of_service_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficLight_Classification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficLight.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.TrafficLight.Classification.Color color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_color(), target);
  }

  // optional .osi3.TrafficLight.Classification.Icon icon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_icon(), target);
  }

  // optional .osi3.TrafficLight.Classification.Mode mode = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mode(), target);
  }

  // optional double counter = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_counter(), target);
  }

  // repeated .osi3.Identifier assigned_lane_id = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_assigned_lane_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_assigned_lane_id(i), target, stream);
  }

  // optional bool is_out_of_service = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_out_of_service(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficLight.Classification)
  return target;
}

size_t TrafficLight_Classification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficLight.Classification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Identifier assigned_lane_id = 5;
  total_size += 1UL * this->_internal_assigned_lane_id_size();
  for (const auto& msg : this->assigned_lane_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .osi3.TrafficLight.Classification.Color color = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_color());
    }

    // optional .osi3.TrafficLight.Classification.Icon icon = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_icon());
    }

    // optional double counter = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .osi3.TrafficLight.Classification.Mode mode = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
    }

    // optional bool is_out_of_service = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficLight_Classification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficLight_Classification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficLight_Classification::GetClassData() const { return &_class_data_; }

void TrafficLight_Classification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficLight_Classification *>(to)->MergeFrom(
      static_cast<const TrafficLight_Classification &>(from));
}


void TrafficLight_Classification::MergeFrom(const TrafficLight_Classification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficLight.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assigned_lane_id_.MergeFrom(from.assigned_lane_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000002u) {
      icon_ = from.icon_;
    }
    if (cached_has_bits & 0x00000004u) {
      counter_ = from.counter_;
    }
    if (cached_has_bits & 0x00000008u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_out_of_service_ = from.is_out_of_service_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficLight_Classification::CopyFrom(const TrafficLight_Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficLight.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight_Classification::IsInitialized() const {
  return true;
}

void TrafficLight_Classification::InternalSwap(TrafficLight_Classification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  assigned_lane_id_.InternalSwap(&other->assigned_lane_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficLight_Classification, is_out_of_service_)
      + sizeof(TrafficLight_Classification::is_out_of_service_)
      - PROTOBUF_FIELD_OFFSET(TrafficLight_Classification, color_)>(
          reinterpret_cast<char*>(&color_),
          reinterpret_cast<char*>(&other->color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLight_Classification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5ftrafficlight_2eproto_getter, &descriptor_table_osi_5ftrafficlight_2eproto_once,
      file_level_metadata_osi_5ftrafficlight_2eproto[0]);
}

// ===================================================================

class TrafficLight::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficLight>()._has_bits_);
  static const ::osi3::Identifier& id(const TrafficLight* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::BaseStationary& base(const TrafficLight* msg);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::osi3::TrafficLight_Classification& classification(const TrafficLight* msg);
  static void set_has_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_model_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::ColorDescription& color_description(const TrafficLight* msg);
  static void set_has_color_description(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::osi3::Identifier&
TrafficLight::_Internal::id(const TrafficLight* msg) {
  return *msg->id_;
}
const ::osi3::BaseStationary&
TrafficLight::_Internal::base(const TrafficLight* msg) {
  return *msg->base_;
}
const ::osi3::TrafficLight_Classification&
TrafficLight::_Internal::classification(const TrafficLight* msg) {
  return *msg->classification_;
}
const ::osi3::ColorDescription&
TrafficLight::_Internal::color_description(const TrafficLight* msg) {
  return *msg->color_description_;
}
void TrafficLight::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void TrafficLight::clear_base() {
  if (base_ != nullptr) base_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void TrafficLight::clear_source_reference() {
  source_reference_.Clear();
}
void TrafficLight::clear_color_description() {
  if (color_description_ != nullptr) color_description_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
TrafficLight::TrafficLight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  source_reference_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficLight)
}
TrafficLight::TrafficLight(const TrafficLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      source_reference_(from.source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_model_reference()) {
    model_reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_reference(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    id_ = new ::osi3::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_base()) {
    base_ = new ::osi3::BaseStationary(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_classification()) {
    classification_ = new ::osi3::TrafficLight_Classification(*from.classification_);
  } else {
    classification_ = nullptr;
  }
  if (from._internal_has_color_description()) {
    color_description_ = new ::osi3::ColorDescription(*from.color_description_);
  } else {
    color_description_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficLight)
}

void TrafficLight::SharedCtor() {
model_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&color_description_) -
    reinterpret_cast<char*>(&id_)) + sizeof(color_description_));
}

TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:osi3.TrafficLight)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficLight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete classification_;
  if (this != internal_default_instance()) delete color_description_;
}

void TrafficLight::ArenaDtor(void* object) {
  TrafficLight* _this = reinterpret_cast< TrafficLight* >(object);
  (void)_this;
}
void TrafficLight::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      model_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(base_ != nullptr);
      base_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(classification_ != nullptr);
      classification_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(color_description_ != nullptr);
      color_description_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Identifier id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.BaseStationary base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficLight.Classification classification = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_classification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string model_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_model_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "osi3.TrafficLight.model_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.ExternalReference source_reference = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_source_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.ColorDescription color_description = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_color_description(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficLight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.Identifier id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // optional .osi3.BaseStationary base = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::base(this), target, stream);
  }

  // optional .osi3.TrafficLight.Classification classification = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::classification(this), target, stream);
  }

  // optional string model_reference = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model_reference().data(), static_cast<int>(this->_internal_model_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.TrafficLight.model_reference");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_model_reference(), target);
  }

  // repeated .osi3.ExternalReference source_reference = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_source_reference_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_source_reference(i), target, stream);
  }

  // optional .osi3.ColorDescription color_description = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::color_description(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficLight)
  return target;
}

size_t TrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficLight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.ExternalReference source_reference = 5;
  total_size += 1UL * this->_internal_source_reference_size();
  for (const auto& msg : this->source_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string model_reference = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model_reference());
    }

    // optional .osi3.Identifier id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .osi3.BaseStationary base = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *base_);
    }

    // optional .osi3.TrafficLight.Classification classification = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *classification_);
    }

    // optional .osi3.ColorDescription color_description = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_description_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficLight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficLight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficLight::GetClassData() const { return &_class_data_; }

void TrafficLight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficLight *>(to)->MergeFrom(
      static_cast<const TrafficLight &>(from));
}


void TrafficLight::MergeFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_reference_.MergeFrom(from.source_reference_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_model_reference(from._internal_model_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_id()->::osi3::Identifier::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_base()->::osi3::BaseStationary::MergeFrom(from._internal_base());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_classification()->::osi3::TrafficLight_Classification::MergeFrom(from._internal_classification());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_color_description()->::osi3::ColorDescription::MergeFrom(from._internal_color_description());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight::IsInitialized() const {
  return true;
}

void TrafficLight::InternalSwap(TrafficLight* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  source_reference_.InternalSwap(&other->source_reference_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_reference_, lhs_arena,
      &other->model_reference_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficLight, color_description_)
      + sizeof(TrafficLight::color_description_)
      - PROTOBUF_FIELD_OFFSET(TrafficLight, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLight::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5ftrafficlight_2eproto_getter, &descriptor_table_osi_5ftrafficlight_2eproto_once,
      file_level_metadata_osi_5ftrafficlight_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::TrafficLight_Classification* Arena::CreateMaybeMessage< ::osi3::TrafficLight_Classification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficLight_Classification >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficLight* Arena::CreateMaybeMessage< ::osi3::TrafficLight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficLight >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
