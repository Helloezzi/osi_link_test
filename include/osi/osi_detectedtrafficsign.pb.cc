// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_detectedtrafficsign.proto

#include "osi_detectedtrafficsign.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace osi3 {
constexpr DetectedTrafficSign_DetectedMainSign_CandidateMainSign::DetectedTrafficSign_DetectedMainSign_CandidateMainSign(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : classification_(nullptr)
  , probability_(0){}
struct DetectedTrafficSign_DetectedMainSign_CandidateMainSignDefaultTypeInternal {
  constexpr DetectedTrafficSign_DetectedMainSign_CandidateMainSignDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DetectedTrafficSign_DetectedMainSign_CandidateMainSignDefaultTypeInternal() {}
  union {
    DetectedTrafficSign_DetectedMainSign_CandidateMainSign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DetectedTrafficSign_DetectedMainSign_CandidateMainSignDefaultTypeInternal _DetectedTrafficSign_DetectedMainSign_CandidateMainSign_default_instance_;
constexpr DetectedTrafficSign_DetectedMainSign::DetectedTrafficSign_DetectedMainSign(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : candidate_()
  , base_(nullptr)
  , base_rmse_(nullptr)
  , geometry_(0)
{}
struct DetectedTrafficSign_DetectedMainSignDefaultTypeInternal {
  constexpr DetectedTrafficSign_DetectedMainSignDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DetectedTrafficSign_DetectedMainSignDefaultTypeInternal() {}
  union {
    DetectedTrafficSign_DetectedMainSign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DetectedTrafficSign_DetectedMainSignDefaultTypeInternal _DetectedTrafficSign_DetectedMainSign_default_instance_;
constexpr DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : classification_(nullptr)
  , probability_(0){}
struct DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySignDefaultTypeInternal {
  constexpr DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySignDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySignDefaultTypeInternal() {}
  union {
    DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySignDefaultTypeInternal _DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign_default_instance_;
constexpr DetectedTrafficSign_DetectedSupplementarySign::DetectedTrafficSign_DetectedSupplementarySign(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : candidate_()
  , base_(nullptr)
  , base_rmse_(nullptr){}
struct DetectedTrafficSign_DetectedSupplementarySignDefaultTypeInternal {
  constexpr DetectedTrafficSign_DetectedSupplementarySignDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DetectedTrafficSign_DetectedSupplementarySignDefaultTypeInternal() {}
  union {
    DetectedTrafficSign_DetectedSupplementarySign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DetectedTrafficSign_DetectedSupplementarySignDefaultTypeInternal _DetectedTrafficSign_DetectedSupplementarySign_default_instance_;
constexpr DetectedTrafficSign::DetectedTrafficSign(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : supplementary_sign_()
  , header_(nullptr)
  , main_sign_(nullptr){}
struct DetectedTrafficSignDefaultTypeInternal {
  constexpr DetectedTrafficSignDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DetectedTrafficSignDefaultTypeInternal() {}
  union {
    DetectedTrafficSign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DetectedTrafficSignDefaultTypeInternal _DetectedTrafficSign_default_instance_;
}  // namespace osi3
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5fdetectedtrafficsign_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_osi_5fdetectedtrafficsign_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5fdetectedtrafficsign_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5fdetectedtrafficsign_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign, probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign, classification_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedMainSign, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedMainSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedMainSign, candidate_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedMainSign, base_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedMainSign, base_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedMainSign, geometry_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign, probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign, classification_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedSupplementarySign, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedSupplementarySign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedSupplementarySign, candidate_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedSupplementarySign, base_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedSupplementarySign, base_rmse_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign, header_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign, main_sign_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign, supplementary_sign_),
  0,
  1,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign)},
  { 10, 20, -1, sizeof(::osi3::DetectedTrafficSign_DetectedMainSign)},
  { 24, 32, -1, sizeof(::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign)},
  { 34, 43, -1, sizeof(::osi3::DetectedTrafficSign_DetectedSupplementarySign)},
  { 46, 55, -1, sizeof(::osi3::DetectedTrafficSign)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_DetectedTrafficSign_DetectedMainSign_CandidateMainSign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_DetectedTrafficSign_DetectedMainSign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_DetectedTrafficSign_DetectedSupplementarySign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_DetectedTrafficSign_default_instance_),
};

const char descriptor_table_protodef_osi_5fdetectedtrafficsign_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035osi_detectedtrafficsign.proto\022\004osi3\032\020o"
  "si_common.proto\032\025osi_trafficsign.proto\032\030"
  "osi_detectedobject.proto\"\271\t\n\023DetectedTra"
  "fficSign\022(\n\006header\030\001 \001(\0132\030.osi3.Detected"
  "ItemHeader\022=\n\tmain_sign\030\002 \001(\0132*.osi3.Det"
  "ectedTrafficSign.DetectedMainSign\022O\n\022sup"
  "plementary_sign\030\003 \003(\01323.osi3.DetectedTra"
  "fficSign.DetectedSupplementarySign\032\232\005\n\020D"
  "etectedMainSign\022O\n\tcandidate\030\001 \003(\0132<.osi"
  "3.DetectedTrafficSign.DetectedMainSign.C"
  "andidateMainSign\022\"\n\004base\030\002 \001(\0132\024.osi3.Ba"
  "seStationary\022\'\n\tbase_rmse\030\003 \001(\0132\024.osi3.B"
  "aseStationary\022E\n\010geometry\030\004 \001(\01623.osi3.D"
  "etectedTrafficSign.DetectedMainSign.Geom"
  "etry\032k\n\021CandidateMainSign\022\023\n\013probability"
  "\030\001 \001(\001\022A\n\016classification\030\002 \001(\0132).osi3.Tr"
  "afficSign.MainSign.Classification\"\263\002\n\010Ge"
  "ometry\022\024\n\020GEOMETRY_UNKNOWN\020\000\022\022\n\016GEOMETRY"
  "_OTHER\020\001\022\023\n\017GEOMETRY_CIRCLE\020\002\022\031\n\025GEOMETR"
  "Y_TRIANGLE_TOP\020\003\022\032\n\026GEOMETRY_TRIANGLE_DO"
  "WN\020\004\022\023\n\017GEOMETRY_SQUARE\020\005\022\021\n\rGEOMETRY_PO"
  "LE\020\006\022\026\n\022GEOMETRY_RECTANGLE\020\007\022\022\n\016GEOMETRY"
  "_PLATE\020\010\022\024\n\020GEOMETRY_DIAMOND\020\t\022\027\n\023GEOMET"
  "RY_ARROW_LEFT\020\n\022\030\n\024GEOMETRY_ARROW_RIGHT\020"
  "\013\022\024\n\020GEOMETRY_OCTAGON\020\014\032\312\002\n\031DetectedSupp"
  "lementarySign\022a\n\tcandidate\030\001 \003(\0132N.osi3."
  "DetectedTrafficSign.DetectedSupplementar"
  "ySign.CandidateSupplementarySign\022\"\n\004base"
  "\030\002 \001(\0132\024.osi3.BaseStationary\022\'\n\tbase_rms"
  "e\030\003 \001(\0132\024.osi3.BaseStationary\032}\n\032Candida"
  "teSupplementarySign\022\023\n\013probability\030\001 \001(\001"
  "\022J\n\016classification\030\002 \001(\01322.osi3.TrafficS"
  "ign.SupplementarySign.ClassificationB\002H\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5fdetectedtrafficsign_2eproto_deps[3] = {
  &::descriptor_table_osi_5fcommon_2eproto,
  &::descriptor_table_osi_5fdetectedobject_2eproto,
  &::descriptor_table_osi_5ftrafficsign_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5fdetectedtrafficsign_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fdetectedtrafficsign_2eproto = {
  false, false, 1320, descriptor_table_protodef_osi_5fdetectedtrafficsign_2eproto, "osi_detectedtrafficsign.proto", 
  &descriptor_table_osi_5fdetectedtrafficsign_2eproto_once, descriptor_table_osi_5fdetectedtrafficsign_2eproto_deps, 3, 5,
  schemas, file_default_instances, TableStruct_osi_5fdetectedtrafficsign_2eproto::offsets,
  file_level_metadata_osi_5fdetectedtrafficsign_2eproto, file_level_enum_descriptors_osi_5fdetectedtrafficsign_2eproto, file_level_service_descriptors_osi_5fdetectedtrafficsign_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_osi_5fdetectedtrafficsign_2eproto_getter() {
  return &descriptor_table_osi_5fdetectedtrafficsign_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_osi_5fdetectedtrafficsign_2eproto(&descriptor_table_osi_5fdetectedtrafficsign_2eproto);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DetectedTrafficSign_DetectedMainSign_Geometry_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fdetectedtrafficsign_2eproto);
  return file_level_enum_descriptors_osi_5fdetectedtrafficsign_2eproto[0];
}
bool DetectedTrafficSign_DetectedMainSign_Geometry_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::GEOMETRY_UNKNOWN;
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::GEOMETRY_OTHER;
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::GEOMETRY_CIRCLE;
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::GEOMETRY_TRIANGLE_TOP;
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::GEOMETRY_TRIANGLE_DOWN;
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::GEOMETRY_SQUARE;
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::GEOMETRY_POLE;
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::GEOMETRY_RECTANGLE;
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::GEOMETRY_PLATE;
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::GEOMETRY_DIAMOND;
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::GEOMETRY_ARROW_LEFT;
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::GEOMETRY_ARROW_RIGHT;
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::GEOMETRY_OCTAGON;
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::Geometry_MIN;
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::Geometry_MAX;
constexpr int DetectedTrafficSign_DetectedMainSign::Geometry_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class DetectedTrafficSign_DetectedMainSign_CandidateMainSign::_Internal {
 public:
  using HasBits = decltype(std::declval<DetectedTrafficSign_DetectedMainSign_CandidateMainSign>()._has_bits_);
  static void set_has_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::TrafficSign_MainSign_Classification& classification(const DetectedTrafficSign_DetectedMainSign_CandidateMainSign* msg);
  static void set_has_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osi3::TrafficSign_MainSign_Classification&
DetectedTrafficSign_DetectedMainSign_CandidateMainSign::_Internal::classification(const DetectedTrafficSign_DetectedMainSign_CandidateMainSign* msg) {
  return *msg->classification_;
}
void DetectedTrafficSign_DetectedMainSign_CandidateMainSign::clear_classification() {
  if (classification_ != nullptr) classification_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
DetectedTrafficSign_DetectedMainSign_CandidateMainSign::DetectedTrafficSign_DetectedMainSign_CandidateMainSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign)
}
DetectedTrafficSign_DetectedMainSign_CandidateMainSign::DetectedTrafficSign_DetectedMainSign_CandidateMainSign(const DetectedTrafficSign_DetectedMainSign_CandidateMainSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_classification()) {
    classification_ = new ::osi3::TrafficSign_MainSign_Classification(*from.classification_);
  } else {
    classification_ = nullptr;
  }
  probability_ = from.probability_;
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign)
}

void DetectedTrafficSign_DetectedMainSign_CandidateMainSign::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&classification_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&probability_) -
    reinterpret_cast<char*>(&classification_)) + sizeof(probability_));
}

DetectedTrafficSign_DetectedMainSign_CandidateMainSign::~DetectedTrafficSign_DetectedMainSign_CandidateMainSign() {
  // @@protoc_insertion_point(destructor:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DetectedTrafficSign_DetectedMainSign_CandidateMainSign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete classification_;
}

void DetectedTrafficSign_DetectedMainSign_CandidateMainSign::ArenaDtor(void* object) {
  DetectedTrafficSign_DetectedMainSign_CandidateMainSign* _this = reinterpret_cast< DetectedTrafficSign_DetectedMainSign_CandidateMainSign* >(object);
  (void)_this;
}
void DetectedTrafficSign_DetectedMainSign_CandidateMainSign::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetectedTrafficSign_DetectedMainSign_CandidateMainSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DetectedTrafficSign_DetectedMainSign_CandidateMainSign::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(classification_ != nullptr);
    classification_->Clear();
  }
  probability_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectedTrafficSign_DetectedMainSign_CandidateMainSign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_probability(&has_bits);
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficSign.MainSign.Classification classification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_classification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectedTrafficSign_DetectedMainSign_CandidateMainSign::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_probability(), target);
  }

  // optional .osi3.TrafficSign.MainSign.Classification classification = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::classification(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign)
  return target;
}

size_t DetectedTrafficSign_DetectedMainSign_CandidateMainSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .osi3.TrafficSign.MainSign.Classification classification = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *classification_);
    }

    // optional double probability = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectedTrafficSign_DetectedMainSign_CandidateMainSign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DetectedTrafficSign_DetectedMainSign_CandidateMainSign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectedTrafficSign_DetectedMainSign_CandidateMainSign::GetClassData() const { return &_class_data_; }

void DetectedTrafficSign_DetectedMainSign_CandidateMainSign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DetectedTrafficSign_DetectedMainSign_CandidateMainSign *>(to)->MergeFrom(
      static_cast<const DetectedTrafficSign_DetectedMainSign_CandidateMainSign &>(from));
}


void DetectedTrafficSign_DetectedMainSign_CandidateMainSign::MergeFrom(const DetectedTrafficSign_DetectedMainSign_CandidateMainSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_classification()->::osi3::TrafficSign_MainSign_Classification::MergeFrom(from._internal_classification());
    }
    if (cached_has_bits & 0x00000002u) {
      probability_ = from.probability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectedTrafficSign_DetectedMainSign_CandidateMainSign::CopyFrom(const DetectedTrafficSign_DetectedMainSign_CandidateMainSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedTrafficSign_DetectedMainSign_CandidateMainSign::IsInitialized() const {
  return true;
}

void DetectedTrafficSign_DetectedMainSign_CandidateMainSign::InternalSwap(DetectedTrafficSign_DetectedMainSign_CandidateMainSign* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectedTrafficSign_DetectedMainSign_CandidateMainSign, probability_)
      + sizeof(DetectedTrafficSign_DetectedMainSign_CandidateMainSign::probability_)
      - PROTOBUF_FIELD_OFFSET(DetectedTrafficSign_DetectedMainSign_CandidateMainSign, classification_)>(
          reinterpret_cast<char*>(&classification_),
          reinterpret_cast<char*>(&other->classification_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedTrafficSign_DetectedMainSign_CandidateMainSign::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fdetectedtrafficsign_2eproto_getter, &descriptor_table_osi_5fdetectedtrafficsign_2eproto_once,
      file_level_metadata_osi_5fdetectedtrafficsign_2eproto[0]);
}

// ===================================================================

class DetectedTrafficSign_DetectedMainSign::_Internal {
 public:
  using HasBits = decltype(std::declval<DetectedTrafficSign_DetectedMainSign>()._has_bits_);
  static const ::osi3::BaseStationary& base(const DetectedTrafficSign_DetectedMainSign* msg);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::BaseStationary& base_rmse(const DetectedTrafficSign_DetectedMainSign* msg);
  static void set_has_base_rmse(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::osi3::BaseStationary&
DetectedTrafficSign_DetectedMainSign::_Internal::base(const DetectedTrafficSign_DetectedMainSign* msg) {
  return *msg->base_;
}
const ::osi3::BaseStationary&
DetectedTrafficSign_DetectedMainSign::_Internal::base_rmse(const DetectedTrafficSign_DetectedMainSign* msg) {
  return *msg->base_rmse_;
}
void DetectedTrafficSign_DetectedMainSign::clear_base() {
  if (base_ != nullptr) base_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void DetectedTrafficSign_DetectedMainSign::clear_base_rmse() {
  if (base_rmse_ != nullptr) base_rmse_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
DetectedTrafficSign_DetectedMainSign::DetectedTrafficSign_DetectedMainSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  candidate_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.DetectedTrafficSign.DetectedMainSign)
}
DetectedTrafficSign_DetectedMainSign::DetectedTrafficSign_DetectedMainSign(const DetectedTrafficSign_DetectedMainSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      candidate_(from.candidate_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::osi3::BaseStationary(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_base_rmse()) {
    base_rmse_ = new ::osi3::BaseStationary(*from.base_rmse_);
  } else {
    base_rmse_ = nullptr;
  }
  geometry_ = from.geometry_;
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedTrafficSign.DetectedMainSign)
}

void DetectedTrafficSign_DetectedMainSign::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&geometry_) -
    reinterpret_cast<char*>(&base_)) + sizeof(geometry_));
}

DetectedTrafficSign_DetectedMainSign::~DetectedTrafficSign_DetectedMainSign() {
  // @@protoc_insertion_point(destructor:osi3.DetectedTrafficSign.DetectedMainSign)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DetectedTrafficSign_DetectedMainSign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete base_rmse_;
}

void DetectedTrafficSign_DetectedMainSign::ArenaDtor(void* object) {
  DetectedTrafficSign_DetectedMainSign* _this = reinterpret_cast< DetectedTrafficSign_DetectedMainSign* >(object);
  (void)_this;
}
void DetectedTrafficSign_DetectedMainSign::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetectedTrafficSign_DetectedMainSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DetectedTrafficSign_DetectedMainSign::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedTrafficSign.DetectedMainSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidate_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(base_ != nullptr);
      base_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(base_rmse_ != nullptr);
      base_rmse_->Clear();
    }
  }
  geometry_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectedTrafficSign_DetectedMainSign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign candidate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candidate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.BaseStationary base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.BaseStationary base_rmse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_rmse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.DetectedTrafficSign.DetectedMainSign.Geometry geometry = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::DetectedTrafficSign_DetectedMainSign_Geometry_IsValid(val))) {
            _internal_set_geometry(static_cast<::osi3::DetectedTrafficSign_DetectedMainSign_Geometry>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectedTrafficSign_DetectedMainSign::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedTrafficSign.DetectedMainSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign candidate = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_candidate_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_candidate(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .osi3.BaseStationary base = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::base(this), target, stream);
  }

  // optional .osi3.BaseStationary base_rmse = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::base_rmse(this), target, stream);
  }

  // optional .osi3.DetectedTrafficSign.DetectedMainSign.Geometry geometry = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_geometry(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedTrafficSign.DetectedMainSign)
  return target;
}

size_t DetectedTrafficSign_DetectedMainSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedTrafficSign.DetectedMainSign)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign candidate = 1;
  total_size += 1UL * this->_internal_candidate_size();
  for (const auto& msg : this->candidate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .osi3.BaseStationary base = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *base_);
    }

    // optional .osi3.BaseStationary base_rmse = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *base_rmse_);
    }

    // optional .osi3.DetectedTrafficSign.DetectedMainSign.Geometry geometry = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_geometry());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectedTrafficSign_DetectedMainSign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DetectedTrafficSign_DetectedMainSign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectedTrafficSign_DetectedMainSign::GetClassData() const { return &_class_data_; }

void DetectedTrafficSign_DetectedMainSign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DetectedTrafficSign_DetectedMainSign *>(to)->MergeFrom(
      static_cast<const DetectedTrafficSign_DetectedMainSign &>(from));
}


void DetectedTrafficSign_DetectedMainSign::MergeFrom(const DetectedTrafficSign_DetectedMainSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedTrafficSign.DetectedMainSign)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candidate_.MergeFrom(from.candidate_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_base()->::osi3::BaseStationary::MergeFrom(from._internal_base());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_base_rmse()->::osi3::BaseStationary::MergeFrom(from._internal_base_rmse());
    }
    if (cached_has_bits & 0x00000004u) {
      geometry_ = from.geometry_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectedTrafficSign_DetectedMainSign::CopyFrom(const DetectedTrafficSign_DetectedMainSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedTrafficSign.DetectedMainSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedTrafficSign_DetectedMainSign::IsInitialized() const {
  return true;
}

void DetectedTrafficSign_DetectedMainSign::InternalSwap(DetectedTrafficSign_DetectedMainSign* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  candidate_.InternalSwap(&other->candidate_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectedTrafficSign_DetectedMainSign, geometry_)
      + sizeof(DetectedTrafficSign_DetectedMainSign::geometry_)
      - PROTOBUF_FIELD_OFFSET(DetectedTrafficSign_DetectedMainSign, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedTrafficSign_DetectedMainSign::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fdetectedtrafficsign_2eproto_getter, &descriptor_table_osi_5fdetectedtrafficsign_2eproto_once,
      file_level_metadata_osi_5fdetectedtrafficsign_2eproto[1]);
}

// ===================================================================

class DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::_Internal {
 public:
  using HasBits = decltype(std::declval<DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign>()._has_bits_);
  static void set_has_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::TrafficSign_SupplementarySign_Classification& classification(const DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign* msg);
  static void set_has_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osi3::TrafficSign_SupplementarySign_Classification&
DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::_Internal::classification(const DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign* msg) {
  return *msg->classification_;
}
void DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::clear_classification() {
  if (classification_ != nullptr) classification_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign)
}
DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign(const DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_classification()) {
    classification_ = new ::osi3::TrafficSign_SupplementarySign_Classification(*from.classification_);
  } else {
    classification_ = nullptr;
  }
  probability_ = from.probability_;
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign)
}

void DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&classification_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&probability_) -
    reinterpret_cast<char*>(&classification_)) + sizeof(probability_));
}

DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::~DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign() {
  // @@protoc_insertion_point(destructor:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete classification_;
}

void DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::ArenaDtor(void* object) {
  DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign* _this = reinterpret_cast< DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign* >(object);
  (void)_this;
}
void DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(classification_ != nullptr);
    classification_->Clear();
  }
  probability_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_probability(&has_bits);
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficSign.SupplementarySign.Classification classification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_classification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_probability(), target);
  }

  // optional .osi3.TrafficSign.SupplementarySign.Classification classification = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::classification(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign)
  return target;
}

size_t DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .osi3.TrafficSign.SupplementarySign.Classification classification = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *classification_);
    }

    // optional double probability = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::GetClassData() const { return &_class_data_; }

void DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign *>(to)->MergeFrom(
      static_cast<const DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign &>(from));
}


void DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::MergeFrom(const DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_classification()->::osi3::TrafficSign_SupplementarySign_Classification::MergeFrom(from._internal_classification());
    }
    if (cached_has_bits & 0x00000002u) {
      probability_ = from.probability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::CopyFrom(const DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::IsInitialized() const {
  return true;
}

void DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::InternalSwap(DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign, probability_)
      + sizeof(DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::probability_)
      - PROTOBUF_FIELD_OFFSET(DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign, classification_)>(
          reinterpret_cast<char*>(&classification_),
          reinterpret_cast<char*>(&other->classification_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fdetectedtrafficsign_2eproto_getter, &descriptor_table_osi_5fdetectedtrafficsign_2eproto_once,
      file_level_metadata_osi_5fdetectedtrafficsign_2eproto[2]);
}

// ===================================================================

class DetectedTrafficSign_DetectedSupplementarySign::_Internal {
 public:
  using HasBits = decltype(std::declval<DetectedTrafficSign_DetectedSupplementarySign>()._has_bits_);
  static const ::osi3::BaseStationary& base(const DetectedTrafficSign_DetectedSupplementarySign* msg);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::BaseStationary& base_rmse(const DetectedTrafficSign_DetectedSupplementarySign* msg);
  static void set_has_base_rmse(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::osi3::BaseStationary&
DetectedTrafficSign_DetectedSupplementarySign::_Internal::base(const DetectedTrafficSign_DetectedSupplementarySign* msg) {
  return *msg->base_;
}
const ::osi3::BaseStationary&
DetectedTrafficSign_DetectedSupplementarySign::_Internal::base_rmse(const DetectedTrafficSign_DetectedSupplementarySign* msg) {
  return *msg->base_rmse_;
}
void DetectedTrafficSign_DetectedSupplementarySign::clear_base() {
  if (base_ != nullptr) base_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void DetectedTrafficSign_DetectedSupplementarySign::clear_base_rmse() {
  if (base_rmse_ != nullptr) base_rmse_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
DetectedTrafficSign_DetectedSupplementarySign::DetectedTrafficSign_DetectedSupplementarySign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  candidate_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.DetectedTrafficSign.DetectedSupplementarySign)
}
DetectedTrafficSign_DetectedSupplementarySign::DetectedTrafficSign_DetectedSupplementarySign(const DetectedTrafficSign_DetectedSupplementarySign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      candidate_(from.candidate_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::osi3::BaseStationary(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_base_rmse()) {
    base_rmse_ = new ::osi3::BaseStationary(*from.base_rmse_);
  } else {
    base_rmse_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedTrafficSign.DetectedSupplementarySign)
}

void DetectedTrafficSign_DetectedSupplementarySign::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&base_rmse_) -
    reinterpret_cast<char*>(&base_)) + sizeof(base_rmse_));
}

DetectedTrafficSign_DetectedSupplementarySign::~DetectedTrafficSign_DetectedSupplementarySign() {
  // @@protoc_insertion_point(destructor:osi3.DetectedTrafficSign.DetectedSupplementarySign)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DetectedTrafficSign_DetectedSupplementarySign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete base_rmse_;
}

void DetectedTrafficSign_DetectedSupplementarySign::ArenaDtor(void* object) {
  DetectedTrafficSign_DetectedSupplementarySign* _this = reinterpret_cast< DetectedTrafficSign_DetectedSupplementarySign* >(object);
  (void)_this;
}
void DetectedTrafficSign_DetectedSupplementarySign::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetectedTrafficSign_DetectedSupplementarySign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DetectedTrafficSign_DetectedSupplementarySign::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedTrafficSign.DetectedSupplementarySign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidate_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(base_ != nullptr);
      base_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(base_rmse_ != nullptr);
      base_rmse_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectedTrafficSign_DetectedSupplementarySign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign candidate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candidate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.BaseStationary base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.BaseStationary base_rmse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_rmse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectedTrafficSign_DetectedSupplementarySign::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedTrafficSign.DetectedSupplementarySign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign candidate = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_candidate_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_candidate(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .osi3.BaseStationary base = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::base(this), target, stream);
  }

  // optional .osi3.BaseStationary base_rmse = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::base_rmse(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedTrafficSign.DetectedSupplementarySign)
  return target;
}

size_t DetectedTrafficSign_DetectedSupplementarySign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedTrafficSign.DetectedSupplementarySign)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign candidate = 1;
  total_size += 1UL * this->_internal_candidate_size();
  for (const auto& msg : this->candidate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .osi3.BaseStationary base = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *base_);
    }

    // optional .osi3.BaseStationary base_rmse = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *base_rmse_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectedTrafficSign_DetectedSupplementarySign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DetectedTrafficSign_DetectedSupplementarySign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectedTrafficSign_DetectedSupplementarySign::GetClassData() const { return &_class_data_; }

void DetectedTrafficSign_DetectedSupplementarySign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DetectedTrafficSign_DetectedSupplementarySign *>(to)->MergeFrom(
      static_cast<const DetectedTrafficSign_DetectedSupplementarySign &>(from));
}


void DetectedTrafficSign_DetectedSupplementarySign::MergeFrom(const DetectedTrafficSign_DetectedSupplementarySign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedTrafficSign.DetectedSupplementarySign)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candidate_.MergeFrom(from.candidate_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_base()->::osi3::BaseStationary::MergeFrom(from._internal_base());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_base_rmse()->::osi3::BaseStationary::MergeFrom(from._internal_base_rmse());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectedTrafficSign_DetectedSupplementarySign::CopyFrom(const DetectedTrafficSign_DetectedSupplementarySign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedTrafficSign.DetectedSupplementarySign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedTrafficSign_DetectedSupplementarySign::IsInitialized() const {
  return true;
}

void DetectedTrafficSign_DetectedSupplementarySign::InternalSwap(DetectedTrafficSign_DetectedSupplementarySign* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  candidate_.InternalSwap(&other->candidate_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectedTrafficSign_DetectedSupplementarySign, base_rmse_)
      + sizeof(DetectedTrafficSign_DetectedSupplementarySign::base_rmse_)
      - PROTOBUF_FIELD_OFFSET(DetectedTrafficSign_DetectedSupplementarySign, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedTrafficSign_DetectedSupplementarySign::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fdetectedtrafficsign_2eproto_getter, &descriptor_table_osi_5fdetectedtrafficsign_2eproto_once,
      file_level_metadata_osi_5fdetectedtrafficsign_2eproto[3]);
}

// ===================================================================

class DetectedTrafficSign::_Internal {
 public:
  using HasBits = decltype(std::declval<DetectedTrafficSign>()._has_bits_);
  static const ::osi3::DetectedItemHeader& header(const DetectedTrafficSign* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::DetectedTrafficSign_DetectedMainSign& main_sign(const DetectedTrafficSign* msg);
  static void set_has_main_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::osi3::DetectedItemHeader&
DetectedTrafficSign::_Internal::header(const DetectedTrafficSign* msg) {
  return *msg->header_;
}
const ::osi3::DetectedTrafficSign_DetectedMainSign&
DetectedTrafficSign::_Internal::main_sign(const DetectedTrafficSign* msg) {
  return *msg->main_sign_;
}
void DetectedTrafficSign::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
DetectedTrafficSign::DetectedTrafficSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  supplementary_sign_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.DetectedTrafficSign)
}
DetectedTrafficSign::DetectedTrafficSign(const DetectedTrafficSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      supplementary_sign_(from.supplementary_sign_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::osi3::DetectedItemHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_main_sign()) {
    main_sign_ = new ::osi3::DetectedTrafficSign_DetectedMainSign(*from.main_sign_);
  } else {
    main_sign_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedTrafficSign)
}

void DetectedTrafficSign::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&main_sign_) -
    reinterpret_cast<char*>(&header_)) + sizeof(main_sign_));
}

DetectedTrafficSign::~DetectedTrafficSign() {
  // @@protoc_insertion_point(destructor:osi3.DetectedTrafficSign)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DetectedTrafficSign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete main_sign_;
}

void DetectedTrafficSign::ArenaDtor(void* object) {
  DetectedTrafficSign* _this = reinterpret_cast< DetectedTrafficSign* >(object);
  (void)_this;
}
void DetectedTrafficSign::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetectedTrafficSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DetectedTrafficSign::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedTrafficSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supplementary_sign_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(main_sign_ != nullptr);
      main_sign_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectedTrafficSign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.DetectedItemHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.DetectedTrafficSign.DetectedMainSign main_sign = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_main_sign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.DetectedTrafficSign.DetectedSupplementarySign supplementary_sign = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_supplementary_sign(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectedTrafficSign::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedTrafficSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.DetectedItemHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional .osi3.DetectedTrafficSign.DetectedMainSign main_sign = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::main_sign(this), target, stream);
  }

  // repeated .osi3.DetectedTrafficSign.DetectedSupplementarySign supplementary_sign = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_supplementary_sign_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_supplementary_sign(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedTrafficSign)
  return target;
}

size_t DetectedTrafficSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedTrafficSign)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.DetectedTrafficSign.DetectedSupplementarySign supplementary_sign = 3;
  total_size += 1UL * this->_internal_supplementary_sign_size();
  for (const auto& msg : this->supplementary_sign_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .osi3.DetectedItemHeader header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .osi3.DetectedTrafficSign.DetectedMainSign main_sign = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *main_sign_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectedTrafficSign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DetectedTrafficSign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectedTrafficSign::GetClassData() const { return &_class_data_; }

void DetectedTrafficSign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DetectedTrafficSign *>(to)->MergeFrom(
      static_cast<const DetectedTrafficSign &>(from));
}


void DetectedTrafficSign::MergeFrom(const DetectedTrafficSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedTrafficSign)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supplementary_sign_.MergeFrom(from.supplementary_sign_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::osi3::DetectedItemHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_main_sign()->::osi3::DetectedTrafficSign_DetectedMainSign::MergeFrom(from._internal_main_sign());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectedTrafficSign::CopyFrom(const DetectedTrafficSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedTrafficSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedTrafficSign::IsInitialized() const {
  return true;
}

void DetectedTrafficSign::InternalSwap(DetectedTrafficSign* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  supplementary_sign_.InternalSwap(&other->supplementary_sign_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectedTrafficSign, main_sign_)
      + sizeof(DetectedTrafficSign::main_sign_)
      - PROTOBUF_FIELD_OFFSET(DetectedTrafficSign, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedTrafficSign::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fdetectedtrafficsign_2eproto_getter, &descriptor_table_osi_5fdetectedtrafficsign_2eproto_once,
      file_level_metadata_osi_5fdetectedtrafficsign_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign* Arena::CreateMaybeMessage< ::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::DetectedTrafficSign_DetectedMainSign* Arena::CreateMaybeMessage< ::osi3::DetectedTrafficSign_DetectedMainSign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::DetectedTrafficSign_DetectedMainSign >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign* Arena::CreateMaybeMessage< ::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::DetectedTrafficSign_DetectedSupplementarySign* Arena::CreateMaybeMessage< ::osi3::DetectedTrafficSign_DetectedSupplementarySign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::DetectedTrafficSign_DetectedSupplementarySign >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::DetectedTrafficSign* Arena::CreateMaybeMessage< ::osi3::DetectedTrafficSign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::DetectedTrafficSign >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
