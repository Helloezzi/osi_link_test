// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_groundtruth.proto

#include "osi_groundtruth.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace osi3 {
constexpr GroundTruth::GroundTruth(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stationary_object_()
  , moving_object_()
  , traffic_sign_()
  , traffic_light_()
  , road_marking_()
  , lane_boundary_()
  , lane_()
  , occupant_()
  , proj_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , map_reference_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , model_reference_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(nullptr)
  , timestamp_(nullptr)
  , host_vehicle_id_(nullptr)
  , environmental_conditions_(nullptr)
  , country_code_(0u){}
struct GroundTruthDefaultTypeInternal {
  constexpr GroundTruthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GroundTruthDefaultTypeInternal() {}
  union {
    GroundTruth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GroundTruthDefaultTypeInternal _GroundTruth_default_instance_;
}  // namespace osi3
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5fgroundtruth_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_osi_5fgroundtruth_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5fgroundtruth_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5fgroundtruth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, version_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, timestamp_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, host_vehicle_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, stationary_object_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, moving_object_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, traffic_sign_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, traffic_light_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, road_marking_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, lane_boundary_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, lane_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, occupant_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, environmental_conditions_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, country_code_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, proj_string_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, map_reference_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, model_reference_),
  3,
  4,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  6,
  7,
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 22, -1, sizeof(::osi3::GroundTruth)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_GroundTruth_default_instance_),
};

const char descriptor_table_protodef_osi_5fgroundtruth_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025osi_groundtruth.proto\022\004osi3\032\021osi_versi"
  "on.proto\032\020osi_common.proto\032\025osi_environm"
  "ent.proto\032\025osi_trafficsign.proto\032\026osi_tr"
  "afficlight.proto\032\025osi_roadmarking.proto\032"
  "\016osi_lane.proto\032\020osi_object.proto\032\022osi_o"
  "ccupant.proto\"\343\004\n\013GroundTruth\022\'\n\007version"
  "\030\001 \001(\0132\026.osi3.InterfaceVersion\022\"\n\ttimest"
  "amp\030\002 \001(\0132\017.osi3.Timestamp\022)\n\017host_vehic"
  "le_id\030\003 \001(\0132\020.osi3.Identifier\0221\n\021station"
  "ary_object\030\004 \003(\0132\026.osi3.StationaryObject"
  "\022)\n\rmoving_object\030\005 \003(\0132\022.osi3.MovingObj"
  "ect\022\'\n\014traffic_sign\030\006 \003(\0132\021.osi3.Traffic"
  "Sign\022)\n\rtraffic_light\030\007 \003(\0132\022.osi3.Traff"
  "icLight\022\'\n\014road_marking\030\010 \003(\0132\021.osi3.Roa"
  "dMarking\022)\n\rlane_boundary\030\t \003(\0132\022.osi3.L"
  "aneBoundary\022\030\n\004lane\030\n \003(\0132\n.osi3.Lane\022 \n"
  "\010occupant\030\013 \003(\0132\016.osi3.Occupant\022\?\n\030envir"
  "onmental_conditions\030\014 \001(\0132\035.osi3.Environ"
  "mentalConditions\022\024\n\014country_code\030\r \001(\r\022\023"
  "\n\013proj_string\030\016 \001(\t\022\025\n\rmap_reference\030\017 \001"
  "(\t\022\027\n\017model_reference\030\020 \001(\tB\002H\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5fgroundtruth_2eproto_deps[9] = {
  &::descriptor_table_osi_5fcommon_2eproto,
  &::descriptor_table_osi_5fenvironment_2eproto,
  &::descriptor_table_osi_5flane_2eproto,
  &::descriptor_table_osi_5fobject_2eproto,
  &::descriptor_table_osi_5foccupant_2eproto,
  &::descriptor_table_osi_5froadmarking_2eproto,
  &::descriptor_table_osi_5ftrafficlight_2eproto,
  &::descriptor_table_osi_5ftrafficsign_2eproto,
  &::descriptor_table_osi_5fversion_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5fgroundtruth_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fgroundtruth_2eproto = {
  false, false, 831, descriptor_table_protodef_osi_5fgroundtruth_2eproto, "osi_groundtruth.proto", 
  &descriptor_table_osi_5fgroundtruth_2eproto_once, descriptor_table_osi_5fgroundtruth_2eproto_deps, 9, 1,
  schemas, file_default_instances, TableStruct_osi_5fgroundtruth_2eproto::offsets,
  file_level_metadata_osi_5fgroundtruth_2eproto, file_level_enum_descriptors_osi_5fgroundtruth_2eproto, file_level_service_descriptors_osi_5fgroundtruth_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_osi_5fgroundtruth_2eproto_getter() {
  return &descriptor_table_osi_5fgroundtruth_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_osi_5fgroundtruth_2eproto(&descriptor_table_osi_5fgroundtruth_2eproto);
namespace osi3 {

// ===================================================================

class GroundTruth::_Internal {
 public:
  using HasBits = decltype(std::declval<GroundTruth>()._has_bits_);
  static const ::osi3::InterfaceVersion& version(const GroundTruth* msg);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::osi3::Timestamp& timestamp(const GroundTruth* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::osi3::Identifier& host_vehicle_id(const GroundTruth* msg);
  static void set_has_host_vehicle_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::osi3::EnvironmentalConditions& environmental_conditions(const GroundTruth* msg);
  static void set_has_environmental_conditions(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_proj_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_map_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_model_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::osi3::InterfaceVersion&
GroundTruth::_Internal::version(const GroundTruth* msg) {
  return *msg->version_;
}
const ::osi3::Timestamp&
GroundTruth::_Internal::timestamp(const GroundTruth* msg) {
  return *msg->timestamp_;
}
const ::osi3::Identifier&
GroundTruth::_Internal::host_vehicle_id(const GroundTruth* msg) {
  return *msg->host_vehicle_id_;
}
const ::osi3::EnvironmentalConditions&
GroundTruth::_Internal::environmental_conditions(const GroundTruth* msg) {
  return *msg->environmental_conditions_;
}
void GroundTruth::clear_version() {
  if (version_ != nullptr) version_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void GroundTruth::clear_timestamp() {
  if (timestamp_ != nullptr) timestamp_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void GroundTruth::clear_host_vehicle_id() {
  if (host_vehicle_id_ != nullptr) host_vehicle_id_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void GroundTruth::clear_stationary_object() {
  stationary_object_.Clear();
}
void GroundTruth::clear_moving_object() {
  moving_object_.Clear();
}
void GroundTruth::clear_traffic_sign() {
  traffic_sign_.Clear();
}
void GroundTruth::clear_traffic_light() {
  traffic_light_.Clear();
}
void GroundTruth::clear_road_marking() {
  road_marking_.Clear();
}
void GroundTruth::clear_lane_boundary() {
  lane_boundary_.Clear();
}
void GroundTruth::clear_lane() {
  lane_.Clear();
}
void GroundTruth::clear_occupant() {
  occupant_.Clear();
}
void GroundTruth::clear_environmental_conditions() {
  if (environmental_conditions_ != nullptr) environmental_conditions_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
GroundTruth::GroundTruth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stationary_object_(arena),
  moving_object_(arena),
  traffic_sign_(arena),
  traffic_light_(arena),
  road_marking_(arena),
  lane_boundary_(arena),
  lane_(arena),
  occupant_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.GroundTruth)
}
GroundTruth::GroundTruth(const GroundTruth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stationary_object_(from.stationary_object_),
      moving_object_(from.moving_object_),
      traffic_sign_(from.traffic_sign_),
      traffic_light_(from.traffic_light_),
      road_marking_(from.road_marking_),
      lane_boundary_(from.lane_boundary_),
      lane_(from.lane_),
      occupant_(from.occupant_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  proj_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_proj_string()) {
    proj_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proj_string(), 
      GetArenaForAllocation());
  }
  map_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_map_reference()) {
    map_reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map_reference(), 
      GetArenaForAllocation());
  }
  model_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_model_reference()) {
    model_reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_reference(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_version()) {
    version_ = new ::osi3::InterfaceVersion(*from.version_);
  } else {
    version_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::osi3::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from._internal_has_host_vehicle_id()) {
    host_vehicle_id_ = new ::osi3::Identifier(*from.host_vehicle_id_);
  } else {
    host_vehicle_id_ = nullptr;
  }
  if (from._internal_has_environmental_conditions()) {
    environmental_conditions_ = new ::osi3::EnvironmentalConditions(*from.environmental_conditions_);
  } else {
    environmental_conditions_ = nullptr;
  }
  country_code_ = from.country_code_;
  // @@protoc_insertion_point(copy_constructor:osi3.GroundTruth)
}

void GroundTruth::SharedCtor() {
proj_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
map_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
model_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&country_code_) -
    reinterpret_cast<char*>(&version_)) + sizeof(country_code_));
}

GroundTruth::~GroundTruth() {
  // @@protoc_insertion_point(destructor:osi3.GroundTruth)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GroundTruth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  proj_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete version_;
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete host_vehicle_id_;
  if (this != internal_default_instance()) delete environmental_conditions_;
}

void GroundTruth::ArenaDtor(void* object) {
  GroundTruth* _this = reinterpret_cast< GroundTruth* >(object);
  (void)_this;
}
void GroundTruth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroundTruth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GroundTruth::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.GroundTruth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stationary_object_.Clear();
  moving_object_.Clear();
  traffic_sign_.Clear();
  traffic_light_.Clear();
  road_marking_.Clear();
  lane_boundary_.Clear();
  lane_.Clear();
  occupant_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      proj_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      map_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      model_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(version_ != nullptr);
      version_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(timestamp_ != nullptr);
      timestamp_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(host_vehicle_id_ != nullptr);
      host_vehicle_id_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(environmental_conditions_ != nullptr);
      environmental_conditions_->Clear();
    }
  }
  country_code_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroundTruth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.InterfaceVersion version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Identifier host_vehicle_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_vehicle_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.StationaryObject stationary_object = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stationary_object(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.MovingObject moving_object = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_moving_object(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.TrafficSign traffic_sign = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_traffic_sign(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.TrafficLight traffic_light = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_traffic_light(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.RoadMarking road_marking = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_road_marking(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.LaneBoundary lane_boundary = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane_boundary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Lane lane = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Occupant occupant = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_occupant(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.EnvironmentalConditions environmental_conditions = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_environmental_conditions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 country_code = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_country_code(&has_bits);
          country_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string proj_string = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_proj_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "osi3.GroundTruth.proj_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string map_reference = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_map_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "osi3.GroundTruth.map_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string model_reference = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_model_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "osi3.GroundTruth.model_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroundTruth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.GroundTruth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.InterfaceVersion version = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::version(this), target, stream);
  }

  // optional .osi3.Timestamp timestamp = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timestamp(this), target, stream);
  }

  // optional .osi3.Identifier host_vehicle_id = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::host_vehicle_id(this), target, stream);
  }

  // repeated .osi3.StationaryObject stationary_object = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stationary_object_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_stationary_object(i), target, stream);
  }

  // repeated .osi3.MovingObject moving_object = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_moving_object_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_moving_object(i), target, stream);
  }

  // repeated .osi3.TrafficSign traffic_sign = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_traffic_sign_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_traffic_sign(i), target, stream);
  }

  // repeated .osi3.TrafficLight traffic_light = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_traffic_light_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_traffic_light(i), target, stream);
  }

  // repeated .osi3.RoadMarking road_marking = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_road_marking_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_road_marking(i), target, stream);
  }

  // repeated .osi3.LaneBoundary lane_boundary = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lane_boundary_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_lane_boundary(i), target, stream);
  }

  // repeated .osi3.Lane lane = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lane_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_lane(i), target, stream);
  }

  // repeated .osi3.Occupant occupant = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_occupant_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_occupant(i), target, stream);
  }

  // optional .osi3.EnvironmentalConditions environmental_conditions = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::environmental_conditions(this), target, stream);
  }

  // optional uint32 country_code = 13;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_country_code(), target);
  }

  // optional string proj_string = 14;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_proj_string().data(), static_cast<int>(this->_internal_proj_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.GroundTruth.proj_string");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_proj_string(), target);
  }

  // optional string map_reference = 15;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map_reference().data(), static_cast<int>(this->_internal_map_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.GroundTruth.map_reference");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_map_reference(), target);
  }

  // optional string model_reference = 16;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model_reference().data(), static_cast<int>(this->_internal_model_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.GroundTruth.model_reference");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_model_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.GroundTruth)
  return target;
}

size_t GroundTruth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.GroundTruth)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.StationaryObject stationary_object = 4;
  total_size += 1UL * this->_internal_stationary_object_size();
  for (const auto& msg : this->stationary_object_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.MovingObject moving_object = 5;
  total_size += 1UL * this->_internal_moving_object_size();
  for (const auto& msg : this->moving_object_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.TrafficSign traffic_sign = 6;
  total_size += 1UL * this->_internal_traffic_sign_size();
  for (const auto& msg : this->traffic_sign_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.TrafficLight traffic_light = 7;
  total_size += 1UL * this->_internal_traffic_light_size();
  for (const auto& msg : this->traffic_light_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.RoadMarking road_marking = 8;
  total_size += 1UL * this->_internal_road_marking_size();
  for (const auto& msg : this->road_marking_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.LaneBoundary lane_boundary = 9;
  total_size += 1UL * this->_internal_lane_boundary_size();
  for (const auto& msg : this->lane_boundary_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.Lane lane = 10;
  total_size += 1UL * this->_internal_lane_size();
  for (const auto& msg : this->lane_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.Occupant occupant = 11;
  total_size += 1UL * this->_internal_occupant_size();
  for (const auto& msg : this->occupant_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string proj_string = 14;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_proj_string());
    }

    // optional string map_reference = 15;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map_reference());
    }

    // optional string model_reference = 16;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model_reference());
    }

    // optional .osi3.InterfaceVersion version = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *version_);
    }

    // optional .osi3.Timestamp timestamp = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *timestamp_);
    }

    // optional .osi3.Identifier host_vehicle_id = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *host_vehicle_id_);
    }

    // optional .osi3.EnvironmentalConditions environmental_conditions = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *environmental_conditions_);
    }

    // optional uint32 country_code = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_country_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroundTruth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GroundTruth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroundTruth::GetClassData() const { return &_class_data_; }

void GroundTruth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GroundTruth *>(to)->MergeFrom(
      static_cast<const GroundTruth &>(from));
}


void GroundTruth::MergeFrom(const GroundTruth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.GroundTruth)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stationary_object_.MergeFrom(from.stationary_object_);
  moving_object_.MergeFrom(from.moving_object_);
  traffic_sign_.MergeFrom(from.traffic_sign_);
  traffic_light_.MergeFrom(from.traffic_light_);
  road_marking_.MergeFrom(from.road_marking_);
  lane_boundary_.MergeFrom(from.lane_boundary_);
  lane_.MergeFrom(from.lane_);
  occupant_.MergeFrom(from.occupant_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_proj_string(from._internal_proj_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_map_reference(from._internal_map_reference());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_model_reference(from._internal_model_reference());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_version()->::osi3::InterfaceVersion::MergeFrom(from._internal_version());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_timestamp()->::osi3::Timestamp::MergeFrom(from._internal_timestamp());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_host_vehicle_id()->::osi3::Identifier::MergeFrom(from._internal_host_vehicle_id());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_environmental_conditions()->::osi3::EnvironmentalConditions::MergeFrom(from._internal_environmental_conditions());
    }
    if (cached_has_bits & 0x00000080u) {
      country_code_ = from.country_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroundTruth::CopyFrom(const GroundTruth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.GroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroundTruth::IsInitialized() const {
  return true;
}

void GroundTruth::InternalSwap(GroundTruth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stationary_object_.InternalSwap(&other->stationary_object_);
  moving_object_.InternalSwap(&other->moving_object_);
  traffic_sign_.InternalSwap(&other->traffic_sign_);
  traffic_light_.InternalSwap(&other->traffic_light_);
  road_marking_.InternalSwap(&other->road_marking_);
  lane_boundary_.InternalSwap(&other->lane_boundary_);
  lane_.InternalSwap(&other->lane_);
  occupant_.InternalSwap(&other->occupant_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &proj_string_, lhs_arena,
      &other->proj_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &map_reference_, lhs_arena,
      &other->map_reference_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_reference_, lhs_arena,
      &other->model_reference_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroundTruth, country_code_)
      + sizeof(GroundTruth::country_code_)
      - PROTOBUF_FIELD_OFFSET(GroundTruth, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroundTruth::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fgroundtruth_2eproto_getter, &descriptor_table_osi_5fgroundtruth_2eproto_once,
      file_level_metadata_osi_5fgroundtruth_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::GroundTruth* Arena::CreateMaybeMessage< ::osi3::GroundTruth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::GroundTruth >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
