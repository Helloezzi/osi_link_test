// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_sensordata.proto

#include "osi_sensordata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace osi3 {
constexpr DetectedEntityHeader::DetectedEntityHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : measurement_time_(nullptr)
  , cycle_counter_(uint64_t{0u})
  , data_qualifier_(0)
{}
struct DetectedEntityHeaderDefaultTypeInternal {
  constexpr DetectedEntityHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DetectedEntityHeaderDefaultTypeInternal() {}
  union {
    DetectedEntityHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DetectedEntityHeaderDefaultTypeInternal _DetectedEntityHeader_default_instance_;
constexpr SensorData::SensorData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sensor_view_()
  , stationary_object_()
  , moving_object_()
  , traffic_sign_()
  , traffic_light_()
  , road_marking_()
  , lane_boundary_()
  , lane_()
  , occupant_()
  , version_(nullptr)
  , timestamp_(nullptr)
  , host_vehicle_location_(nullptr)
  , host_vehicle_location_rmse_(nullptr)
  , sensor_id_(nullptr)
  , mounting_position_(nullptr)
  , mounting_position_rmse_(nullptr)
  , last_measurement_time_(nullptr)
  , stationary_object_header_(nullptr)
  , moving_object_header_(nullptr)
  , traffic_sign_header_(nullptr)
  , traffic_light_header_(nullptr)
  , road_marking_header_(nullptr)
  , lane_boundary_header_(nullptr)
  , lane_header_(nullptr)
  , occupant_header_(nullptr)
  , feature_data_(nullptr)
  , logical_detection_data_(nullptr){}
struct SensorDataDefaultTypeInternal {
  constexpr SensorDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SensorDataDefaultTypeInternal() {}
  union {
    SensorData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SensorDataDefaultTypeInternal _SensorData_default_instance_;
}  // namespace osi3
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5fsensordata_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_osi_5fsensordata_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5fsensordata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5fsensordata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedEntityHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedEntityHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedEntityHeader, measurement_time_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedEntityHeader, cycle_counter_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedEntityHeader, data_qualifier_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, version_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, host_vehicle_location_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, host_vehicle_location_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, mounting_position_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, mounting_position_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, sensor_view_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, last_measurement_time_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, stationary_object_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, stationary_object_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, moving_object_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, moving_object_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, traffic_sign_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, traffic_sign_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, traffic_light_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, traffic_light_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, road_marking_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, road_marking_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, lane_boundary_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, lane_boundary_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, lane_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, lane_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, occupant_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, occupant_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, feature_data_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, logical_detection_data_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  7,
  8,
  ~0u,
  9,
  ~0u,
  10,
  ~0u,
  11,
  ~0u,
  12,
  ~0u,
  13,
  ~0u,
  14,
  ~0u,
  15,
  ~0u,
  16,
  17,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::osi3::DetectedEntityHeader)},
  { 12, 45, -1, sizeof(::osi3::SensorData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_DetectedEntityHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_SensorData_default_instance_),
};

const char descriptor_table_protodef_osi_5fsensordata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024osi_sensordata.proto\022\004osi3\032\021osi_versio"
  "n.proto\032\020osi_common.proto\032\035osi_detectedt"
  "rafficsign.proto\032\036osi_detectedtrafficlig"
  "ht.proto\032\035osi_detectedroadmarking.proto\032"
  "\026osi_detectedlane.proto\032\030osi_detectedobj"
  "ect.proto\032\032osi_detectedoccupant.proto\032\024o"
  "si_sensorview.proto\032\025osi_featuredata.pro"
  "to\032\036osi_logicaldetectiondata.proto\"\216\003\n\024D"
  "etectedEntityHeader\022)\n\020measurement_time\030"
  "\001 \001(\0132\017.osi3.Timestamp\022\025\n\rcycle_counter\030"
  "\002 \001(\004\022@\n\016data_qualifier\030\003 \001(\0162(.osi3.Det"
  "ectedEntityHeader.DataQualifier\"\361\001\n\rData"
  "Qualifier\022\032\n\026DATA_QUALIFIER_UNKNOWN\020\000\022\030\n"
  "\024DATA_QUALIFIER_OTHER\020\001\022\034\n\030DATA_QUALIFIE"
  "R_AVAILABLE\020\002\022$\n DATA_QUALIFIER_AVAILABL"
  "E_REDUCED\020\003\022 \n\034DATA_QUALIFIER_NOT_AVAILA"
  "BLE\020\004\022\034\n\030DATA_QUALIFIER_BLINDNESS\020\005\022&\n\"D"
  "ATA_QUALIFIER_TEMPORARY_AVAILABLE\020\006\"\322\n\n\n"
  "SensorData\022\'\n\007version\030\001 \001(\0132\026.osi3.Inter"
  "faceVersion\022\"\n\ttimestamp\030\002 \001(\0132\017.osi3.Ti"
  "mestamp\022/\n\025host_vehicle_location\030\003 \001(\0132\020"
  ".osi3.BaseMoving\0224\n\032host_vehicle_locatio"
  "n_rmse\030\004 \001(\0132\020.osi3.BaseMoving\022#\n\tsensor"
  "_id\030\005 \001(\0132\020.osi3.Identifier\0221\n\021mounting_"
  "position\030\006 \001(\0132\026.osi3.MountingPosition\0226"
  "\n\026mounting_position_rmse\030\007 \001(\0132\026.osi3.Mo"
  "untingPosition\022%\n\013sensor_view\030\010 \003(\0132\020.os"
  "i3.SensorView\022.\n\025last_measurement_time\030\t"
  " \001(\0132\017.osi3.Timestamp\022<\n\030stationary_obje"
  "ct_header\030\n \001(\0132\032.osi3.DetectedEntityHea"
  "der\0229\n\021stationary_object\030\013 \003(\0132\036.osi3.De"
  "tectedStationaryObject\0228\n\024moving_object_"
  "header\030\014 \001(\0132\032.osi3.DetectedEntityHeader"
  "\0221\n\rmoving_object\030\r \003(\0132\032.osi3.DetectedM"
  "ovingObject\0227\n\023traffic_sign_header\030\016 \001(\013"
  "2\032.osi3.DetectedEntityHeader\022/\n\014traffic_"
  "sign\030\017 \003(\0132\031.osi3.DetectedTrafficSign\0228\n"
  "\024traffic_light_header\030\020 \001(\0132\032.osi3.Detec"
  "tedEntityHeader\0221\n\rtraffic_light\030\021 \003(\0132\032"
  ".osi3.DetectedTrafficLight\0227\n\023road_marki"
  "ng_header\030\022 \001(\0132\032.osi3.DetectedEntityHea"
  "der\022/\n\014road_marking\030\023 \003(\0132\031.osi3.Detecte"
  "dRoadMarking\0228\n\024lane_boundary_header\030\024 \001"
  "(\0132\032.osi3.DetectedEntityHeader\0221\n\rlane_b"
  "oundary\030\025 \003(\0132\032.osi3.DetectedLaneBoundar"
  "y\022/\n\013lane_header\030\026 \001(\0132\032.osi3.DetectedEn"
  "tityHeader\022 \n\004lane\030\027 \003(\0132\022.osi3.Detected"
  "Lane\0223\n\017occupant_header\030\030 \001(\0132\032.osi3.Det"
  "ectedEntityHeader\022(\n\010occupant\030\031 \003(\0132\026.os"
  "i3.DetectedOccupant\022\'\n\014feature_data\030\032 \001("
  "\0132\021.osi3.FeatureData\022:\n\026logical_detectio"
  "n_data\030\033 \001(\0132\032.osi3.LogicalDetectionData"
  "B\002H\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5fsensordata_2eproto_deps[11] = {
  &::descriptor_table_osi_5fcommon_2eproto,
  &::descriptor_table_osi_5fdetectedlane_2eproto,
  &::descriptor_table_osi_5fdetectedobject_2eproto,
  &::descriptor_table_osi_5fdetectedoccupant_2eproto,
  &::descriptor_table_osi_5fdetectedroadmarking_2eproto,
  &::descriptor_table_osi_5fdetectedtrafficlight_2eproto,
  &::descriptor_table_osi_5fdetectedtrafficsign_2eproto,
  &::descriptor_table_osi_5ffeaturedata_2eproto,
  &::descriptor_table_osi_5flogicaldetectiondata_2eproto,
  &::descriptor_table_osi_5fsensorview_2eproto,
  &::descriptor_table_osi_5fversion_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5fsensordata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fsensordata_2eproto = {
  false, false, 2084, descriptor_table_protodef_osi_5fsensordata_2eproto, "osi_sensordata.proto", 
  &descriptor_table_osi_5fsensordata_2eproto_once, descriptor_table_osi_5fsensordata_2eproto_deps, 11, 2,
  schemas, file_default_instances, TableStruct_osi_5fsensordata_2eproto::offsets,
  file_level_metadata_osi_5fsensordata_2eproto, file_level_enum_descriptors_osi_5fsensordata_2eproto, file_level_service_descriptors_osi_5fsensordata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_osi_5fsensordata_2eproto_getter() {
  return &descriptor_table_osi_5fsensordata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_osi_5fsensordata_2eproto(&descriptor_table_osi_5fsensordata_2eproto);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DetectedEntityHeader_DataQualifier_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fsensordata_2eproto);
  return file_level_enum_descriptors_osi_5fsensordata_2eproto[0];
}
bool DetectedEntityHeader_DataQualifier_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DetectedEntityHeader_DataQualifier DetectedEntityHeader::DATA_QUALIFIER_UNKNOWN;
constexpr DetectedEntityHeader_DataQualifier DetectedEntityHeader::DATA_QUALIFIER_OTHER;
constexpr DetectedEntityHeader_DataQualifier DetectedEntityHeader::DATA_QUALIFIER_AVAILABLE;
constexpr DetectedEntityHeader_DataQualifier DetectedEntityHeader::DATA_QUALIFIER_AVAILABLE_REDUCED;
constexpr DetectedEntityHeader_DataQualifier DetectedEntityHeader::DATA_QUALIFIER_NOT_AVAILABLE;
constexpr DetectedEntityHeader_DataQualifier DetectedEntityHeader::DATA_QUALIFIER_BLINDNESS;
constexpr DetectedEntityHeader_DataQualifier DetectedEntityHeader::DATA_QUALIFIER_TEMPORARY_AVAILABLE;
constexpr DetectedEntityHeader_DataQualifier DetectedEntityHeader::DataQualifier_MIN;
constexpr DetectedEntityHeader_DataQualifier DetectedEntityHeader::DataQualifier_MAX;
constexpr int DetectedEntityHeader::DataQualifier_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class DetectedEntityHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<DetectedEntityHeader>()._has_bits_);
  static const ::osi3::Timestamp& measurement_time(const DetectedEntityHeader* msg);
  static void set_has_measurement_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cycle_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data_qualifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::osi3::Timestamp&
DetectedEntityHeader::_Internal::measurement_time(const DetectedEntityHeader* msg) {
  return *msg->measurement_time_;
}
void DetectedEntityHeader::clear_measurement_time() {
  if (measurement_time_ != nullptr) measurement_time_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
DetectedEntityHeader::DetectedEntityHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.DetectedEntityHeader)
}
DetectedEntityHeader::DetectedEntityHeader(const DetectedEntityHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_measurement_time()) {
    measurement_time_ = new ::osi3::Timestamp(*from.measurement_time_);
  } else {
    measurement_time_ = nullptr;
  }
  ::memcpy(&cycle_counter_, &from.cycle_counter_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_qualifier_) -
    reinterpret_cast<char*>(&cycle_counter_)) + sizeof(data_qualifier_));
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedEntityHeader)
}

void DetectedEntityHeader::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&measurement_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_qualifier_) -
    reinterpret_cast<char*>(&measurement_time_)) + sizeof(data_qualifier_));
}

DetectedEntityHeader::~DetectedEntityHeader() {
  // @@protoc_insertion_point(destructor:osi3.DetectedEntityHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DetectedEntityHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete measurement_time_;
}

void DetectedEntityHeader::ArenaDtor(void* object) {
  DetectedEntityHeader* _this = reinterpret_cast< DetectedEntityHeader* >(object);
  (void)_this;
}
void DetectedEntityHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetectedEntityHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DetectedEntityHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedEntityHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(measurement_time_ != nullptr);
    measurement_time_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&cycle_counter_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_qualifier_) -
        reinterpret_cast<char*>(&cycle_counter_)) + sizeof(data_qualifier_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectedEntityHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Timestamp measurement_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_measurement_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 cycle_counter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cycle_counter(&has_bits);
          cycle_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.DetectedEntityHeader.DataQualifier data_qualifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::DetectedEntityHeader_DataQualifier_IsValid(val))) {
            _internal_set_data_qualifier(static_cast<::osi3::DetectedEntityHeader_DataQualifier>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectedEntityHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedEntityHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.Timestamp measurement_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::measurement_time(this), target, stream);
  }

  // optional uint64 cycle_counter = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_cycle_counter(), target);
  }

  // optional .osi3.DetectedEntityHeader.DataQualifier data_qualifier = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_data_qualifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedEntityHeader)
  return target;
}

size_t DetectedEntityHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedEntityHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .osi3.Timestamp measurement_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *measurement_time_);
    }

    // optional uint64 cycle_counter = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_cycle_counter());
    }

    // optional .osi3.DetectedEntityHeader.DataQualifier data_qualifier = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_qualifier());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectedEntityHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DetectedEntityHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectedEntityHeader::GetClassData() const { return &_class_data_; }

void DetectedEntityHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DetectedEntityHeader *>(to)->MergeFrom(
      static_cast<const DetectedEntityHeader &>(from));
}


void DetectedEntityHeader::MergeFrom(const DetectedEntityHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedEntityHeader)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_measurement_time()->::osi3::Timestamp::MergeFrom(from._internal_measurement_time());
    }
    if (cached_has_bits & 0x00000002u) {
      cycle_counter_ = from.cycle_counter_;
    }
    if (cached_has_bits & 0x00000004u) {
      data_qualifier_ = from.data_qualifier_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectedEntityHeader::CopyFrom(const DetectedEntityHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedEntityHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedEntityHeader::IsInitialized() const {
  return true;
}

void DetectedEntityHeader::InternalSwap(DetectedEntityHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectedEntityHeader, data_qualifier_)
      + sizeof(DetectedEntityHeader::data_qualifier_)
      - PROTOBUF_FIELD_OFFSET(DetectedEntityHeader, measurement_time_)>(
          reinterpret_cast<char*>(&measurement_time_),
          reinterpret_cast<char*>(&other->measurement_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedEntityHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fsensordata_2eproto_getter, &descriptor_table_osi_5fsensordata_2eproto_once,
      file_level_metadata_osi_5fsensordata_2eproto[0]);
}

// ===================================================================

class SensorData::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorData>()._has_bits_);
  static const ::osi3::InterfaceVersion& version(const SensorData* msg);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::Timestamp& timestamp(const SensorData* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::BaseMoving& host_vehicle_location(const SensorData* msg);
  static void set_has_host_vehicle_location(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::osi3::BaseMoving& host_vehicle_location_rmse(const SensorData* msg);
  static void set_has_host_vehicle_location_rmse(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::osi3::Identifier& sensor_id(const SensorData* msg);
  static void set_has_sensor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::osi3::MountingPosition& mounting_position(const SensorData* msg);
  static void set_has_mounting_position(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::osi3::MountingPosition& mounting_position_rmse(const SensorData* msg);
  static void set_has_mounting_position_rmse(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::osi3::Timestamp& last_measurement_time(const SensorData* msg);
  static void set_has_last_measurement_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::osi3::DetectedEntityHeader& stationary_object_header(const SensorData* msg);
  static void set_has_stationary_object_header(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::osi3::DetectedEntityHeader& moving_object_header(const SensorData* msg);
  static void set_has_moving_object_header(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::osi3::DetectedEntityHeader& traffic_sign_header(const SensorData* msg);
  static void set_has_traffic_sign_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::osi3::DetectedEntityHeader& traffic_light_header(const SensorData* msg);
  static void set_has_traffic_light_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::osi3::DetectedEntityHeader& road_marking_header(const SensorData* msg);
  static void set_has_road_marking_header(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::osi3::DetectedEntityHeader& lane_boundary_header(const SensorData* msg);
  static void set_has_lane_boundary_header(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::osi3::DetectedEntityHeader& lane_header(const SensorData* msg);
  static void set_has_lane_header(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::osi3::DetectedEntityHeader& occupant_header(const SensorData* msg);
  static void set_has_occupant_header(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::osi3::FeatureData& feature_data(const SensorData* msg);
  static void set_has_feature_data(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::osi3::LogicalDetectionData& logical_detection_data(const SensorData* msg);
  static void set_has_logical_detection_data(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

const ::osi3::InterfaceVersion&
SensorData::_Internal::version(const SensorData* msg) {
  return *msg->version_;
}
const ::osi3::Timestamp&
SensorData::_Internal::timestamp(const SensorData* msg) {
  return *msg->timestamp_;
}
const ::osi3::BaseMoving&
SensorData::_Internal::host_vehicle_location(const SensorData* msg) {
  return *msg->host_vehicle_location_;
}
const ::osi3::BaseMoving&
SensorData::_Internal::host_vehicle_location_rmse(const SensorData* msg) {
  return *msg->host_vehicle_location_rmse_;
}
const ::osi3::Identifier&
SensorData::_Internal::sensor_id(const SensorData* msg) {
  return *msg->sensor_id_;
}
const ::osi3::MountingPosition&
SensorData::_Internal::mounting_position(const SensorData* msg) {
  return *msg->mounting_position_;
}
const ::osi3::MountingPosition&
SensorData::_Internal::mounting_position_rmse(const SensorData* msg) {
  return *msg->mounting_position_rmse_;
}
const ::osi3::Timestamp&
SensorData::_Internal::last_measurement_time(const SensorData* msg) {
  return *msg->last_measurement_time_;
}
const ::osi3::DetectedEntityHeader&
SensorData::_Internal::stationary_object_header(const SensorData* msg) {
  return *msg->stationary_object_header_;
}
const ::osi3::DetectedEntityHeader&
SensorData::_Internal::moving_object_header(const SensorData* msg) {
  return *msg->moving_object_header_;
}
const ::osi3::DetectedEntityHeader&
SensorData::_Internal::traffic_sign_header(const SensorData* msg) {
  return *msg->traffic_sign_header_;
}
const ::osi3::DetectedEntityHeader&
SensorData::_Internal::traffic_light_header(const SensorData* msg) {
  return *msg->traffic_light_header_;
}
const ::osi3::DetectedEntityHeader&
SensorData::_Internal::road_marking_header(const SensorData* msg) {
  return *msg->road_marking_header_;
}
const ::osi3::DetectedEntityHeader&
SensorData::_Internal::lane_boundary_header(const SensorData* msg) {
  return *msg->lane_boundary_header_;
}
const ::osi3::DetectedEntityHeader&
SensorData::_Internal::lane_header(const SensorData* msg) {
  return *msg->lane_header_;
}
const ::osi3::DetectedEntityHeader&
SensorData::_Internal::occupant_header(const SensorData* msg) {
  return *msg->occupant_header_;
}
const ::osi3::FeatureData&
SensorData::_Internal::feature_data(const SensorData* msg) {
  return *msg->feature_data_;
}
const ::osi3::LogicalDetectionData&
SensorData::_Internal::logical_detection_data(const SensorData* msg) {
  return *msg->logical_detection_data_;
}
void SensorData::clear_version() {
  if (version_ != nullptr) version_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SensorData::clear_timestamp() {
  if (timestamp_ != nullptr) timestamp_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SensorData::clear_host_vehicle_location() {
  if (host_vehicle_location_ != nullptr) host_vehicle_location_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SensorData::clear_host_vehicle_location_rmse() {
  if (host_vehicle_location_rmse_ != nullptr) host_vehicle_location_rmse_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SensorData::clear_sensor_id() {
  if (sensor_id_ != nullptr) sensor_id_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void SensorData::clear_mounting_position() {
  if (mounting_position_ != nullptr) mounting_position_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void SensorData::clear_mounting_position_rmse() {
  if (mounting_position_rmse_ != nullptr) mounting_position_rmse_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void SensorData::clear_sensor_view() {
  sensor_view_.Clear();
}
void SensorData::clear_last_measurement_time() {
  if (last_measurement_time_ != nullptr) last_measurement_time_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void SensorData::clear_stationary_object() {
  stationary_object_.Clear();
}
void SensorData::clear_moving_object() {
  moving_object_.Clear();
}
void SensorData::clear_traffic_sign() {
  traffic_sign_.Clear();
}
void SensorData::clear_traffic_light() {
  traffic_light_.Clear();
}
void SensorData::clear_road_marking() {
  road_marking_.Clear();
}
void SensorData::clear_lane_boundary() {
  lane_boundary_.Clear();
}
void SensorData::clear_lane() {
  lane_.Clear();
}
void SensorData::clear_occupant() {
  occupant_.Clear();
}
void SensorData::clear_feature_data() {
  if (feature_data_ != nullptr) feature_data_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
void SensorData::clear_logical_detection_data() {
  if (logical_detection_data_ != nullptr) logical_detection_data_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
SensorData::SensorData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sensor_view_(arena),
  stationary_object_(arena),
  moving_object_(arena),
  traffic_sign_(arena),
  traffic_light_(arena),
  road_marking_(arena),
  lane_boundary_(arena),
  lane_(arena),
  occupant_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.SensorData)
}
SensorData::SensorData(const SensorData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sensor_view_(from.sensor_view_),
      stationary_object_(from.stationary_object_),
      moving_object_(from.moving_object_),
      traffic_sign_(from.traffic_sign_),
      traffic_light_(from.traffic_light_),
      road_marking_(from.road_marking_),
      lane_boundary_(from.lane_boundary_),
      lane_(from.lane_),
      occupant_(from.occupant_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_version()) {
    version_ = new ::osi3::InterfaceVersion(*from.version_);
  } else {
    version_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::osi3::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from._internal_has_host_vehicle_location()) {
    host_vehicle_location_ = new ::osi3::BaseMoving(*from.host_vehicle_location_);
  } else {
    host_vehicle_location_ = nullptr;
  }
  if (from._internal_has_host_vehicle_location_rmse()) {
    host_vehicle_location_rmse_ = new ::osi3::BaseMoving(*from.host_vehicle_location_rmse_);
  } else {
    host_vehicle_location_rmse_ = nullptr;
  }
  if (from._internal_has_sensor_id()) {
    sensor_id_ = new ::osi3::Identifier(*from.sensor_id_);
  } else {
    sensor_id_ = nullptr;
  }
  if (from._internal_has_mounting_position()) {
    mounting_position_ = new ::osi3::MountingPosition(*from.mounting_position_);
  } else {
    mounting_position_ = nullptr;
  }
  if (from._internal_has_mounting_position_rmse()) {
    mounting_position_rmse_ = new ::osi3::MountingPosition(*from.mounting_position_rmse_);
  } else {
    mounting_position_rmse_ = nullptr;
  }
  if (from._internal_has_last_measurement_time()) {
    last_measurement_time_ = new ::osi3::Timestamp(*from.last_measurement_time_);
  } else {
    last_measurement_time_ = nullptr;
  }
  if (from._internal_has_stationary_object_header()) {
    stationary_object_header_ = new ::osi3::DetectedEntityHeader(*from.stationary_object_header_);
  } else {
    stationary_object_header_ = nullptr;
  }
  if (from._internal_has_moving_object_header()) {
    moving_object_header_ = new ::osi3::DetectedEntityHeader(*from.moving_object_header_);
  } else {
    moving_object_header_ = nullptr;
  }
  if (from._internal_has_traffic_sign_header()) {
    traffic_sign_header_ = new ::osi3::DetectedEntityHeader(*from.traffic_sign_header_);
  } else {
    traffic_sign_header_ = nullptr;
  }
  if (from._internal_has_traffic_light_header()) {
    traffic_light_header_ = new ::osi3::DetectedEntityHeader(*from.traffic_light_header_);
  } else {
    traffic_light_header_ = nullptr;
  }
  if (from._internal_has_road_marking_header()) {
    road_marking_header_ = new ::osi3::DetectedEntityHeader(*from.road_marking_header_);
  } else {
    road_marking_header_ = nullptr;
  }
  if (from._internal_has_lane_boundary_header()) {
    lane_boundary_header_ = new ::osi3::DetectedEntityHeader(*from.lane_boundary_header_);
  } else {
    lane_boundary_header_ = nullptr;
  }
  if (from._internal_has_lane_header()) {
    lane_header_ = new ::osi3::DetectedEntityHeader(*from.lane_header_);
  } else {
    lane_header_ = nullptr;
  }
  if (from._internal_has_occupant_header()) {
    occupant_header_ = new ::osi3::DetectedEntityHeader(*from.occupant_header_);
  } else {
    occupant_header_ = nullptr;
  }
  if (from._internal_has_feature_data()) {
    feature_data_ = new ::osi3::FeatureData(*from.feature_data_);
  } else {
    feature_data_ = nullptr;
  }
  if (from._internal_has_logical_detection_data()) {
    logical_detection_data_ = new ::osi3::LogicalDetectionData(*from.logical_detection_data_);
  } else {
    logical_detection_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.SensorData)
}

void SensorData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&logical_detection_data_) -
    reinterpret_cast<char*>(&version_)) + sizeof(logical_detection_data_));
}

SensorData::~SensorData() {
  // @@protoc_insertion_point(destructor:osi3.SensorData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SensorData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete version_;
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete host_vehicle_location_;
  if (this != internal_default_instance()) delete host_vehicle_location_rmse_;
  if (this != internal_default_instance()) delete sensor_id_;
  if (this != internal_default_instance()) delete mounting_position_;
  if (this != internal_default_instance()) delete mounting_position_rmse_;
  if (this != internal_default_instance()) delete last_measurement_time_;
  if (this != internal_default_instance()) delete stationary_object_header_;
  if (this != internal_default_instance()) delete moving_object_header_;
  if (this != internal_default_instance()) delete traffic_sign_header_;
  if (this != internal_default_instance()) delete traffic_light_header_;
  if (this != internal_default_instance()) delete road_marking_header_;
  if (this != internal_default_instance()) delete lane_boundary_header_;
  if (this != internal_default_instance()) delete lane_header_;
  if (this != internal_default_instance()) delete occupant_header_;
  if (this != internal_default_instance()) delete feature_data_;
  if (this != internal_default_instance()) delete logical_detection_data_;
}

void SensorData::ArenaDtor(void* object) {
  SensorData* _this = reinterpret_cast< SensorData* >(object);
  (void)_this;
}
void SensorData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.SensorData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_view_.Clear();
  stationary_object_.Clear();
  moving_object_.Clear();
  traffic_sign_.Clear();
  traffic_light_.Clear();
  road_marking_.Clear();
  lane_boundary_.Clear();
  lane_.Clear();
  occupant_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(version_ != nullptr);
      version_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(timestamp_ != nullptr);
      timestamp_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(host_vehicle_location_ != nullptr);
      host_vehicle_location_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(host_vehicle_location_rmse_ != nullptr);
      host_vehicle_location_rmse_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(sensor_id_ != nullptr);
      sensor_id_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(mounting_position_ != nullptr);
      mounting_position_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(mounting_position_rmse_ != nullptr);
      mounting_position_rmse_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(last_measurement_time_ != nullptr);
      last_measurement_time_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(stationary_object_header_ != nullptr);
      stationary_object_header_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(moving_object_header_ != nullptr);
      moving_object_header_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(traffic_sign_header_ != nullptr);
      traffic_sign_header_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(traffic_light_header_ != nullptr);
      traffic_light_header_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(road_marking_header_ != nullptr);
      road_marking_header_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(lane_boundary_header_ != nullptr);
      lane_boundary_header_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(lane_header_ != nullptr);
      lane_header_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(occupant_header_ != nullptr);
      occupant_header_->Clear();
    }
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(feature_data_ != nullptr);
      feature_data_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(logical_detection_data_ != nullptr);
      logical_detection_data_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.InterfaceVersion version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.BaseMoving host_vehicle_location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_vehicle_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.BaseMoving host_vehicle_location_rmse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_vehicle_location_rmse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Identifier sensor_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sensor_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MountingPosition mounting_position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_mounting_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MountingPosition mounting_position_rmse = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_mounting_position_rmse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.SensorView sensor_view = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sensor_view(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Timestamp last_measurement_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_measurement_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.DetectedEntityHeader stationary_object_header = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_stationary_object_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.DetectedStationaryObject stationary_object = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stationary_object(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.DetectedEntityHeader moving_object_header = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_moving_object_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.DetectedMovingObject moving_object = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_moving_object(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.DetectedEntityHeader traffic_sign_header = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_sign_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.DetectedTrafficSign traffic_sign = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_traffic_sign(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.DetectedEntityHeader traffic_light_header = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_light_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.DetectedTrafficLight traffic_light = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_traffic_light(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.DetectedEntityHeader road_marking_header = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_road_marking_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.DetectedRoadMarking road_marking = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_road_marking(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.DetectedEntityHeader lane_boundary_header = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_boundary_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.DetectedLaneBoundary lane_boundary = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lane_boundary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.DetectedEntityHeader lane_header = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.DetectedLane lane = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.DetectedEntityHeader occupant_header = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_occupant_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.DetectedOccupant occupant = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_occupant(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.FeatureData feature_data = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_feature_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.LogicalDetectionData logical_detection_data = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_logical_detection_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.SensorData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.InterfaceVersion version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::version(this), target, stream);
  }

  // optional .osi3.Timestamp timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timestamp(this), target, stream);
  }

  // optional .osi3.BaseMoving host_vehicle_location = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::host_vehicle_location(this), target, stream);
  }

  // optional .osi3.BaseMoving host_vehicle_location_rmse = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::host_vehicle_location_rmse(this), target, stream);
  }

  // optional .osi3.Identifier sensor_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sensor_id(this), target, stream);
  }

  // optional .osi3.MountingPosition mounting_position = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::mounting_position(this), target, stream);
  }

  // optional .osi3.MountingPosition mounting_position_rmse = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::mounting_position_rmse(this), target, stream);
  }

  // repeated .osi3.SensorView sensor_view = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sensor_view_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_sensor_view(i), target, stream);
  }

  // optional .osi3.Timestamp last_measurement_time = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::last_measurement_time(this), target, stream);
  }

  // optional .osi3.DetectedEntityHeader stationary_object_header = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::stationary_object_header(this), target, stream);
  }

  // repeated .osi3.DetectedStationaryObject stationary_object = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stationary_object_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_stationary_object(i), target, stream);
  }

  // optional .osi3.DetectedEntityHeader moving_object_header = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::moving_object_header(this), target, stream);
  }

  // repeated .osi3.DetectedMovingObject moving_object = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_moving_object_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_moving_object(i), target, stream);
  }

  // optional .osi3.DetectedEntityHeader traffic_sign_header = 14;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::traffic_sign_header(this), target, stream);
  }

  // repeated .osi3.DetectedTrafficSign traffic_sign = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_traffic_sign_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_traffic_sign(i), target, stream);
  }

  // optional .osi3.DetectedEntityHeader traffic_light_header = 16;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::traffic_light_header(this), target, stream);
  }

  // repeated .osi3.DetectedTrafficLight traffic_light = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_traffic_light_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_traffic_light(i), target, stream);
  }

  // optional .osi3.DetectedEntityHeader road_marking_header = 18;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::road_marking_header(this), target, stream);
  }

  // repeated .osi3.DetectedRoadMarking road_marking = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_road_marking_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_road_marking(i), target, stream);
  }

  // optional .osi3.DetectedEntityHeader lane_boundary_header = 20;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::lane_boundary_header(this), target, stream);
  }

  // repeated .osi3.DetectedLaneBoundary lane_boundary = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lane_boundary_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_lane_boundary(i), target, stream);
  }

  // optional .osi3.DetectedEntityHeader lane_header = 22;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::lane_header(this), target, stream);
  }

  // repeated .osi3.DetectedLane lane = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lane_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, this->_internal_lane(i), target, stream);
  }

  // optional .osi3.DetectedEntityHeader occupant_header = 24;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::occupant_header(this), target, stream);
  }

  // repeated .osi3.DetectedOccupant occupant = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_occupant_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, this->_internal_occupant(i), target, stream);
  }

  // optional .osi3.FeatureData feature_data = 26;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::feature_data(this), target, stream);
  }

  // optional .osi3.LogicalDetectionData logical_detection_data = 27;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::logical_detection_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.SensorData)
  return target;
}

size_t SensorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.SensorData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.SensorView sensor_view = 8;
  total_size += 1UL * this->_internal_sensor_view_size();
  for (const auto& msg : this->sensor_view_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.DetectedStationaryObject stationary_object = 11;
  total_size += 1UL * this->_internal_stationary_object_size();
  for (const auto& msg : this->stationary_object_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.DetectedMovingObject moving_object = 13;
  total_size += 1UL * this->_internal_moving_object_size();
  for (const auto& msg : this->moving_object_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.DetectedTrafficSign traffic_sign = 15;
  total_size += 1UL * this->_internal_traffic_sign_size();
  for (const auto& msg : this->traffic_sign_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.DetectedTrafficLight traffic_light = 17;
  total_size += 2UL * this->_internal_traffic_light_size();
  for (const auto& msg : this->traffic_light_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.DetectedRoadMarking road_marking = 19;
  total_size += 2UL * this->_internal_road_marking_size();
  for (const auto& msg : this->road_marking_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.DetectedLaneBoundary lane_boundary = 21;
  total_size += 2UL * this->_internal_lane_boundary_size();
  for (const auto& msg : this->lane_boundary_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.DetectedLane lane = 23;
  total_size += 2UL * this->_internal_lane_size();
  for (const auto& msg : this->lane_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.DetectedOccupant occupant = 25;
  total_size += 2UL * this->_internal_occupant_size();
  for (const auto& msg : this->occupant_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .osi3.InterfaceVersion version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *version_);
    }

    // optional .osi3.Timestamp timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *timestamp_);
    }

    // optional .osi3.BaseMoving host_vehicle_location = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *host_vehicle_location_);
    }

    // optional .osi3.BaseMoving host_vehicle_location_rmse = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *host_vehicle_location_rmse_);
    }

    // optional .osi3.Identifier sensor_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sensor_id_);
    }

    // optional .osi3.MountingPosition mounting_position = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mounting_position_);
    }

    // optional .osi3.MountingPosition mounting_position_rmse = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mounting_position_rmse_);
    }

    // optional .osi3.Timestamp last_measurement_time = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *last_measurement_time_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .osi3.DetectedEntityHeader stationary_object_header = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stationary_object_header_);
    }

    // optional .osi3.DetectedEntityHeader moving_object_header = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *moving_object_header_);
    }

    // optional .osi3.DetectedEntityHeader traffic_sign_header = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *traffic_sign_header_);
    }

    // optional .osi3.DetectedEntityHeader traffic_light_header = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *traffic_light_header_);
    }

    // optional .osi3.DetectedEntityHeader road_marking_header = 18;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *road_marking_header_);
    }

    // optional .osi3.DetectedEntityHeader lane_boundary_header = 20;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lane_boundary_header_);
    }

    // optional .osi3.DetectedEntityHeader lane_header = 22;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lane_header_);
    }

    // optional .osi3.DetectedEntityHeader occupant_header = 24;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *occupant_header_);
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional .osi3.FeatureData feature_data = 26;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feature_data_);
    }

    // optional .osi3.LogicalDetectionData logical_detection_data = 27;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *logical_detection_data_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SensorData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorData::GetClassData() const { return &_class_data_; }

void SensorData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SensorData *>(to)->MergeFrom(
      static_cast<const SensorData &>(from));
}


void SensorData::MergeFrom(const SensorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.SensorData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_view_.MergeFrom(from.sensor_view_);
  stationary_object_.MergeFrom(from.stationary_object_);
  moving_object_.MergeFrom(from.moving_object_);
  traffic_sign_.MergeFrom(from.traffic_sign_);
  traffic_light_.MergeFrom(from.traffic_light_);
  road_marking_.MergeFrom(from.road_marking_);
  lane_boundary_.MergeFrom(from.lane_boundary_);
  lane_.MergeFrom(from.lane_);
  occupant_.MergeFrom(from.occupant_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_version()->::osi3::InterfaceVersion::MergeFrom(from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_timestamp()->::osi3::Timestamp::MergeFrom(from._internal_timestamp());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_host_vehicle_location()->::osi3::BaseMoving::MergeFrom(from._internal_host_vehicle_location());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_host_vehicle_location_rmse()->::osi3::BaseMoving::MergeFrom(from._internal_host_vehicle_location_rmse());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_sensor_id()->::osi3::Identifier::MergeFrom(from._internal_sensor_id());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_mounting_position()->::osi3::MountingPosition::MergeFrom(from._internal_mounting_position());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_mounting_position_rmse()->::osi3::MountingPosition::MergeFrom(from._internal_mounting_position_rmse());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_last_measurement_time()->::osi3::Timestamp::MergeFrom(from._internal_last_measurement_time());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_stationary_object_header()->::osi3::DetectedEntityHeader::MergeFrom(from._internal_stationary_object_header());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_moving_object_header()->::osi3::DetectedEntityHeader::MergeFrom(from._internal_moving_object_header());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_traffic_sign_header()->::osi3::DetectedEntityHeader::MergeFrom(from._internal_traffic_sign_header());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_traffic_light_header()->::osi3::DetectedEntityHeader::MergeFrom(from._internal_traffic_light_header());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_road_marking_header()->::osi3::DetectedEntityHeader::MergeFrom(from._internal_road_marking_header());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_lane_boundary_header()->::osi3::DetectedEntityHeader::MergeFrom(from._internal_lane_boundary_header());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_lane_header()->::osi3::DetectedEntityHeader::MergeFrom(from._internal_lane_header());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_occupant_header()->::osi3::DetectedEntityHeader::MergeFrom(from._internal_occupant_header());
    }
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_feature_data()->::osi3::FeatureData::MergeFrom(from._internal_feature_data());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_logical_detection_data()->::osi3::LogicalDetectionData::MergeFrom(from._internal_logical_detection_data());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorData::CopyFrom(const SensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorData::IsInitialized() const {
  return true;
}

void SensorData::InternalSwap(SensorData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sensor_view_.InternalSwap(&other->sensor_view_);
  stationary_object_.InternalSwap(&other->stationary_object_);
  moving_object_.InternalSwap(&other->moving_object_);
  traffic_sign_.InternalSwap(&other->traffic_sign_);
  traffic_light_.InternalSwap(&other->traffic_light_);
  road_marking_.InternalSwap(&other->road_marking_);
  lane_boundary_.InternalSwap(&other->lane_boundary_);
  lane_.InternalSwap(&other->lane_);
  occupant_.InternalSwap(&other->occupant_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorData, logical_detection_data_)
      + sizeof(SensorData::logical_detection_data_)
      - PROTOBUF_FIELD_OFFSET(SensorData, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fsensordata_2eproto_getter, &descriptor_table_osi_5fsensordata_2eproto_once,
      file_level_metadata_osi_5fsensordata_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::DetectedEntityHeader* Arena::CreateMaybeMessage< ::osi3::DetectedEntityHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::DetectedEntityHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::SensorData* Arena::CreateMaybeMessage< ::osi3::SensorData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::SensorData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
