// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_lane.proto

#include "osi_lane.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace osi3 {
constexpr Lane_Classification_RoadCondition::Lane_Classification_RoadCondition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : surface_temperature_(0)
  , surface_water_film_(0)
  , surface_freezing_point_(0)
  , surface_ice_(0)
  , surface_roughness_(0)
  , surface_texture_(0){}
struct Lane_Classification_RoadConditionDefaultTypeInternal {
  constexpr Lane_Classification_RoadConditionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Lane_Classification_RoadConditionDefaultTypeInternal() {}
  union {
    Lane_Classification_RoadCondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Lane_Classification_RoadConditionDefaultTypeInternal _Lane_Classification_RoadCondition_default_instance_;
constexpr Lane_Classification_LanePairing::Lane_Classification_LanePairing(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : antecessor_lane_id_(nullptr)
  , successor_lane_id_(nullptr){}
struct Lane_Classification_LanePairingDefaultTypeInternal {
  constexpr Lane_Classification_LanePairingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Lane_Classification_LanePairingDefaultTypeInternal() {}
  union {
    Lane_Classification_LanePairing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Lane_Classification_LanePairingDefaultTypeInternal _Lane_Classification_LanePairing_default_instance_;
constexpr Lane_Classification::Lane_Classification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : centerline_()
  , left_adjacent_lane_id_()
  , right_adjacent_lane_id_()
  , lane_pairing_()
  , right_lane_boundary_id_()
  , left_lane_boundary_id_()
  , free_lane_boundary_id_()
  , road_condition_(nullptr)
  , type_(0)

  , is_host_vehicle_lane_(false)
  , centerline_is_driving_direction_(false)
  , subtype_(0)
{}
struct Lane_ClassificationDefaultTypeInternal {
  constexpr Lane_ClassificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Lane_ClassificationDefaultTypeInternal() {}
  union {
    Lane_Classification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Lane_ClassificationDefaultTypeInternal _Lane_Classification_default_instance_;
constexpr Lane::Lane(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_reference_()
  , id_(nullptr)
  , classification_(nullptr){}
struct LaneDefaultTypeInternal {
  constexpr LaneDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LaneDefaultTypeInternal() {}
  union {
    Lane _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LaneDefaultTypeInternal _Lane_default_instance_;
constexpr LaneBoundary_BoundaryPoint::LaneBoundary_BoundaryPoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , width_(0)
  , height_(0)
  , dash_(0)
{}
struct LaneBoundary_BoundaryPointDefaultTypeInternal {
  constexpr LaneBoundary_BoundaryPointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LaneBoundary_BoundaryPointDefaultTypeInternal() {}
  union {
    LaneBoundary_BoundaryPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LaneBoundary_BoundaryPointDefaultTypeInternal _LaneBoundary_BoundaryPoint_default_instance_;
constexpr LaneBoundary_Classification::LaneBoundary_Classification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : limiting_structure_id_()
  , type_(0)

  , color_(0)
{}
struct LaneBoundary_ClassificationDefaultTypeInternal {
  constexpr LaneBoundary_ClassificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LaneBoundary_ClassificationDefaultTypeInternal() {}
  union {
    LaneBoundary_Classification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LaneBoundary_ClassificationDefaultTypeInternal _LaneBoundary_Classification_default_instance_;
constexpr LaneBoundary::LaneBoundary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : boundary_line_()
  , source_reference_()
  , id_(nullptr)
  , classification_(nullptr)
  , color_description_(nullptr){}
struct LaneBoundaryDefaultTypeInternal {
  constexpr LaneBoundaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LaneBoundaryDefaultTypeInternal() {}
  union {
    LaneBoundary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LaneBoundaryDefaultTypeInternal _LaneBoundary_default_instance_;
}  // namespace osi3
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5flane_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_osi_5flane_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5flane_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5flane_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification_RoadCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification_RoadCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification_RoadCondition, surface_temperature_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification_RoadCondition, surface_water_film_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification_RoadCondition, surface_freezing_point_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification_RoadCondition, surface_ice_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification_RoadCondition, surface_roughness_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification_RoadCondition, surface_texture_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification_LanePairing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification_LanePairing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification_LanePairing, antecessor_lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification_LanePairing, successor_lane_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification, type_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification, is_host_vehicle_lane_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification, centerline_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification, centerline_is_driving_direction_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification, left_adjacent_lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification, right_adjacent_lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification, lane_pairing_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification, right_lane_boundary_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification, left_lane_boundary_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification, free_lane_boundary_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification, road_condition_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification, subtype_),
  1,
  2,
  ~0u,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::osi3::Lane, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::Lane, id_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane, classification_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane, source_reference_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary_BoundaryPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary_BoundaryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary_BoundaryPoint, position_),
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary_BoundaryPoint, width_),
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary_BoundaryPoint, height_),
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary_BoundaryPoint, dash_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary_Classification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary_Classification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary_Classification, type_),
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary_Classification, color_),
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary_Classification, limiting_structure_id_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary, id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary, boundary_line_),
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary, classification_),
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary, source_reference_),
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary, color_description_),
  0,
  ~0u,
  1,
  ~0u,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::osi3::Lane_Classification_RoadCondition)},
  { 18, 26, -1, sizeof(::osi3::Lane_Classification_LanePairing)},
  { 28, 46, -1, sizeof(::osi3::Lane_Classification)},
  { 58, 67, -1, sizeof(::osi3::Lane)},
  { 70, 80, -1, sizeof(::osi3::LaneBoundary_BoundaryPoint)},
  { 84, 93, -1, sizeof(::osi3::LaneBoundary_Classification)},
  { 96, 107, -1, sizeof(::osi3::LaneBoundary)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_Lane_Classification_RoadCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_Lane_Classification_LanePairing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_Lane_Classification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_Lane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_LaneBoundary_BoundaryPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_LaneBoundary_Classification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_LaneBoundary_default_instance_),
};

const char descriptor_table_protodef_osi_5flane_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016osi_lane.proto\022\004osi3\032\020osi_common.proto"
  "\"\252\013\n\004Lane\022\034\n\002id\030\001 \001(\0132\020.osi3.Identifier\022"
  "1\n\016classification\030\002 \001(\0132\031.osi3.Lane.Clas"
  "sification\0221\n\020source_reference\030\003 \003(\0132\027.o"
  "si3.ExternalReference\032\235\n\n\016Classification"
  "\022,\n\004type\030\001 \001(\0162\036.osi3.Lane.Classificatio"
  "n.Type\022\034\n\024is_host_vehicle_lane\030\002 \001(\010\022\"\n\n"
  "centerline\030\003 \003(\0132\016.osi3.Vector3d\022\'\n\037cent"
  "erline_is_driving_direction\030\004 \001(\010\022/\n\025lef"
  "t_adjacent_lane_id\030\005 \003(\0132\020.osi3.Identifi"
  "er\0220\n\026right_adjacent_lane_id\030\006 \003(\0132\020.osi"
  "3.Identifier\022;\n\014lane_pairing\030\007 \003(\0132%.osi"
  "3.Lane.Classification.LanePairing\0220\n\026rig"
  "ht_lane_boundary_id\030\010 \003(\0132\020.osi3.Identif"
  "ier\022/\n\025left_lane_boundary_id\030\t \003(\0132\020.osi"
  "3.Identifier\022/\n\025free_lane_boundary_id\030\n "
  "\003(\0132\020.osi3.Identifier\022\?\n\016road_condition\030"
  "\013 \001(\0132\'.osi3.Lane.Classification.RoadCon"
  "dition\0222\n\007subtype\030\014 \001(\0162!.osi3.Lane.Clas"
  "sification.Subtype\032\261\001\n\rRoadCondition\022\033\n\023"
  "surface_temperature\030\001 \001(\001\022\032\n\022surface_wat"
  "er_film\030\002 \001(\001\022\036\n\026surface_freezing_point\030"
  "\003 \001(\001\022\023\n\013surface_ice\030\004 \001(\001\022\031\n\021surface_ro"
  "ughness\030\005 \001(\001\022\027\n\017surface_texture\030\006 \001(\001\032h"
  "\n\013LanePairing\022,\n\022antecessor_lane_id\030\001 \001("
  "\0132\020.osi3.Identifier\022+\n\021successor_lane_id"
  "\030\002 \001(\0132\020.osi3.Identifier\"f\n\004Type\022\020\n\014TYPE"
  "_UNKNOWN\020\000\022\016\n\nTYPE_OTHER\020\001\022\020\n\014TYPE_DRIVI"
  "NG\020\002\022\023\n\017TYPE_NONDRIVING\020\003\022\025\n\021TYPE_INTERS"
  "ECTION\020\004\"\302\002\n\007Subtype\022\023\n\017SUBTYPE_UNKNOWN\020"
  "\000\022\021\n\rSUBTYPE_OTHER\020\001\022\022\n\016SUBTYPE_NORMAL\020\002"
  "\022\022\n\016SUBTYPE_BIKING\020\003\022\024\n\020SUBTYPE_SIDEWALK"
  "\020\004\022\023\n\017SUBTYPE_PARKING\020\005\022\020\n\014SUBTYPE_STOP\020"
  "\006\022\026\n\022SUBTYPE_RESTRICTED\020\007\022\022\n\016SUBTYPE_BOR"
  "DER\020\010\022\024\n\020SUBTYPE_SHOULDER\020\t\022\020\n\014SUBTYPE_E"
  "XIT\020\n\022\021\n\rSUBTYPE_ENTRY\020\013\022\022\n\016SUBTYPE_ONRA"
  "MP\020\014\022\023\n\017SUBTYPE_OFFRAMP\020\r\022\032\n\026SUBTYPE_CON"
  "NECTINGRAMP\020\016\"\226\t\n\014LaneBoundary\022\034\n\002id\030\001 \001"
  "(\0132\020.osi3.Identifier\0227\n\rboundary_line\030\002 "
  "\003(\0132 .osi3.LaneBoundary.BoundaryPoint\0229\n"
  "\016classification\030\003 \001(\0132!.osi3.LaneBoundar"
  "y.Classification\0221\n\020source_reference\030\004 \003"
  "(\0132\027.osi3.ExternalReference\0221\n\021color_des"
  "cription\030\005 \001(\0132\026.osi3.ColorDescription\032\340"
  "\001\n\rBoundaryPoint\022 \n\010position\030\001 \001(\0132\016.osi"
  "3.Vector3d\022\r\n\005width\030\002 \001(\001\022\016\n\006height\030\003 \001("
  "\001\0223\n\004dash\030\004 \001(\0162%.osi3.LaneBoundary.Boun"
  "daryPoint.Dash\"Y\n\004Dash\022\020\n\014DASH_UNKNOWN\020\000"
  "\022\016\n\nDASH_OTHER\020\001\022\016\n\nDASH_START\020\002\022\021\n\rDASH"
  "_CONTINUE\020\003\022\014\n\010DASH_END\020\004\032\252\005\n\016Classifica"
  "tion\0224\n\004type\030\001 \001(\0162&.osi3.LaneBoundary.C"
  "lassification.Type\0226\n\005color\030\002 \001(\0162\'.osi3"
  ".LaneBoundary.Classification.Color\022/\n\025li"
  "miting_structure_id\030\003 \003(\0132\020.osi3.Identif"
  "ier\"\303\002\n\004Type\022\020\n\014TYPE_UNKNOWN\020\000\022\016\n\nTYPE_O"
  "THER\020\001\022\020\n\014TYPE_NO_LINE\020\002\022\023\n\017TYPE_SOLID_L"
  "INE\020\003\022\024\n\020TYPE_DASHED_LINE\020\004\022\023\n\017TYPE_BOTT"
  "S_DOTS\020\005\022\022\n\016TYPE_ROAD_EDGE\020\006\022\022\n\016TYPE_SNO"
  "W_EDGE\020\007\022\023\n\017TYPE_GRASS_EDGE\020\010\022\024\n\020TYPE_GR"
  "AVEL_EDGE\020\t\022\022\n\016TYPE_SOIL_EDGE\020\n\022\023\n\017TYPE_"
  "GUARD_RAIL\020\013\022\r\n\tTYPE_CURB\020\014\022\022\n\016TYPE_STRU"
  "CTURE\020\r\022\020\n\014TYPE_BARRIER\020\016\022\026\n\022TYPE_SOUND_"
  "BARRIER\020\017\"\262\001\n\005Color\022\021\n\rCOLOR_UNKNOWN\020\000\022\017"
  "\n\013COLOR_OTHER\020\001\022\016\n\nCOLOR_NONE\020\002\022\017\n\013COLOR"
  "_WHITE\020\003\022\020\n\014COLOR_YELLOW\020\004\022\r\n\tCOLOR_RED\020"
  "\005\022\016\n\nCOLOR_BLUE\020\006\022\017\n\013COLOR_GREEN\020\007\022\020\n\014CO"
  "LOR_VIOLET\020\010\022\020\n\014COLOR_ORANGE\020\tB\002H\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5flane_2eproto_deps[1] = {
  &::descriptor_table_osi_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5flane_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5flane_2eproto = {
  false, false, 2674, descriptor_table_protodef_osi_5flane_2eproto, "osi_lane.proto", 
  &descriptor_table_osi_5flane_2eproto_once, descriptor_table_osi_5flane_2eproto_deps, 1, 7,
  schemas, file_default_instances, TableStruct_osi_5flane_2eproto::offsets,
  file_level_metadata_osi_5flane_2eproto, file_level_enum_descriptors_osi_5flane_2eproto, file_level_service_descriptors_osi_5flane_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_osi_5flane_2eproto_getter() {
  return &descriptor_table_osi_5flane_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_osi_5flane_2eproto(&descriptor_table_osi_5flane_2eproto);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Lane_Classification_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5flane_2eproto);
  return file_level_enum_descriptors_osi_5flane_2eproto[0];
}
bool Lane_Classification_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Lane_Classification_Type Lane_Classification::TYPE_UNKNOWN;
constexpr Lane_Classification_Type Lane_Classification::TYPE_OTHER;
constexpr Lane_Classification_Type Lane_Classification::TYPE_DRIVING;
constexpr Lane_Classification_Type Lane_Classification::TYPE_NONDRIVING;
constexpr Lane_Classification_Type Lane_Classification::TYPE_INTERSECTION;
constexpr Lane_Classification_Type Lane_Classification::Type_MIN;
constexpr Lane_Classification_Type Lane_Classification::Type_MAX;
constexpr int Lane_Classification::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Lane_Classification_Subtype_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5flane_2eproto);
  return file_level_enum_descriptors_osi_5flane_2eproto[1];
}
bool Lane_Classification_Subtype_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_UNKNOWN;
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_OTHER;
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_NORMAL;
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_BIKING;
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_SIDEWALK;
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_PARKING;
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_STOP;
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_RESTRICTED;
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_BORDER;
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_SHOULDER;
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_EXIT;
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_ENTRY;
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_ONRAMP;
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_OFFRAMP;
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_CONNECTINGRAMP;
constexpr Lane_Classification_Subtype Lane_Classification::Subtype_MIN;
constexpr Lane_Classification_Subtype Lane_Classification::Subtype_MAX;
constexpr int Lane_Classification::Subtype_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneBoundary_BoundaryPoint_Dash_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5flane_2eproto);
  return file_level_enum_descriptors_osi_5flane_2eproto[2];
}
bool LaneBoundary_BoundaryPoint_Dash_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LaneBoundary_BoundaryPoint_Dash LaneBoundary_BoundaryPoint::DASH_UNKNOWN;
constexpr LaneBoundary_BoundaryPoint_Dash LaneBoundary_BoundaryPoint::DASH_OTHER;
constexpr LaneBoundary_BoundaryPoint_Dash LaneBoundary_BoundaryPoint::DASH_START;
constexpr LaneBoundary_BoundaryPoint_Dash LaneBoundary_BoundaryPoint::DASH_CONTINUE;
constexpr LaneBoundary_BoundaryPoint_Dash LaneBoundary_BoundaryPoint::DASH_END;
constexpr LaneBoundary_BoundaryPoint_Dash LaneBoundary_BoundaryPoint::Dash_MIN;
constexpr LaneBoundary_BoundaryPoint_Dash LaneBoundary_BoundaryPoint::Dash_MAX;
constexpr int LaneBoundary_BoundaryPoint::Dash_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneBoundary_Classification_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5flane_2eproto);
  return file_level_enum_descriptors_osi_5flane_2eproto[3];
}
bool LaneBoundary_Classification_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_UNKNOWN;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_OTHER;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_NO_LINE;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_SOLID_LINE;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_DASHED_LINE;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_BOTTS_DOTS;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_ROAD_EDGE;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_SNOW_EDGE;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_GRASS_EDGE;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_GRAVEL_EDGE;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_SOIL_EDGE;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_GUARD_RAIL;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_CURB;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_STRUCTURE;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_BARRIER;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_SOUND_BARRIER;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::Type_MIN;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::Type_MAX;
constexpr int LaneBoundary_Classification::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneBoundary_Classification_Color_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5flane_2eproto);
  return file_level_enum_descriptors_osi_5flane_2eproto[4];
}
bool LaneBoundary_Classification_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LaneBoundary_Classification_Color LaneBoundary_Classification::COLOR_UNKNOWN;
constexpr LaneBoundary_Classification_Color LaneBoundary_Classification::COLOR_OTHER;
constexpr LaneBoundary_Classification_Color LaneBoundary_Classification::COLOR_NONE;
constexpr LaneBoundary_Classification_Color LaneBoundary_Classification::COLOR_WHITE;
constexpr LaneBoundary_Classification_Color LaneBoundary_Classification::COLOR_YELLOW;
constexpr LaneBoundary_Classification_Color LaneBoundary_Classification::COLOR_RED;
constexpr LaneBoundary_Classification_Color LaneBoundary_Classification::COLOR_BLUE;
constexpr LaneBoundary_Classification_Color LaneBoundary_Classification::COLOR_GREEN;
constexpr LaneBoundary_Classification_Color LaneBoundary_Classification::COLOR_VIOLET;
constexpr LaneBoundary_Classification_Color LaneBoundary_Classification::COLOR_ORANGE;
constexpr LaneBoundary_Classification_Color LaneBoundary_Classification::Color_MIN;
constexpr LaneBoundary_Classification_Color LaneBoundary_Classification::Color_MAX;
constexpr int LaneBoundary_Classification::Color_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Lane_Classification_RoadCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<Lane_Classification_RoadCondition>()._has_bits_);
  static void set_has_surface_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_surface_water_film(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_surface_freezing_point(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_surface_ice(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_surface_roughness(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_surface_texture(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Lane_Classification_RoadCondition::Lane_Classification_RoadCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.Lane.Classification.RoadCondition)
}
Lane_Classification_RoadCondition::Lane_Classification_RoadCondition(const Lane_Classification_RoadCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&surface_temperature_, &from.surface_temperature_,
    static_cast<size_t>(reinterpret_cast<char*>(&surface_texture_) -
    reinterpret_cast<char*>(&surface_temperature_)) + sizeof(surface_texture_));
  // @@protoc_insertion_point(copy_constructor:osi3.Lane.Classification.RoadCondition)
}

void Lane_Classification_RoadCondition::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&surface_temperature_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&surface_texture_) -
    reinterpret_cast<char*>(&surface_temperature_)) + sizeof(surface_texture_));
}

Lane_Classification_RoadCondition::~Lane_Classification_RoadCondition() {
  // @@protoc_insertion_point(destructor:osi3.Lane.Classification.RoadCondition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Lane_Classification_RoadCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Lane_Classification_RoadCondition::ArenaDtor(void* object) {
  Lane_Classification_RoadCondition* _this = reinterpret_cast< Lane_Classification_RoadCondition* >(object);
  (void)_this;
}
void Lane_Classification_RoadCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Lane_Classification_RoadCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Lane_Classification_RoadCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.Lane.Classification.RoadCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&surface_temperature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&surface_texture_) -
        reinterpret_cast<char*>(&surface_temperature_)) + sizeof(surface_texture_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lane_Classification_RoadCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double surface_temperature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_surface_temperature(&has_bits);
          surface_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double surface_water_film = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_surface_water_film(&has_bits);
          surface_water_film_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double surface_freezing_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_surface_freezing_point(&has_bits);
          surface_freezing_point_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double surface_ice = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_surface_ice(&has_bits);
          surface_ice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double surface_roughness = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_surface_roughness(&has_bits);
          surface_roughness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double surface_texture = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_surface_texture(&has_bits);
          surface_texture_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Lane_Classification_RoadCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.Lane.Classification.RoadCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double surface_temperature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_surface_temperature(), target);
  }

  // optional double surface_water_film = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_surface_water_film(), target);
  }

  // optional double surface_freezing_point = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_surface_freezing_point(), target);
  }

  // optional double surface_ice = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_surface_ice(), target);
  }

  // optional double surface_roughness = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_surface_roughness(), target);
  }

  // optional double surface_texture = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_surface_texture(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.Lane.Classification.RoadCondition)
  return target;
}

size_t Lane_Classification_RoadCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.Lane.Classification.RoadCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional double surface_temperature = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double surface_water_film = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double surface_freezing_point = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double surface_ice = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double surface_roughness = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double surface_texture = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Lane_Classification_RoadCondition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Lane_Classification_RoadCondition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Lane_Classification_RoadCondition::GetClassData() const { return &_class_data_; }

void Lane_Classification_RoadCondition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Lane_Classification_RoadCondition *>(to)->MergeFrom(
      static_cast<const Lane_Classification_RoadCondition &>(from));
}


void Lane_Classification_RoadCondition::MergeFrom(const Lane_Classification_RoadCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.Lane.Classification.RoadCondition)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      surface_temperature_ = from.surface_temperature_;
    }
    if (cached_has_bits & 0x00000002u) {
      surface_water_film_ = from.surface_water_film_;
    }
    if (cached_has_bits & 0x00000004u) {
      surface_freezing_point_ = from.surface_freezing_point_;
    }
    if (cached_has_bits & 0x00000008u) {
      surface_ice_ = from.surface_ice_;
    }
    if (cached_has_bits & 0x00000010u) {
      surface_roughness_ = from.surface_roughness_;
    }
    if (cached_has_bits & 0x00000020u) {
      surface_texture_ = from.surface_texture_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Lane_Classification_RoadCondition::CopyFrom(const Lane_Classification_RoadCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.Lane.Classification.RoadCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane_Classification_RoadCondition::IsInitialized() const {
  return true;
}

void Lane_Classification_RoadCondition::InternalSwap(Lane_Classification_RoadCondition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Lane_Classification_RoadCondition, surface_texture_)
      + sizeof(Lane_Classification_RoadCondition::surface_texture_)
      - PROTOBUF_FIELD_OFFSET(Lane_Classification_RoadCondition, surface_temperature_)>(
          reinterpret_cast<char*>(&surface_temperature_),
          reinterpret_cast<char*>(&other->surface_temperature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Lane_Classification_RoadCondition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5flane_2eproto_getter, &descriptor_table_osi_5flane_2eproto_once,
      file_level_metadata_osi_5flane_2eproto[0]);
}

// ===================================================================

class Lane_Classification_LanePairing::_Internal {
 public:
  using HasBits = decltype(std::declval<Lane_Classification_LanePairing>()._has_bits_);
  static const ::osi3::Identifier& antecessor_lane_id(const Lane_Classification_LanePairing* msg);
  static void set_has_antecessor_lane_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::Identifier& successor_lane_id(const Lane_Classification_LanePairing* msg);
  static void set_has_successor_lane_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::osi3::Identifier&
Lane_Classification_LanePairing::_Internal::antecessor_lane_id(const Lane_Classification_LanePairing* msg) {
  return *msg->antecessor_lane_id_;
}
const ::osi3::Identifier&
Lane_Classification_LanePairing::_Internal::successor_lane_id(const Lane_Classification_LanePairing* msg) {
  return *msg->successor_lane_id_;
}
void Lane_Classification_LanePairing::clear_antecessor_lane_id() {
  if (antecessor_lane_id_ != nullptr) antecessor_lane_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Lane_Classification_LanePairing::clear_successor_lane_id() {
  if (successor_lane_id_ != nullptr) successor_lane_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Lane_Classification_LanePairing::Lane_Classification_LanePairing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.Lane.Classification.LanePairing)
}
Lane_Classification_LanePairing::Lane_Classification_LanePairing(const Lane_Classification_LanePairing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_antecessor_lane_id()) {
    antecessor_lane_id_ = new ::osi3::Identifier(*from.antecessor_lane_id_);
  } else {
    antecessor_lane_id_ = nullptr;
  }
  if (from._internal_has_successor_lane_id()) {
    successor_lane_id_ = new ::osi3::Identifier(*from.successor_lane_id_);
  } else {
    successor_lane_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.Lane.Classification.LanePairing)
}

void Lane_Classification_LanePairing::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&antecessor_lane_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&successor_lane_id_) -
    reinterpret_cast<char*>(&antecessor_lane_id_)) + sizeof(successor_lane_id_));
}

Lane_Classification_LanePairing::~Lane_Classification_LanePairing() {
  // @@protoc_insertion_point(destructor:osi3.Lane.Classification.LanePairing)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Lane_Classification_LanePairing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete antecessor_lane_id_;
  if (this != internal_default_instance()) delete successor_lane_id_;
}

void Lane_Classification_LanePairing::ArenaDtor(void* object) {
  Lane_Classification_LanePairing* _this = reinterpret_cast< Lane_Classification_LanePairing* >(object);
  (void)_this;
}
void Lane_Classification_LanePairing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Lane_Classification_LanePairing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Lane_Classification_LanePairing::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.Lane.Classification.LanePairing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(antecessor_lane_id_ != nullptr);
      antecessor_lane_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(successor_lane_id_ != nullptr);
      successor_lane_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lane_Classification_LanePairing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Identifier antecessor_lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_antecessor_lane_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Identifier successor_lane_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_successor_lane_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Lane_Classification_LanePairing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.Lane.Classification.LanePairing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.Identifier antecessor_lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::antecessor_lane_id(this), target, stream);
  }

  // optional .osi3.Identifier successor_lane_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::successor_lane_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.Lane.Classification.LanePairing)
  return target;
}

size_t Lane_Classification_LanePairing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.Lane.Classification.LanePairing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .osi3.Identifier antecessor_lane_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *antecessor_lane_id_);
    }

    // optional .osi3.Identifier successor_lane_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *successor_lane_id_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Lane_Classification_LanePairing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Lane_Classification_LanePairing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Lane_Classification_LanePairing::GetClassData() const { return &_class_data_; }

void Lane_Classification_LanePairing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Lane_Classification_LanePairing *>(to)->MergeFrom(
      static_cast<const Lane_Classification_LanePairing &>(from));
}


void Lane_Classification_LanePairing::MergeFrom(const Lane_Classification_LanePairing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.Lane.Classification.LanePairing)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_antecessor_lane_id()->::osi3::Identifier::MergeFrom(from._internal_antecessor_lane_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_successor_lane_id()->::osi3::Identifier::MergeFrom(from._internal_successor_lane_id());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Lane_Classification_LanePairing::CopyFrom(const Lane_Classification_LanePairing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.Lane.Classification.LanePairing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane_Classification_LanePairing::IsInitialized() const {
  return true;
}

void Lane_Classification_LanePairing::InternalSwap(Lane_Classification_LanePairing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Lane_Classification_LanePairing, successor_lane_id_)
      + sizeof(Lane_Classification_LanePairing::successor_lane_id_)
      - PROTOBUF_FIELD_OFFSET(Lane_Classification_LanePairing, antecessor_lane_id_)>(
          reinterpret_cast<char*>(&antecessor_lane_id_),
          reinterpret_cast<char*>(&other->antecessor_lane_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Lane_Classification_LanePairing::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5flane_2eproto_getter, &descriptor_table_osi_5flane_2eproto_once,
      file_level_metadata_osi_5flane_2eproto[1]);
}

// ===================================================================

class Lane_Classification::_Internal {
 public:
  using HasBits = decltype(std::declval<Lane_Classification>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_host_vehicle_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_centerline_is_driving_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::osi3::Lane_Classification_RoadCondition& road_condition(const Lane_Classification* msg);
  static void set_has_road_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_subtype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::osi3::Lane_Classification_RoadCondition&
Lane_Classification::_Internal::road_condition(const Lane_Classification* msg) {
  return *msg->road_condition_;
}
void Lane_Classification::clear_centerline() {
  centerline_.Clear();
}
void Lane_Classification::clear_left_adjacent_lane_id() {
  left_adjacent_lane_id_.Clear();
}
void Lane_Classification::clear_right_adjacent_lane_id() {
  right_adjacent_lane_id_.Clear();
}
void Lane_Classification::clear_right_lane_boundary_id() {
  right_lane_boundary_id_.Clear();
}
void Lane_Classification::clear_left_lane_boundary_id() {
  left_lane_boundary_id_.Clear();
}
void Lane_Classification::clear_free_lane_boundary_id() {
  free_lane_boundary_id_.Clear();
}
Lane_Classification::Lane_Classification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  centerline_(arena),
  left_adjacent_lane_id_(arena),
  right_adjacent_lane_id_(arena),
  lane_pairing_(arena),
  right_lane_boundary_id_(arena),
  left_lane_boundary_id_(arena),
  free_lane_boundary_id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.Lane.Classification)
}
Lane_Classification::Lane_Classification(const Lane_Classification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      centerline_(from.centerline_),
      left_adjacent_lane_id_(from.left_adjacent_lane_id_),
      right_adjacent_lane_id_(from.right_adjacent_lane_id_),
      lane_pairing_(from.lane_pairing_),
      right_lane_boundary_id_(from.right_lane_boundary_id_),
      left_lane_boundary_id_(from.left_lane_boundary_id_),
      free_lane_boundary_id_(from.free_lane_boundary_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_road_condition()) {
    road_condition_ = new ::osi3::Lane_Classification_RoadCondition(*from.road_condition_);
  } else {
    road_condition_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&subtype_) -
    reinterpret_cast<char*>(&type_)) + sizeof(subtype_));
  // @@protoc_insertion_point(copy_constructor:osi3.Lane.Classification)
}

void Lane_Classification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&road_condition_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&subtype_) -
    reinterpret_cast<char*>(&road_condition_)) + sizeof(subtype_));
}

Lane_Classification::~Lane_Classification() {
  // @@protoc_insertion_point(destructor:osi3.Lane.Classification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Lane_Classification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete road_condition_;
}

void Lane_Classification::ArenaDtor(void* object) {
  Lane_Classification* _this = reinterpret_cast< Lane_Classification* >(object);
  (void)_this;
}
void Lane_Classification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Lane_Classification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Lane_Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.Lane.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  centerline_.Clear();
  left_adjacent_lane_id_.Clear();
  right_adjacent_lane_id_.Clear();
  lane_pairing_.Clear();
  right_lane_boundary_id_.Clear();
  left_lane_boundary_id_.Clear();
  free_lane_boundary_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(road_condition_ != nullptr);
    road_condition_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&subtype_) -
        reinterpret_cast<char*>(&type_)) + sizeof(subtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lane_Classification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Lane.Classification.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::Lane_Classification_Type_IsValid(val))) {
            _internal_set_type(static_cast<::osi3::Lane_Classification_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool is_host_vehicle_lane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_host_vehicle_lane(&has_bits);
          is_host_vehicle_lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Vector3d centerline = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_centerline(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool centerline_is_driving_direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_centerline_is_driving_direction(&has_bits);
          centerline_is_driving_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Identifier left_adjacent_lane_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_left_adjacent_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Identifier right_adjacent_lane_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_right_adjacent_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Lane.Classification.LanePairing lane_pairing = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane_pairing(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Identifier right_lane_boundary_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_right_lane_boundary_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Identifier left_lane_boundary_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_left_lane_boundary_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Identifier free_lane_boundary_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_free_lane_boundary_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Lane.Classification.RoadCondition road_condition = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_road_condition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Lane.Classification.Subtype subtype = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::Lane_Classification_Subtype_IsValid(val))) {
            _internal_set_subtype(static_cast<::osi3::Lane_Classification_Subtype>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Lane_Classification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.Lane.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.Lane.Classification.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional bool is_host_vehicle_lane = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_host_vehicle_lane(), target);
  }

  // repeated .osi3.Vector3d centerline = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_centerline_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_centerline(i), target, stream);
  }

  // optional bool centerline_is_driving_direction = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_centerline_is_driving_direction(), target);
  }

  // repeated .osi3.Identifier left_adjacent_lane_id = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_left_adjacent_lane_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_left_adjacent_lane_id(i), target, stream);
  }

  // repeated .osi3.Identifier right_adjacent_lane_id = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_right_adjacent_lane_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_right_adjacent_lane_id(i), target, stream);
  }

  // repeated .osi3.Lane.Classification.LanePairing lane_pairing = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lane_pairing_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_lane_pairing(i), target, stream);
  }

  // repeated .osi3.Identifier right_lane_boundary_id = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_right_lane_boundary_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_right_lane_boundary_id(i), target, stream);
  }

  // repeated .osi3.Identifier left_lane_boundary_id = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_left_lane_boundary_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_left_lane_boundary_id(i), target, stream);
  }

  // repeated .osi3.Identifier free_lane_boundary_id = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_free_lane_boundary_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_free_lane_boundary_id(i), target, stream);
  }

  // optional .osi3.Lane.Classification.RoadCondition road_condition = 11;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::road_condition(this), target, stream);
  }

  // optional .osi3.Lane.Classification.Subtype subtype = 12;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_subtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.Lane.Classification)
  return target;
}

size_t Lane_Classification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.Lane.Classification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Vector3d centerline = 3;
  total_size += 1UL * this->_internal_centerline_size();
  for (const auto& msg : this->centerline_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.Identifier left_adjacent_lane_id = 5;
  total_size += 1UL * this->_internal_left_adjacent_lane_id_size();
  for (const auto& msg : this->left_adjacent_lane_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.Identifier right_adjacent_lane_id = 6;
  total_size += 1UL * this->_internal_right_adjacent_lane_id_size();
  for (const auto& msg : this->right_adjacent_lane_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.Lane.Classification.LanePairing lane_pairing = 7;
  total_size += 1UL * this->_internal_lane_pairing_size();
  for (const auto& msg : this->lane_pairing_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.Identifier right_lane_boundary_id = 8;
  total_size += 1UL * this->_internal_right_lane_boundary_id_size();
  for (const auto& msg : this->right_lane_boundary_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.Identifier left_lane_boundary_id = 9;
  total_size += 1UL * this->_internal_left_lane_boundary_id_size();
  for (const auto& msg : this->left_lane_boundary_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.Identifier free_lane_boundary_id = 10;
  total_size += 1UL * this->_internal_free_lane_boundary_id_size();
  for (const auto& msg : this->free_lane_boundary_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .osi3.Lane.Classification.RoadCondition road_condition = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *road_condition_);
    }

    // optional .osi3.Lane.Classification.Type type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional bool is_host_vehicle_lane = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool centerline_is_driving_direction = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .osi3.Lane.Classification.Subtype subtype = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_subtype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Lane_Classification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Lane_Classification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Lane_Classification::GetClassData() const { return &_class_data_; }

void Lane_Classification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Lane_Classification *>(to)->MergeFrom(
      static_cast<const Lane_Classification &>(from));
}


void Lane_Classification::MergeFrom(const Lane_Classification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.Lane.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  centerline_.MergeFrom(from.centerline_);
  left_adjacent_lane_id_.MergeFrom(from.left_adjacent_lane_id_);
  right_adjacent_lane_id_.MergeFrom(from.right_adjacent_lane_id_);
  lane_pairing_.MergeFrom(from.lane_pairing_);
  right_lane_boundary_id_.MergeFrom(from.right_lane_boundary_id_);
  left_lane_boundary_id_.MergeFrom(from.left_lane_boundary_id_);
  free_lane_boundary_id_.MergeFrom(from.free_lane_boundary_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_road_condition()->::osi3::Lane_Classification_RoadCondition::MergeFrom(from._internal_road_condition());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_host_vehicle_lane_ = from.is_host_vehicle_lane_;
    }
    if (cached_has_bits & 0x00000008u) {
      centerline_is_driving_direction_ = from.centerline_is_driving_direction_;
    }
    if (cached_has_bits & 0x00000010u) {
      subtype_ = from.subtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Lane_Classification::CopyFrom(const Lane_Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.Lane.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane_Classification::IsInitialized() const {
  return true;
}

void Lane_Classification::InternalSwap(Lane_Classification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  centerline_.InternalSwap(&other->centerline_);
  left_adjacent_lane_id_.InternalSwap(&other->left_adjacent_lane_id_);
  right_adjacent_lane_id_.InternalSwap(&other->right_adjacent_lane_id_);
  lane_pairing_.InternalSwap(&other->lane_pairing_);
  right_lane_boundary_id_.InternalSwap(&other->right_lane_boundary_id_);
  left_lane_boundary_id_.InternalSwap(&other->left_lane_boundary_id_);
  free_lane_boundary_id_.InternalSwap(&other->free_lane_boundary_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Lane_Classification, subtype_)
      + sizeof(Lane_Classification::subtype_)
      - PROTOBUF_FIELD_OFFSET(Lane_Classification, road_condition_)>(
          reinterpret_cast<char*>(&road_condition_),
          reinterpret_cast<char*>(&other->road_condition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Lane_Classification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5flane_2eproto_getter, &descriptor_table_osi_5flane_2eproto_once,
      file_level_metadata_osi_5flane_2eproto[2]);
}

// ===================================================================

class Lane::_Internal {
 public:
  using HasBits = decltype(std::declval<Lane>()._has_bits_);
  static const ::osi3::Identifier& id(const Lane* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::Lane_Classification& classification(const Lane* msg);
  static void set_has_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::osi3::Identifier&
Lane::_Internal::id(const Lane* msg) {
  return *msg->id_;
}
const ::osi3::Lane_Classification&
Lane::_Internal::classification(const Lane* msg) {
  return *msg->classification_;
}
void Lane::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Lane::clear_source_reference() {
  source_reference_.Clear();
}
Lane::Lane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  source_reference_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.Lane)
}
Lane::Lane(const Lane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      source_reference_(from.source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::osi3::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_classification()) {
    classification_ = new ::osi3::Lane_Classification(*from.classification_);
  } else {
    classification_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.Lane)
}

void Lane::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&classification_) -
    reinterpret_cast<char*>(&id_)) + sizeof(classification_));
}

Lane::~Lane() {
  // @@protoc_insertion_point(destructor:osi3.Lane)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Lane::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete classification_;
}

void Lane::ArenaDtor(void* object) {
  Lane* _this = reinterpret_cast< Lane* >(object);
  (void)_this;
}
void Lane::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Lane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.Lane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(classification_ != nullptr);
      classification_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Identifier id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Lane.Classification classification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_classification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.ExternalReference source_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_source_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Lane::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.Lane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.Identifier id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // optional .osi3.Lane.Classification classification = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::classification(this), target, stream);
  }

  // repeated .osi3.ExternalReference source_reference = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_source_reference_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_source_reference(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.Lane)
  return target;
}

size_t Lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.Lane)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.ExternalReference source_reference = 3;
  total_size += 1UL * this->_internal_source_reference_size();
  for (const auto& msg : this->source_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .osi3.Identifier id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .osi3.Lane.Classification classification = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *classification_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Lane::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Lane::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Lane::GetClassData() const { return &_class_data_; }

void Lane::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Lane *>(to)->MergeFrom(
      static_cast<const Lane &>(from));
}


void Lane::MergeFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_reference_.MergeFrom(from.source_reference_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_id()->::osi3::Identifier::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_classification()->::osi3::Lane_Classification::MergeFrom(from._internal_classification());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Lane::CopyFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane::IsInitialized() const {
  return true;
}

void Lane::InternalSwap(Lane* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  source_reference_.InternalSwap(&other->source_reference_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Lane, classification_)
      + sizeof(Lane::classification_)
      - PROTOBUF_FIELD_OFFSET(Lane, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Lane::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5flane_2eproto_getter, &descriptor_table_osi_5flane_2eproto_once,
      file_level_metadata_osi_5flane_2eproto[3]);
}

// ===================================================================

class LaneBoundary_BoundaryPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneBoundary_BoundaryPoint>()._has_bits_);
  static const ::osi3::Vector3d& position(const LaneBoundary_BoundaryPoint* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dash(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::osi3::Vector3d&
LaneBoundary_BoundaryPoint::_Internal::position(const LaneBoundary_BoundaryPoint* msg) {
  return *msg->position_;
}
void LaneBoundary_BoundaryPoint::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
LaneBoundary_BoundaryPoint::LaneBoundary_BoundaryPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.LaneBoundary.BoundaryPoint)
}
LaneBoundary_BoundaryPoint::LaneBoundary_BoundaryPoint(const LaneBoundary_BoundaryPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::osi3::Vector3d(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&dash_) -
    reinterpret_cast<char*>(&width_)) + sizeof(dash_));
  // @@protoc_insertion_point(copy_constructor:osi3.LaneBoundary.BoundaryPoint)
}

void LaneBoundary_BoundaryPoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dash_) -
    reinterpret_cast<char*>(&position_)) + sizeof(dash_));
}

LaneBoundary_BoundaryPoint::~LaneBoundary_BoundaryPoint() {
  // @@protoc_insertion_point(destructor:osi3.LaneBoundary.BoundaryPoint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LaneBoundary_BoundaryPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void LaneBoundary_BoundaryPoint::ArenaDtor(void* object) {
  LaneBoundary_BoundaryPoint* _this = reinterpret_cast< LaneBoundary_BoundaryPoint* >(object);
  (void)_this;
}
void LaneBoundary_BoundaryPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneBoundary_BoundaryPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LaneBoundary_BoundaryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LaneBoundary.BoundaryPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(position_ != nullptr);
    position_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dash_) -
        reinterpret_cast<char*>(&width_)) + sizeof(dash_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneBoundary_BoundaryPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Vector3d position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.LaneBoundary.BoundaryPoint.Dash dash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::LaneBoundary_BoundaryPoint_Dash_IsValid(val))) {
            _internal_set_dash(static_cast<::osi3::LaneBoundary_BoundaryPoint_Dash>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneBoundary_BoundaryPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LaneBoundary.BoundaryPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.Vector3d position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // optional double width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_width(), target);
  }

  // optional double height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_height(), target);
  }

  // optional .osi3.LaneBoundary.BoundaryPoint.Dash dash = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_dash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LaneBoundary.BoundaryPoint)
  return target;
}

size_t LaneBoundary_BoundaryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LaneBoundary.BoundaryPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .osi3.Vector3d position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional double width = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double height = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .osi3.LaneBoundary.BoundaryPoint.Dash dash = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dash());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneBoundary_BoundaryPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LaneBoundary_BoundaryPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneBoundary_BoundaryPoint::GetClassData() const { return &_class_data_; }

void LaneBoundary_BoundaryPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LaneBoundary_BoundaryPoint *>(to)->MergeFrom(
      static_cast<const LaneBoundary_BoundaryPoint &>(from));
}


void LaneBoundary_BoundaryPoint::MergeFrom(const LaneBoundary_BoundaryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LaneBoundary.BoundaryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::osi3::Vector3d::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      dash_ = from.dash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneBoundary_BoundaryPoint::CopyFrom(const LaneBoundary_BoundaryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LaneBoundary.BoundaryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneBoundary_BoundaryPoint::IsInitialized() const {
  return true;
}

void LaneBoundary_BoundaryPoint::InternalSwap(LaneBoundary_BoundaryPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneBoundary_BoundaryPoint, dash_)
      + sizeof(LaneBoundary_BoundaryPoint::dash_)
      - PROTOBUF_FIELD_OFFSET(LaneBoundary_BoundaryPoint, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneBoundary_BoundaryPoint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5flane_2eproto_getter, &descriptor_table_osi_5flane_2eproto_once,
      file_level_metadata_osi_5flane_2eproto[4]);
}

// ===================================================================

class LaneBoundary_Classification::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneBoundary_Classification>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void LaneBoundary_Classification::clear_limiting_structure_id() {
  limiting_structure_id_.Clear();
}
LaneBoundary_Classification::LaneBoundary_Classification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  limiting_structure_id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.LaneBoundary.Classification)
}
LaneBoundary_Classification::LaneBoundary_Classification(const LaneBoundary_Classification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      limiting_structure_id_(from.limiting_structure_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&type_)) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:osi3.LaneBoundary.Classification)
}

void LaneBoundary_Classification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&type_)) + sizeof(color_));
}

LaneBoundary_Classification::~LaneBoundary_Classification() {
  // @@protoc_insertion_point(destructor:osi3.LaneBoundary.Classification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LaneBoundary_Classification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LaneBoundary_Classification::ArenaDtor(void* object) {
  LaneBoundary_Classification* _this = reinterpret_cast< LaneBoundary_Classification* >(object);
  (void)_this;
}
void LaneBoundary_Classification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneBoundary_Classification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LaneBoundary_Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LaneBoundary.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limiting_structure_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&color_) -
        reinterpret_cast<char*>(&type_)) + sizeof(color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneBoundary_Classification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.LaneBoundary.Classification.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::LaneBoundary_Classification_Type_IsValid(val))) {
            _internal_set_type(static_cast<::osi3::LaneBoundary_Classification_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.LaneBoundary.Classification.Color color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::LaneBoundary_Classification_Color_IsValid(val))) {
            _internal_set_color(static_cast<::osi3::LaneBoundary_Classification_Color>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Identifier limiting_structure_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_limiting_structure_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneBoundary_Classification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LaneBoundary.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.LaneBoundary.Classification.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .osi3.LaneBoundary.Classification.Color color = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_color(), target);
  }

  // repeated .osi3.Identifier limiting_structure_id = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_limiting_structure_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_limiting_structure_id(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LaneBoundary.Classification)
  return target;
}

size_t LaneBoundary_Classification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LaneBoundary.Classification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Identifier limiting_structure_id = 3;
  total_size += 1UL * this->_internal_limiting_structure_id_size();
  for (const auto& msg : this->limiting_structure_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .osi3.LaneBoundary.Classification.Type type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .osi3.LaneBoundary.Classification.Color color = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_color());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneBoundary_Classification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LaneBoundary_Classification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneBoundary_Classification::GetClassData() const { return &_class_data_; }

void LaneBoundary_Classification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LaneBoundary_Classification *>(to)->MergeFrom(
      static_cast<const LaneBoundary_Classification &>(from));
}


void LaneBoundary_Classification::MergeFrom(const LaneBoundary_Classification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LaneBoundary.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  limiting_structure_id_.MergeFrom(from.limiting_structure_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      color_ = from.color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneBoundary_Classification::CopyFrom(const LaneBoundary_Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LaneBoundary.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneBoundary_Classification::IsInitialized() const {
  return true;
}

void LaneBoundary_Classification::InternalSwap(LaneBoundary_Classification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  limiting_structure_id_.InternalSwap(&other->limiting_structure_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneBoundary_Classification, color_)
      + sizeof(LaneBoundary_Classification::color_)
      - PROTOBUF_FIELD_OFFSET(LaneBoundary_Classification, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneBoundary_Classification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5flane_2eproto_getter, &descriptor_table_osi_5flane_2eproto_once,
      file_level_metadata_osi_5flane_2eproto[5]);
}

// ===================================================================

class LaneBoundary::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneBoundary>()._has_bits_);
  static const ::osi3::Identifier& id(const LaneBoundary* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::LaneBoundary_Classification& classification(const LaneBoundary* msg);
  static void set_has_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::ColorDescription& color_description(const LaneBoundary* msg);
  static void set_has_color_description(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::osi3::Identifier&
LaneBoundary::_Internal::id(const LaneBoundary* msg) {
  return *msg->id_;
}
const ::osi3::LaneBoundary_Classification&
LaneBoundary::_Internal::classification(const LaneBoundary* msg) {
  return *msg->classification_;
}
const ::osi3::ColorDescription&
LaneBoundary::_Internal::color_description(const LaneBoundary* msg) {
  return *msg->color_description_;
}
void LaneBoundary::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void LaneBoundary::clear_source_reference() {
  source_reference_.Clear();
}
void LaneBoundary::clear_color_description() {
  if (color_description_ != nullptr) color_description_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
LaneBoundary::LaneBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  boundary_line_(arena),
  source_reference_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.LaneBoundary)
}
LaneBoundary::LaneBoundary(const LaneBoundary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      boundary_line_(from.boundary_line_),
      source_reference_(from.source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::osi3::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_classification()) {
    classification_ = new ::osi3::LaneBoundary_Classification(*from.classification_);
  } else {
    classification_ = nullptr;
  }
  if (from._internal_has_color_description()) {
    color_description_ = new ::osi3::ColorDescription(*from.color_description_);
  } else {
    color_description_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.LaneBoundary)
}

void LaneBoundary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&color_description_) -
    reinterpret_cast<char*>(&id_)) + sizeof(color_description_));
}

LaneBoundary::~LaneBoundary() {
  // @@protoc_insertion_point(destructor:osi3.LaneBoundary)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LaneBoundary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete classification_;
  if (this != internal_default_instance()) delete color_description_;
}

void LaneBoundary::ArenaDtor(void* object) {
  LaneBoundary* _this = reinterpret_cast< LaneBoundary* >(object);
  (void)_this;
}
void LaneBoundary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneBoundary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LaneBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LaneBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boundary_line_.Clear();
  source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(classification_ != nullptr);
      classification_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(color_description_ != nullptr);
      color_description_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneBoundary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Identifier id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_boundary_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.LaneBoundary.Classification classification = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_classification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.ExternalReference source_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_source_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.ColorDescription color_description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_color_description(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneBoundary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LaneBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.Identifier id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_boundary_line_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_boundary_line(i), target, stream);
  }

  // optional .osi3.LaneBoundary.Classification classification = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::classification(this), target, stream);
  }

  // repeated .osi3.ExternalReference source_reference = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_source_reference_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_source_reference(i), target, stream);
  }

  // optional .osi3.ColorDescription color_description = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::color_description(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LaneBoundary)
  return target;
}

size_t LaneBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LaneBoundary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line = 2;
  total_size += 1UL * this->_internal_boundary_line_size();
  for (const auto& msg : this->boundary_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.ExternalReference source_reference = 4;
  total_size += 1UL * this->_internal_source_reference_size();
  for (const auto& msg : this->source_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .osi3.Identifier id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .osi3.LaneBoundary.Classification classification = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *classification_);
    }

    // optional .osi3.ColorDescription color_description = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_description_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneBoundary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LaneBoundary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneBoundary::GetClassData() const { return &_class_data_; }

void LaneBoundary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LaneBoundary *>(to)->MergeFrom(
      static_cast<const LaneBoundary &>(from));
}


void LaneBoundary::MergeFrom(const LaneBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LaneBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boundary_line_.MergeFrom(from.boundary_line_);
  source_reference_.MergeFrom(from.source_reference_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_id()->::osi3::Identifier::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_classification()->::osi3::LaneBoundary_Classification::MergeFrom(from._internal_classification());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_color_description()->::osi3::ColorDescription::MergeFrom(from._internal_color_description());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneBoundary::CopyFrom(const LaneBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneBoundary::IsInitialized() const {
  return true;
}

void LaneBoundary::InternalSwap(LaneBoundary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  boundary_line_.InternalSwap(&other->boundary_line_);
  source_reference_.InternalSwap(&other->source_reference_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneBoundary, color_description_)
      + sizeof(LaneBoundary::color_description_)
      - PROTOBUF_FIELD_OFFSET(LaneBoundary, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneBoundary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5flane_2eproto_getter, &descriptor_table_osi_5flane_2eproto_once,
      file_level_metadata_osi_5flane_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::Lane_Classification_RoadCondition* Arena::CreateMaybeMessage< ::osi3::Lane_Classification_RoadCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::Lane_Classification_RoadCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::Lane_Classification_LanePairing* Arena::CreateMaybeMessage< ::osi3::Lane_Classification_LanePairing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::Lane_Classification_LanePairing >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::Lane_Classification* Arena::CreateMaybeMessage< ::osi3::Lane_Classification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::Lane_Classification >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::Lane* Arena::CreateMaybeMessage< ::osi3::Lane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::Lane >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::LaneBoundary_BoundaryPoint* Arena::CreateMaybeMessage< ::osi3::LaneBoundary_BoundaryPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::LaneBoundary_BoundaryPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::LaneBoundary_Classification* Arena::CreateMaybeMessage< ::osi3::LaneBoundary_Classification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::LaneBoundary_Classification >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::LaneBoundary* Arena::CreateMaybeMessage< ::osi3::LaneBoundary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::LaneBoundary >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
