// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_trafficsign.proto

#include "osi_trafficsign.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace osi3 {
constexpr TrafficSignValue::TrafficSignValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(0)
  , value_unit_(0)
{}
struct TrafficSignValueDefaultTypeInternal {
  constexpr TrafficSignValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficSignValueDefaultTypeInternal() {}
  union {
    TrafficSignValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficSignValueDefaultTypeInternal _TrafficSignValue_default_instance_;
constexpr TrafficSign_MainSign_Classification::TrafficSign_MainSign_Classification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : assigned_lane_id_()
  , country_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , country_revision_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sub_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr)
  , variability_(0)

  , type_(0)

  , direction_scope_(0)

  , vertically_mirrored_(false)
  , is_out_of_service_(false){}
struct TrafficSign_MainSign_ClassificationDefaultTypeInternal {
  constexpr TrafficSign_MainSign_ClassificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficSign_MainSign_ClassificationDefaultTypeInternal() {}
  union {
    TrafficSign_MainSign_Classification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficSign_MainSign_ClassificationDefaultTypeInternal _TrafficSign_MainSign_Classification_default_instance_;
constexpr TrafficSign_MainSign::TrafficSign_MainSign(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_reference_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , base_(nullptr)
  , classification_(nullptr){}
struct TrafficSign_MainSignDefaultTypeInternal {
  constexpr TrafficSign_MainSignDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficSign_MainSignDefaultTypeInternal() {}
  union {
    TrafficSign_MainSign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficSign_MainSignDefaultTypeInternal _TrafficSign_MainSign_default_instance_;
constexpr TrafficSign_SupplementarySign_Classification_Arrow::TrafficSign_SupplementarySign_Classification_Arrow(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lane_id_()
  , direction_(){}
struct TrafficSign_SupplementarySign_Classification_ArrowDefaultTypeInternal {
  constexpr TrafficSign_SupplementarySign_Classification_ArrowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficSign_SupplementarySign_Classification_ArrowDefaultTypeInternal() {}
  union {
    TrafficSign_SupplementarySign_Classification_Arrow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficSign_SupplementarySign_Classification_ArrowDefaultTypeInternal _TrafficSign_SupplementarySign_Classification_Arrow_default_instance_;
constexpr TrafficSign_SupplementarySign_Classification::TrafficSign_SupplementarySign_Classification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_()
  , assigned_lane_id_()
  , actor_()
  , arrow_()
  , country_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , country_revision_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sub_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , variability_(0)

  , type_(0)

  , is_out_of_service_(false){}
struct TrafficSign_SupplementarySign_ClassificationDefaultTypeInternal {
  constexpr TrafficSign_SupplementarySign_ClassificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficSign_SupplementarySign_ClassificationDefaultTypeInternal() {}
  union {
    TrafficSign_SupplementarySign_Classification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficSign_SupplementarySign_ClassificationDefaultTypeInternal _TrafficSign_SupplementarySign_Classification_default_instance_;
constexpr TrafficSign_SupplementarySign::TrafficSign_SupplementarySign(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_reference_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , base_(nullptr)
  , classification_(nullptr){}
struct TrafficSign_SupplementarySignDefaultTypeInternal {
  constexpr TrafficSign_SupplementarySignDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficSign_SupplementarySignDefaultTypeInternal() {}
  union {
    TrafficSign_SupplementarySign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficSign_SupplementarySignDefaultTypeInternal _TrafficSign_SupplementarySign_default_instance_;
constexpr TrafficSign::TrafficSign(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : supplementary_sign_()
  , source_reference_()
  , id_(nullptr)
  , main_sign_(nullptr){}
struct TrafficSignDefaultTypeInternal {
  constexpr TrafficSignDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficSignDefaultTypeInternal() {}
  union {
    TrafficSign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficSignDefaultTypeInternal _TrafficSign_default_instance_;
}  // namespace osi3
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5ftrafficsign_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_osi_5ftrafficsign_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5ftrafficsign_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5ftrafficsign_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSignValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSignValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSignValue, value_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSignValue, value_unit_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSignValue, text_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, variability_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, type_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, value_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, direction_scope_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, assigned_lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, vertically_mirrored_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, is_out_of_service_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, country_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, country_revision_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, code_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, sub_code_),
  5,
  6,
  4,
  7,
  ~0u,
  8,
  9,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign, base_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign, classification_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign, model_reference_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification_Arrow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification_Arrow, lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification_Arrow, direction_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, variability_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, type_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, value_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, assigned_lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, actor_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, arrow_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, is_out_of_service_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, country_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, country_revision_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, code_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, sub_code_),
  4,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  6,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign, base_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign, classification_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign, model_reference_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign, id_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign, main_sign_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign, supplementary_sign_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign, source_reference_),
  0,
  1,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::osi3::TrafficSignValue)},
  { 12, 29, -1, sizeof(::osi3::TrafficSign_MainSign_Classification)},
  { 40, 49, -1, sizeof(::osi3::TrafficSign_MainSign)},
  { 52, -1, -1, sizeof(::osi3::TrafficSign_SupplementarySign_Classification_Arrow)},
  { 60, 77, -1, sizeof(::osi3::TrafficSign_SupplementarySign_Classification)},
  { 88, 97, -1, sizeof(::osi3::TrafficSign_SupplementarySign)},
  { 100, 110, -1, sizeof(::osi3::TrafficSign)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficSignValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficSign_MainSign_Classification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficSign_MainSign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficSign_SupplementarySign_Classification_Arrow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficSign_SupplementarySign_Classification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficSign_SupplementarySign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficSign_default_instance_),
};

const char descriptor_table_protodef_osi_5ftrafficsign_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025osi_trafficsign.proto\022\004osi3\032\020osi_commo"
  "n.proto\"\205\003\n\020TrafficSignValue\022\r\n\005value\030\001 "
  "\001(\001\022/\n\nvalue_unit\030\002 \001(\0162\033.osi3.TrafficSi"
  "gnValue.Unit\022\014\n\004text\030\003 \001(\t\"\242\002\n\004Unit\022\020\n\014U"
  "NIT_UNKNOWN\020\000\022\016\n\nUNIT_OTHER\020\001\022\020\n\014UNIT_NO"
  "_UNIT\020\002\022\033\n\027UNIT_KILOMETER_PER_HOUR\020\003\022\026\n\022"
  "UNIT_MILE_PER_HOUR\020\004\022\016\n\nUNIT_METER\020\005\022\022\n\016"
  "UNIT_KILOMETER\020\006\022\r\n\tUNIT_FEET\020\007\022\r\n\tUNIT_"
  "MILE\020\010\022\023\n\017UNIT_METRIC_TON\020\t\022\021\n\rUNIT_LONG"
  "_TON\020\n\022\022\n\016UNIT_SHORT_TON\020\013\022\020\n\014UNIT_MINUT"
  "ES\020\014\022\014\n\010UNIT_DAY\020\r\022\023\n\017UNIT_PERCENTAGE\020\016\""
  "\344f\n\013TrafficSign\022\034\n\002id\030\001 \001(\0132\020.osi3.Ident"
  "ifier\022-\n\tmain_sign\030\002 \001(\0132\032.osi3.TrafficS"
  "ign.MainSign\022\?\n\022supplementary_sign\030\003 \003(\013"
  "2#.osi3.TrafficSign.SupplementarySign\0221\n"
  "\020source_reference\030\004 \003(\0132\027.osi3.ExternalR"
  "eference\032\335@\n\010MainSign\022\"\n\004base\030\001 \001(\0132\024.os"
  "i3.BaseStationary\022A\n\016classification\030\002 \001("
  "\0132).osi3.TrafficSign.MainSign.Classifica"
  "tion\022\027\n\017model_reference\030\003 \001(\t\032\320\?\n\016Classi"
  "fication\0222\n\013variability\030\001 \001(\0162\035.osi3.Tra"
  "fficSign.Variability\022<\n\004type\030\002 \001(\0162..osi"
  "3.TrafficSign.MainSign.Classification.Ty"
  "pe\022%\n\005value\030\003 \001(\0132\026.osi3.TrafficSignValu"
  "e\022Q\n\017direction_scope\030\004 \001(\01628.osi3.Traffi"
  "cSign.MainSign.Classification.DirectionS"
  "cope\022*\n\020assigned_lane_id\030\005 \003(\0132\020.osi3.Id"
  "entifier\022\033\n\023vertically_mirrored\030\006 \001(\010\022\031\n"
  "\021is_out_of_service\030\007 \001(\010\022\017\n\007country\030\010 \001("
  "\t\022\030\n\020country_revision\030\t \001(\t\022\014\n\004code\030\n \001("
  "\t\022\020\n\010sub_code\030\013 \001(\t\"\340:\n\004Type\022\020\n\014TYPE_UNK"
  "NOWN\020\000\022\016\n\nTYPE_OTHER\020\001\022\024\n\020TYPE_DANGER_SP"
  "OT\020\002\022\027\n\023TYPE_ZEBRA_CROSSING\020W\022\017\n\013TYPE_FL"
  "IGHT\020n\022\020\n\013TYPE_CATTLE\020\310\001\022\026\n\021TYPE_HORSE_R"
  "IDERS\020\305\001\022\024\n\017TYPE_AMPHIBIANS\020\274\001\022\026\n\022TYPE_F"
  "ALLING_ROCKS\020`\022\024\n\020TYPE_SNOW_OR_ICE\020^\022\025\n\021"
  "TYPE_LOOSE_GRAVEL\020a\022\022\n\016TYPE_WATERSIDE\020f\022"
  "\023\n\016TYPE_CLEARANCE\020\322\001\022\027\n\023TYPE_MOVABLE_BRI"
  "DGE\020e\022,\n(TYPE_RIGHT_BEFORE_LEFT_NEXT_INT"
  "ERSECTION\020\003\022\022\n\016TYPE_TURN_LEFT\020\004\022\023\n\017TYPE_"
  "TURN_RIGHT\020\005\022\031\n\025TYPE_DOUBLE_TURN_LEFT\020\006\022"
  "\032\n\026TYPE_DOUBLE_TURN_RIGHT\020\007\022\027\n\023TYPE_HILL"
  "_DOWNWARDS\020\010\022\025\n\021TYPE_HILL_UPWARDS\020\t\022\024\n\020T"
  "YPE_UNEVEN_ROAD\020]\022#\n\037TYPE_ROAD_SLIPPERY_"
  "WET_OR_DIRTY\020_\022\023\n\017TYPE_SIDE_WINDS\020b\022\027\n\023T"
  "YPE_ROAD_NARROWING\020\n\022\035\n\031TYPE_ROAD_NARROW"
  "ING_RIGHT\020\014\022\034\n\030TYPE_ROAD_NARROWING_LEFT\020"
  "\013\022\023\n\017TYPE_ROAD_WORKS\020\r\022\027\n\023TYPE_TRAFFIC_Q"
  "UEUES\020d\022\030\n\024TYPE_TWO_WAY_TRAFFIC\020\016\022 \n\034TYP"
  "E_ATTENTION_TRAFFIC_LIGHT\020\017\022\024\n\020TYPE_PEDE"
  "STRIANS\020g\022\032\n\026TYPE_CHILDREN_CROSSING\020j\022\024\n"
  "\020TYPE_CYCLE_ROUTE\020k\022\026\n\022TYPE_DEER_CROSSIN"
  "G\020m\022 \n\033TYPE_UNGATED_LEVEL_CROSSING\020\220\001\022\036\n"
  "\032TYPE_LEVEL_CROSSING_MARKER\020p\022\"\n\035TYPE_RA"
  "ILWAY_TRAFFIC_PRIORITY\020\207\001\022\021\n\rTYPE_GIVE_W"
  "AY\020\020\022\r\n\tTYPE_STOP\020\021\022\'\n#TYPE_PRIORITY_TO_"
  "OPPOSITE_DIRECTION\020\022\0223\n/TYPE_PRIORITY_TO"
  "_OPPOSITE_DIRECTION_UPSIDE_DOWN\020\023\022\035\n\031TYP"
  "E_PRESCRIBED_LEFT_TURN\020\024\022\036\n\032TYPE_PRESCRI"
  "BED_RIGHT_TURN\020\025\022\034\n\030TYPE_PRESCRIBED_STRA"
  "IGHT\020\026\022\035\n\031TYPE_PRESCRIBED_RIGHT_WAY\020\030\022\034\n"
  "\030TYPE_PRESCRIBED_LEFT_WAY\020\027\022+\n\'TYPE_PRES"
  "CRIBED_RIGHT_TURN_AND_STRAIGHT\020\032\022*\n&TYPE"
  "_PRESCRIBED_LEFT_TURN_AND_STRAIGHT\020\031\022,\n("
  "TYPE_PRESCRIBED_LEFT_TURN_AND_RIGHT_TURN"
  "\020\033\0225\n1TYPE_PRESCRIBED_LEFT_TURN_RIGHT_TU"
  "RN_AND_STRAIGHT\020\034\022\023\n\017TYPE_ROUNDABOUT\020\035\022\024"
  "\n\020TYPE_ONEWAY_LEFT\020\036\022\025\n\021TYPE_ONEWAY_RIGH"
  "T\020\037\022\022\n\016TYPE_PASS_LEFT\020 \022\023\n\017TYPE_PASS_RIG"
  "HT\020!\022$\n\037TYPE_SIDE_LANE_OPEN_FOR_TRAFFIC\020"
  "\200\001\022&\n!TYPE_SIDE_LANE_CLOSED_FOR_TRAFFIC\020"
  "\201\001\022\'\n\"TYPE_SIDE_LANE_CLOSING_FOR_TRAFFIC"
  "\020\202\001\022\022\n\rTYPE_BUS_STOP\020\211\001\022\024\n\017TYPE_TAXI_STA"
  "ND\020\212\001\022\027\n\022TYPE_BICYCLES_ONLY\020\221\001\022\033\n\026TYPE_H"
  "ORSE_RIDERS_ONLY\020\222\001\022\032\n\025TYPE_PEDESTRIANS_"
  "ONLY\020\223\001\022*\n%TYPE_BICYCLES_PEDESTRIANS_SHA"
  "RED_ONLY\020\224\001\0222\n-TYPE_BICYCLES_PEDESTRIANS"
  "_SEPARATED_LEFT_ONLY\020\225\001\0223\n.TYPE_BICYCLES"
  "_PEDESTRIANS_SEPARATED_RIGHT_ONLY\020\226\001\022\037\n\032"
  "TYPE_PEDESTRIAN_ZONE_BEGIN\020\227\001\022\035\n\030TYPE_PE"
  "DESTRIAN_ZONE_END\020\230\001\022\034\n\027TYPE_BICYCLE_ROA"
  "D_BEGIN\020\231\001\022\032\n\025TYPE_BICYCLE_ROAD_END\020\232\001\022\021"
  "\n\rTYPE_BUS_LANE\020\"\022\027\n\023TYPE_BUS_LANE_BEGIN"
  "\020#\022\025\n\021TYPE_BUS_LANE_END\020$\022\027\n\023TYPE_ALL_PR"
  "OHIBITED\020%\022(\n$TYPE_MOTORIZED_MULTITRACK_"
  "PROHIBITED\020&\022\032\n\026TYPE_TRUCKS_PROHIBITED\020\'"
  "\022\034\n\030TYPE_BICYCLES_PROHIBITED\020(\022\037\n\033TYPE_M"
  "OTORCYCLES_PROHIBITED\020)\022\033\n\026TYPE_MOPEDS_P"
  "ROHIBITED\020\233\001\022!\n\034TYPE_HORSE_RIDERS_PROHIB"
  "ITED\020\234\001\022$\n\037TYPE_HORSE_CARRIAGES_PROHIBIT"
  "ED\020\235\001\022\033\n\026TYPE_CATTLE_PROHIBITED\020\236\001\022\032\n\025TY"
  "PE_BUSES_PROHIBITED\020\237\001\022\031\n\024TYPE_CARS_PROH"
  "IBITED\020\240\001\022\"\n\035TYPE_CARS_TRAILERS_PROHIBIT"
  "ED\020\241\001\022$\n\037TYPE_TRUCKS_TRAILERS_PROHIBITED"
  "\020\242\001\022\035\n\030TYPE_TRACTORS_PROHIBITED\020\243\001\022\037\n\033TY"
  "PE_PEDESTRIANS_PROHIBITED\020*\022\"\n\036TYPE_MOTO"
  "R_VEHICLES_PROHIBITED\020+\022-\n(TYPE_HAZARDOU"
  "S_GOODS_VEHICLES_PROHIBITED\020\244\001\022)\n$TYPE_O"
  "VER_WEIGHT_VEHICLES_PROHIBITED\020\245\001\022.\n)TYP"
  "E_VEHICLES_AXLE_OVER_WEIGHT_PROHIBITED\020\246"
  "\001\022*\n%TYPE_VEHICLES_EXCESS_WIDTH_PROHIBIT"
  "ED\020\247\001\022+\n&TYPE_VEHICLES_EXCESS_HEIGHT_PRO"
  "HIBITED\020\250\001\022+\n&TYPE_VEHICLES_EXCESS_LENGT"
  "H_PROHIBITED\020\251\001\022\025\n\021TYPE_DO_NOT_ENTER\020,\022\036"
  "\n\031TYPE_SNOW_CHAINS_REQUIRED\020\252\001\022-\n(TYPE_W"
  "ATER_POLLUTANT_VEHICLES_PROHIBITED\020\253\001\022!\n"
  "\035TYPE_ENVIRONMENTAL_ZONE_BEGIN\020-\022\037\n\033TYPE"
  "_ENVIRONMENTAL_ZONE_END\020.\022\027\n\023TYPE_NO_U_T"
  "URN_LEFT\020/\022\030\n\024TYPE_NO_U_TURN_RIGHT\0200\022\037\n\033"
  "TYPE_PRESCRIBED_U_TURN_LEFT\0201\022 \n\034TYPE_PR"
  "ESCRIBED_U_TURN_RIGHT\0202\022$\n TYPE_MINIMUM_"
  "DISTANCE_FOR_TRUCKS\0203\022\032\n\026TYPE_SPEED_LIMI"
  "T_BEGIN\0204\022\037\n\033TYPE_SPEED_LIMIT_ZONE_BEGIN"
  "\0205\022\035\n\031TYPE_SPEED_LIMIT_ZONE_END\0206\022\034\n\030TYP"
  "E_MINIMUM_SPEED_BEGIN\0207\022\035\n\031TYPE_OVERTAKI"
  "NG_BAN_BEGIN\0208\022(\n$TYPE_OVERTAKING_BAN_FO"
  "R_TRUCKS_BEGIN\0209\022\030\n\024TYPE_SPEED_LIMIT_END"
  "\020:\022\032\n\026TYPE_MINIMUM_SPEED_END\020;\022\033\n\027TYPE_O"
  "VERTAKING_BAN_END\020<\022&\n\"TYPE_OVERTAKING_B"
  "AN_FOR_TRUCKS_END\020=\022\035\n\031TYPE_ALL_RESTRICT"
  "IONS_END\020>\022\024\n\020TYPE_NO_STOPPING\020\?\022\023\n\017TYPE"
  "_NO_PARKING\020@\022\036\n\032TYPE_NO_PARKING_ZONE_BE"
  "GIN\020A\022\034\n\030TYPE_NO_PARKING_ZONE_END\020B\022\'\n#T"
  "YPE_RIGHT_OF_WAY_NEXT_INTERSECTION\020C\022\033\n\027"
  "TYPE_RIGHT_OF_WAY_BEGIN\020D\022\031\n\025TYPE_RIGHT_"
  "OF_WAY_END\020E\022)\n%TYPE_PRIORITY_OVER_OPPOS"
  "ITE_DIRECTION\020F\0225\n1TYPE_PRIORITY_OVER_OP"
  "POSITE_DIRECTION_UPSIDE_DOWN\020G\022\023\n\017TYPE_T"
  "OWN_BEGIN\020H\022\021\n\rTYPE_TOWN_END\020I\022\024\n\020TYPE_C"
  "AR_PARKING\020J\022\037\n\033TYPE_CAR_PARKING_ZONE_BE"
  "GIN\020K\022\035\n\031TYPE_CAR_PARKING_ZONE_END\020L\022$\n\037"
  "TYPE_SIDEWALK_HALF_PARKING_LEFT\020\254\001\022%\n TY"
  "PE_SIDEWALK_HALF_PARKING_RIGHT\020\255\001\022\037\n\032TYP"
  "E_SIDEWALK_PARKING_LEFT\020\256\001\022 \n\033TYPE_SIDEW"
  "ALK_PARKING_RIGHT\020\257\001\0222\n-TYPE_SIDEWALK_PE"
  "RPENDICULAR_HALF_PARKING_LEFT\020\260\001\0223\n.TYPE"
  "_SIDEWALK_PERPENDICULAR_HALF_PARKING_RIG"
  "HT\020\261\001\022-\n(TYPE_SIDEWALK_PERPENDICULAR_PAR"
  "KING_LEFT\020\262\001\022.\n)TYPE_SIDEWALK_PERPENDICU"
  "LAR_PARKING_RIGHT\020\263\001\022\034\n\030TYPE_LIVING_STRE"
  "ET_BEGIN\020M\022\032\n\026TYPE_LIVING_STREET_END\020N\022\017"
  "\n\013TYPE_TUNNEL\020O\022 \n\034TYPE_EMERGENCY_STOPPI"
  "NG_LEFT\020P\022!\n\035TYPE_EMERGENCY_STOPPING_RIG"
  "HT\020Q\022\026\n\022TYPE_HIGHWAY_BEGIN\020R\022\024\n\020TYPE_HIG"
  "HWAY_END\020S\022\031\n\025TYPE_EXPRESSWAY_BEGIN\020T\022\027\n"
  "\023TYPE_EXPRESSWAY_END\020U\022\034\n\027TYPE_NAMED_HIG"
  "HWAY_EXIT\020\267\001\022\037\n\032TYPE_NAMED_EXPRESSWAY_EX"
  "IT\020\270\001\022\031\n\024TYPE_NAMED_ROAD_EXIT\020\271\001\022\025\n\021TYPE"
  "_HIGHWAY_EXIT\020V\022\031\n\024TYPE_EXPRESSWAY_EXIT\020"
  "\272\001\022\027\n\022TYPE_ONEWAY_STREET\020\273\001\022\031\n\024TYPE_CROS"
  "SING_GUARDS\020\275\001\022\021\n\014TYPE_DEADEND\020\276\001\022-\n(TYP"
  "E_DEADEND_EXCLUDING_DESIGNATED_ACTORS\020\277\001"
  "\022\033\n\026TYPE_FIRST_AID_STATION\020\302\001\022\030\n\023TYPE_PO"
  "LICE_STATION\020\303\001\022\023\n\016TYPE_TELEPHONE\020\304\001\022\031\n\024"
  "TYPE_FILLING_STATION\020\306\001\022\017\n\nTYPE_HOTEL\020\311\001"
  "\022\r\n\010TYPE_INN\020\312\001\022\017\n\nTYPE_KIOSK\020\313\001\022\020\n\013TYPE"
  "_TOILET\020\314\001\022\020\n\013TYPE_CHAPEL\020\315\001\022\026\n\021TYPE_TOU"
  "RIST_INFO\020\316\001\022\030\n\023TYPE_REPAIR_SERVICE\020\317\001\022\036"
  "\n\031TYPE_PEDESTRIAN_UNDERPASS\020\320\001\022\033\n\026TYPE_P"
  "EDESTRIAN_BRIDGE\020\321\001\022\026\n\021TYPE_CAMPER_PLACE"
  "\020\325\001\022$\n\037TYPE_ADVISORY_SPEED_LIMIT_BEGIN\020\326"
  "\001\022\"\n\035TYPE_ADVISORY_SPEED_LIMIT_END\020\327\001\022\024\n"
  "\017TYPE_PLACE_NAME\020\330\001\022\034\n\027TYPE_TOURIST_ATTR"
  "ACTION\020\331\001\022\027\n\022TYPE_TOURIST_ROUTE\020\332\001\022\026\n\021TY"
  "PE_TOURIST_AREA\020\333\001\022.\n)TYPE_SHOULDER_NOT_"
  "PASSABLE_MOTOR_VEHICLES\020\334\001\022)\n$TYPE_SHOUL"
  "DER_UNSAFE_TRUCKS_TRACTORS\020\335\001\022\024\n\017TYPE_TO"
  "LL_BEGIN\020\336\001\022\022\n\rTYPE_TOLL_END\020\337\001\022\023\n\016TYPE_"
  "TOLL_ROAD\020\340\001\022\021\n\014TYPE_CUSTOMS\020\341\001\022#\n\036TYPE_"
  "INTERNATIONAL_BORDER_INFO\020\342\001\022\036\n\031TYPE_STR"
  "EETLIGHT_RED_BAND\020\343\001\022&\n!TYPE_FEDERAL_HIG"
  "HWAY_ROUTE_NUMBER\020\344\001\022\036\n\031TYPE_HIGHWAY_ROU"
  "TE_NUMBER\020\345\001\022$\n\037TYPE_HIGHWAY_INTERCHANGE"
  "_NUMBER\020\346\001\022\037\n\032TYPE_EUROPEAN_ROUTE_NUMBER"
  "\020\347\001\022(\n#TYPE_FEDERAL_HIGHWAY_DIRECTION_LE"
  "FT\020\350\001\022)\n$TYPE_FEDERAL_HIGHWAY_DIRECTION_"
  "RIGHT\020\351\001\022%\n TYPE_PRIMARY_ROAD_DIRECTION_"
  "LEFT\020\352\001\022&\n!TYPE_PRIMARY_ROAD_DIRECTION_R"
  "IGHT\020\353\001\022\'\n\"TYPE_SECONDARY_ROAD_DIRECTION"
  "_LEFT\020\354\001\022(\n#TYPE_SECONDARY_ROAD_DIRECTIO"
  "N_RIGHT\020\355\001\022*\n%TYPE_DIRECTION_DESIGNATED_"
  "ACTORS_LEFT\020\356\001\022+\n&TYPE_DIRECTION_DESIGNA"
  "TED_ACTORS_RIGHT\020\357\001\022#\n\036TYPE_ROUTING_DESI"
  "GNATED_ACTORS\020\360\001\022#\n\036TYPE_DIRECTION_TO_HI"
  "GHWAY_LEFT\020\217\001\022#\n\037TYPE_DIRECTION_TO_HIGHW"
  "AY_RIGHT\020l\022,\n(TYPE_DIRECTION_TO_LOCAL_DE"
  "STINATION_LEFT\020\177\022.\n)TYPE_DIRECTION_TO_LO"
  "CAL_DESTINATION_RIGHT\020\210\001\022 \n\034TYPE_CONSOLI"
  "DATED_DIRECTIONS\020v\022\024\n\020TYPE_STREET_NAME\020w"
  "\022\"\n\036TYPE_DIRECTION_PREANNOUNCEMENT\020x\022.\n*"
  "TYPE_DIRECTION_PREANNOUNCEMENT_LANE_CONF"
  "IG\020y\0222\n.TYPE_DIRECTION_PREANNOUNCEMENT_H"
  "IGHWAY_ENTRIES\020z\022\035\n\031TYPE_HIGHWAY_ANNOUNC"
  "EMENT\020{\022 \n\034TYPE_OTHER_ROAD_ANNOUNCEMENT\020"
  "|\022(\n$TYPE_HIGHWAY_ANNOUNCEMENT_TRUCK_STO"
  "P\020}\022+\n\'TYPE_HIGHWAY_PREANNOUNCEMENT_DIRE"
  "CTIONS\020~\022\022\n\016TYPE_POLE_EXIT\020X\022 \n\033TYPE_HIG"
  "HWAY_DISTANCE_BOARD\020\264\001\022\025\n\020TYPE_DETOUR_LE"
  "FT\020\265\001\022\026\n\021TYPE_DETOUR_RIGHT\020\266\001\022\031\n\024TYPE_NU"
  "MBERED_DETOUR\020\203\001\022\026\n\021TYPE_DETOUR_BEGIN\020\204\001"
  "\022\024\n\017TYPE_DETOUR_END\020\205\001\022\036\n\031TYPE_DETOUR_RO"
  "UTING_BOARD\020\206\001\022\030\n\024TYPE_OPTIONAL_DETOUR\020o"
  "\022!\n\034TYPE_OPTIONAL_DETOUR_ROUTING\020\307\001\022\036\n\031T"
  "YPE_ROUTE_RECOMMENDATION\020\323\001\022\"\n\035TYPE_ROUT"
  "E_RECOMMENDATION_END\020\324\001\022\'\n\"TYPE_ANNOUNCE"
  "_LANE_TRANSITION_LEFT\020\300\001\022(\n#TYPE_ANNOUNC"
  "E_LANE_TRANSITION_RIGHT\020\301\001\022 \n\034TYPE_ANNOU"
  "NCE_RIGHT_LANE_END\020Z\022\037\n\033TYPE_ANNOUNCE_LE"
  "FT_LANE_END\020Y\022\"\n\036TYPE_ANNOUNCE_RIGHT_LAN"
  "E_BEGIN\020s\022!\n\035TYPE_ANNOUNCE_LEFT_LANE_BEG"
  "IN\020t\022$\n TYPE_ANNOUNCE_LANE_CONSOLIDATION"
  "\020u\022\033\n\026TYPE_DETOUR_CITY_BLOCK\020\216\001\022\016\n\tTYPE_"
  "GATE\020\215\001\022\025\n\021TYPE_POLE_WARNING\020[\022\026\n\021TYPE_T"
  "RAFFIC_CONE\020\214\001\022\035\n\030TYPE_MOBILE_LANE_CLOSU"
  "RE\020\213\001\022\027\n\023TYPE_REFLECTOR_POST\020r\022\"\n\036TYPE_D"
  "IRECTIONAL_BOARD_WARNING\020q\022\026\n\022TYPE_GUIDI"
  "NG_PLATE\020h\022\035\n\031TYPE_GUIDING_PLATE_WEDGES\020"
  "i\022\027\n\023TYPE_PARKING_HAZARD\020c\022\"\n\036TYPE_TRAFF"
  "IC_LIGHT_GREEN_ARROW\020\\\"\277\001\n\016DirectionScop"
  "e\022\033\n\027DIRECTION_SCOPE_UNKNOWN\020\000\022\031\n\025DIRECT"
  "ION_SCOPE_OTHER\020\001\022 \n\034DIRECTION_SCOPE_NO_"
  "DIRECTION\020\002\022\030\n\024DIRECTION_SCOPE_LEFT\020\003\022\031\n"
  "\025DIRECTION_SCOPE_RIGHT\020\004\022\036\n\032DIRECTION_SC"
  "OPE_LEFT_RIGHT\020\005\032\303#\n\021SupplementarySign\022\""
  "\n\004base\030\001 \001(\0132\024.osi3.BaseStationary\022J\n\016cl"
  "assification\030\002 \001(\01322.osi3.TrafficSign.Su"
  "pplementarySign.Classification\022\027\n\017model_"
  "reference\030\003 \001(\t\032\244\"\n\016Classification\0222\n\013va"
  "riability\030\001 \001(\0162\035.osi3.TrafficSign.Varia"
  "bility\022E\n\004type\030\002 \001(\01627.osi3.TrafficSign."
  "SupplementarySign.Classification.Type\022%\n"
  "\005value\030\003 \003(\0132\026.osi3.TrafficSignValue\022*\n\020"
  "assigned_lane_id\030\004 \003(\0132\020.osi3.Identifier"
  "\022G\n\005actor\030\005 \003(\01628.osi3.TrafficSign.Suppl"
  "ementarySign.Classification.Actor\022G\n\005arr"
  "ow\030\006 \003(\01328.osi3.TrafficSign.Supplementar"
  "ySign.Classification.Arrow\022\031\n\021is_out_of_"
  "service\030\007 \001(\010\022\017\n\007country\030\010 \001(\t\022\030\n\020countr"
  "y_revision\030\t \001(\t\022\014\n\004code\030\n \001(\t\022\020\n\010sub_co"
  "de\030\013 \001(\t\032\222\n\n\005Arrow\022!\n\007lane_id\030\001 \003(\0132\020.os"
  "i3.Identifier\022U\n\tdirection\030\002 \003(\0162B.osi3."
  "TrafficSign.SupplementarySign.Classifica"
  "tion.Arrow.Direction\"\216\t\n\tDirection\022\025\n\021DI"
  "RECTION_UNKNOWN\020\000\022\023\n\017DIRECTION_OTHER\020\001\022\032"
  "\n\026DIRECTION_NO_DIRECTION\020\002\022\032\n\026DIRECTION_"
  "DIRECT_0_DEG\020\003\022!\n\035DIRECTION_DIRECT_45_DE"
  "G_RIGHT\020\004\022 \n\034DIRECTION_DIRECT_45_DEG_LEF"
  "T\020\005\022!\n\035DIRECTION_DIRECT_90_DEG_RIGHT\020\006\022 "
  "\n\034DIRECTION_DIRECT_90_DEG_LEFT\020\007\022\"\n\036DIRE"
  "CTION_DIRECT_135_DEG_RIGHT\020\010\022!\n\035DIRECTIO"
  "N_DIRECT_135_DEG_LEFT\020\t\022\034\n\030DIRECTION_DIR"
  "ECT_180_DEG\020\n\022\037\n\033DIRECTION_TURN_45_DEG_R"
  "IGHT\020\013\022\036\n\032DIRECTION_TURN_45_DEG_LEFT\020\014\022\037"
  "\n\033DIRECTION_TURN_90_DEG_RIGHT\020\r\022\036\n\032DIREC"
  "TION_TURN_90_DEG_LEFT\020\016\022 \n\034DIRECTION_TUR"
  "N_135_DEG_RIGHT\020\017\022\037\n\033DIRECTION_TURN_135_"
  "DEG_LEFT\020\020\022 \n\034DIRECTION_TURN_180_DEG_RIG"
  "HT\020\021\022\037\n\033DIRECTION_TURN_180_DEG_LEFT\020\022\022\032\n"
  "\026DIRECTION_CIRCLE_0_DEG\020\023\022!\n\035DIRECTION_C"
  "IRCLE_45_DEG_RIGHT\020\024\022 \n\034DIRECTION_CIRCLE"
  "_45_DEG_LEFT\020\025\022!\n\035DIRECTION_CIRCLE_90_DE"
  "G_RIGHT\020\026\022 \n\034DIRECTION_CIRCLE_90_DEG_LEF"
  "T\020\027\022\"\n\036DIRECTION_CIRCLE_135_DEG_RIGHT\020\030\022"
  "!\n\035DIRECTION_CIRCLE_135_DEG_LEFT\020\031\022\034\n\030DI"
  "RECTION_CIRCLE_180_DEG\020\032\022%\n!DIRECTION_KE"
  "EP_LEFT_TO_TURN_0_DEG\020\033\022&\n\"DIRECTION_KEE"
  "P_RIGHT_TO_TURN_0_DEG\020\034\022,\n(DIRECTION_KEE"
  "P_LEFT_TO_TURN_90_DEG_RIGHT\020\035\022,\n(DIRECTI"
  "ON_KEEP_RIGHT_TO_TURN_90_DEG_LEFT\020\036\0227\n3D"
  "IRECTION_KEEP_LEFT_DRIVE_BACK_TO_TURN_90"
  "_DEG_RIGHT\020\037\0227\n3DIRECTION_KEEP_RIGHT_DRI"
  "VE_BACK_TO_TURN_90_DEG_LEFT\020 \"\265\n\n\004Type\022\020"
  "\n\014TYPE_UNKNOWN\020\000\022\016\n\nTYPE_OTHER\020\001\022\020\n\014TYPE"
  "_NO_SIGN\020\002\022\r\n\tTYPE_TEXT\020)\022\016\n\nTYPE_SPACE\020"
  "\'\022\r\n\tTYPE_TIME\020\032\022\016\n\nTYPE_ARROW\020\036\022\027\n\023TYPE"
  "_CONSTRAINED_TO\020.\022\017\n\013TYPE_EXCEPT\020-\022\033\n\027TY"
  "PE_VALID_FOR_DISTANCE\020\003\022+\n\'TYPE_PRIORITY"
  "_ROAD_BOTTOM_LEFT_FOUR_WAY\020\033\022(\n$TYPE_PRI"
  "ORITY_ROAD_TOP_LEFT_FOUR_WAY\020\034\0225\n1TYPE_P"
  "RIORITY_ROAD_BOTTOM_LEFT_THREE_WAY_STRAI"
  "GHT\020 \0225\n1TYPE_PRIORITY_ROAD_BOTTOM_LEFT_"
  "THREE_WAY_SIDEWAYS\020!\0222\n.TYPE_PRIORITY_RO"
  "AD_TOP_LEFT_THREE_WAY_STRAIGHT\020\"\022,\n(TYPE"
  "_PRIORITY_ROAD_BOTTOM_RIGHT_FOUR_WAY\020\035\022)"
  "\n%TYPE_PRIORITY_ROAD_TOP_RIGHT_FOUR_WAY\020"
  "\037\0226\n2TYPE_PRIORITY_ROAD_BOTTOM_RIGHT_THR"
  "EE_WAY_STRAIGHT\020#\0225\n1TYPE_PRIORITY_ROAD_"
  "BOTTOM_RIGHT_THREE_WAY_SIDEWAY\020$\0223\n/TYPE"
  "_PRIORITY_ROAD_TOP_RIGHT_THREE_WAY_STRAI"
  "GHT\020%\022\032\n\026TYPE_VALID_IN_DISTANCE\020\004\022\020\n\014TYP"
  "E_STOP_IN\020\031\022\023\n\017TYPE_LEFT_ARROW\020\013\022\030\n\024TYPE"
  "_LEFT_BEND_ARROW\020\r\022\024\n\020TYPE_RIGHT_ARROW\020\014"
  "\022\031\n\025TYPE_RIGHT_BEND_ARROW\020\016\022\021\n\rTYPE_ACCI"
  "DENT\020(\022\r\n\tTYPE_SNOW\020\t\022\014\n\010TYPE_FOG\020\010\022$\n T"
  "YPE_ROLLING_HIGHWAY_INFORMATION\0200\022\021\n\rTYP"
  "E_SERVICES\020/\022\023\n\017TYPE_TIME_RANGE\020\005\022&\n\"TYP"
  "E_PARKING_DISC_TIME_RESTRICTION\020+\022\017\n\013TYP"
  "E_WEIGHT\020\006\022\014\n\010TYPE_WET\020,\022\033\n\027TYPE_PARKING"
  "_CONSTRAINT\020*\022 \n\034TYPE_NO_WAITING_SIDE_ST"
  "RIPES\020&\022\r\n\tTYPE_RAIN\020\007\022\022\n\016TYPE_SNOW_RAIN"
  "\020\n\022\016\n\nTYPE_NIGHT\020\023\022\023\n\017TYPE_STOP_4_WAY\020\025\022"
  "\016\n\nTYPE_TRUCK\020\017\022\037\n\033TYPE_TRACTORS_MAY_BE_"
  "PASSED\020\020\022\022\n\016TYPE_HAZARDOUS\020\021\022\020\n\014TYPE_TRA"
  "ILER\020\022\022\r\n\tTYPE_ZONE\020\024\022\023\n\017TYPE_MOTORCYCLE"
  "\020\026\022\033\n\027TYPE_MOTORCYCLE_ALLOWED\020\027\022\014\n\010TYPE_"
  "CAR\020\030\"\376\t\n\005Actor\022\021\n\rACTOR_UNKNOWN\020\000\022\017\n\013AC"
  "TOR_OTHER\020\001\022\022\n\016ACTOR_NO_ACTOR\020\002\022\037\n\033ACTOR"
  "_AGRICULTURAL_VEHICLES\020\003\022\022\n\016ACTOR_BICYCL"
  "ES\020\004\022\017\n\013ACTOR_BUSES\020\005\022\021\n\rACTOR_CAMPERS\020\006"
  "\022\022\n\016ACTOR_CARAVANS\020\007\022\016\n\nACTOR_CARS\020\010\022\034\n\030"
  "ACTOR_CARS_WITH_CARAVANS\020\t\022\034\n\030ACTOR_CARS"
  "_WITH_TRAILERS\020\n\022\020\n\014ACTOR_CATTLE\020\013\022\022\n\016AC"
  "TOR_CHILDREN\020\014\022\037\n\033ACTOR_CONSTRUCTION_VEH"
  "ICLES\020\r\022\033\n\027ACTOR_DELIVERY_VEHICLES\020\016\022\032\n\026"
  "ACTOR_DISABLED_PERSONS\020\017\022\020\n\014ACTOR_EBIKES"
  "\020\020\022\033\n\027ACTOR_ELECTRIC_VEHICLES\020\021\022\034\n\030ACTOR"
  "_EMERGENCY_VEHICLES\020\022\022\025\n\021ACTOR_FERRY_USE"
  "RS\020\023\022\033\n\027ACTOR_FORESTRY_VEHICLES\020\024\022\"\n\036ACT"
  "OR_HAZARDOUS_GOODS_VEHICLES\020\025\022\031\n\025ACTOR_H"
  "ORSE_CARRIAGES\020\026\022\026\n\022ACTOR_HORSE_RIDERS\020\027"
  "\022\030\n\024ACTOR_INLINE_SKATERS\020\030\022\032\n\026ACTOR_MEDI"
  "CAL_VEHICLES\020\031\022\033\n\027ACTOR_MILITARY_VEHICLE"
  "S\020\032\022\020\n\014ACTOR_MOPEDS\020\033\022\025\n\021ACTOR_MOTORCYCL"
  "ES\020\034\022\'\n#ACTOR_MOTORIZED_MULTITRACK_VEHIC"
  "LES\020\035\022*\n&ACTOR_OPERATIONAL_AND_UTILITY_V"
  "EHICLES\020\036\022\025\n\021ACTOR_PEDESTRIANS\020\037\022#\n\037ACTO"
  "R_PUBLIC_TRANSPORT_VEHICLES\020 \022\032\n\026ACTOR_R"
  "AILROAD_TRAFFIC\020!\022\023\n\017ACTOR_RESIDENTS\020\"\022\032"
  "\n\026ACTOR_SLURRY_TRANSPORT\020#\022\017\n\013ACTOR_TAXI"
  "S\020$\022\022\n\016ACTOR_TRACTORS\020%\022\022\n\016ACTOR_TRAILER"
  "S\020&\022\017\n\013ACTOR_TRAMS\020\'\022\020\n\014ACTOR_TRUCKS\020(\022\""
  "\n\036ACTOR_TRUCKS_WITH_SEMITRAILERS\020)\022\036\n\032AC"
  "TOR_TRUCKS_WITH_TRAILERS\020*\022$\n ACTOR_VEHI"
  "CLES_WITH_GREEN_BADGES\020+\022\"\n\036ACTOR_VEHICL"
  "ES_WITH_RED_BADGES\020,\022%\n!ACTOR_VEHICLES_W"
  "ITH_YELLOW_BADGES\020-\022\"\n\036ACTOR_WATER_POLLU"
  "TANT_VEHICLES\020.\022\035\n\031ACTOR_WINTER_SPORTSPE"
  "OPLE\020/\"n\n\013Variability\022\027\n\023VARIABILITY_UNK"
  "NOWN\020\000\022\025\n\021VARIABILITY_OTHER\020\001\022\025\n\021VARIABI"
  "LITY_FIXED\020\002\022\030\n\024VARIABILITY_VARIABLE\020\003B\002"
  "H\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5ftrafficsign_2eproto_deps[1] = {
  &::descriptor_table_osi_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5ftrafficsign_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5ftrafficsign_2eproto = {
  false, false, 13602, descriptor_table_protodef_osi_5ftrafficsign_2eproto, "osi_trafficsign.proto", 
  &descriptor_table_osi_5ftrafficsign_2eproto_once, descriptor_table_osi_5ftrafficsign_2eproto_deps, 1, 7,
  schemas, file_default_instances, TableStruct_osi_5ftrafficsign_2eproto::offsets,
  file_level_metadata_osi_5ftrafficsign_2eproto, file_level_enum_descriptors_osi_5ftrafficsign_2eproto, file_level_service_descriptors_osi_5ftrafficsign_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_osi_5ftrafficsign_2eproto_getter() {
  return &descriptor_table_osi_5ftrafficsign_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_osi_5ftrafficsign_2eproto(&descriptor_table_osi_5ftrafficsign_2eproto);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficSignValue_Unit_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficsign_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficsign_2eproto[0];
}
bool TrafficSignValue_Unit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_UNKNOWN;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_OTHER;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_NO_UNIT;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_KILOMETER_PER_HOUR;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_MILE_PER_HOUR;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_METER;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_KILOMETER;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_FEET;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_MILE;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_METRIC_TON;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_LONG_TON;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_SHORT_TON;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_MINUTES;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_DAY;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_PERCENTAGE;
constexpr TrafficSignValue_Unit TrafficSignValue::Unit_MIN;
constexpr TrafficSignValue_Unit TrafficSignValue::Unit_MAX;
constexpr int TrafficSignValue::Unit_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficSign_MainSign_Classification_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficsign_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficsign_2eproto[1];
}
bool TrafficSign_MainSign_Classification_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_UNKNOWN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OTHER;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DANGER_SPOT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ZEBRA_CROSSING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_FLIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CATTLE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HORSE_RIDERS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_AMPHIBIANS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_FALLING_ROCKS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SNOW_OR_ICE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_LOOSE_GRAVEL;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_WATERSIDE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CLEARANCE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MOVABLE_BRIDGE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_RIGHT_BEFORE_LEFT_NEXT_INTERSECTION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TURN_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TURN_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DOUBLE_TURN_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DOUBLE_TURN_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HILL_DOWNWARDS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HILL_UPWARDS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_UNEVEN_ROAD;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROAD_SLIPPERY_WET_OR_DIRTY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDE_WINDS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROAD_NARROWING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROAD_NARROWING_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROAD_NARROWING_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROAD_WORKS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TRAFFIC_QUEUES;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TWO_WAY_TRAFFIC;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ATTENTION_TRAFFIC_LIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PEDESTRIANS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CHILDREN_CROSSING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CYCLE_ROUTE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DEER_CROSSING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_UNGATED_LEVEL_CROSSING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_LEVEL_CROSSING_MARKER;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_RAILWAY_TRAFFIC_PRIORITY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_GIVE_WAY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_STOP;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRIORITY_TO_OPPOSITE_DIRECTION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRIORITY_TO_OPPOSITE_DIRECTION_UPSIDE_DOWN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_LEFT_TURN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_RIGHT_TURN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_STRAIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_RIGHT_WAY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_LEFT_WAY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_RIGHT_TURN_AND_STRAIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_LEFT_TURN_AND_STRAIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_LEFT_TURN_AND_RIGHT_TURN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_LEFT_TURN_RIGHT_TURN_AND_STRAIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROUNDABOUT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ONEWAY_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ONEWAY_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PASS_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PASS_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDE_LANE_OPEN_FOR_TRAFFIC;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDE_LANE_CLOSED_FOR_TRAFFIC;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDE_LANE_CLOSING_FOR_TRAFFIC;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BUS_STOP;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TAXI_STAND;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BICYCLES_ONLY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HORSE_RIDERS_ONLY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PEDESTRIANS_ONLY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BICYCLES_PEDESTRIANS_SHARED_ONLY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BICYCLES_PEDESTRIANS_SEPARATED_LEFT_ONLY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BICYCLES_PEDESTRIANS_SEPARATED_RIGHT_ONLY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PEDESTRIAN_ZONE_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PEDESTRIAN_ZONE_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BICYCLE_ROAD_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BICYCLE_ROAD_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BUS_LANE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BUS_LANE_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BUS_LANE_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ALL_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MOTORIZED_MULTITRACK_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TRUCKS_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BICYCLES_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MOTORCYCLES_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MOPEDS_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HORSE_RIDERS_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HORSE_CARRIAGES_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CATTLE_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BUSES_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CARS_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CARS_TRAILERS_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TRUCKS_TRAILERS_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TRACTORS_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PEDESTRIANS_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MOTOR_VEHICLES_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HAZARDOUS_GOODS_VEHICLES_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OVER_WEIGHT_VEHICLES_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_VEHICLES_AXLE_OVER_WEIGHT_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_VEHICLES_EXCESS_WIDTH_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_VEHICLES_EXCESS_HEIGHT_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_VEHICLES_EXCESS_LENGTH_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DO_NOT_ENTER;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SNOW_CHAINS_REQUIRED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_WATER_POLLUTANT_VEHICLES_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ENVIRONMENTAL_ZONE_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ENVIRONMENTAL_ZONE_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NO_U_TURN_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NO_U_TURN_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_U_TURN_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_U_TURN_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MINIMUM_DISTANCE_FOR_TRUCKS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SPEED_LIMIT_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SPEED_LIMIT_ZONE_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SPEED_LIMIT_ZONE_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MINIMUM_SPEED_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OVERTAKING_BAN_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OVERTAKING_BAN_FOR_TRUCKS_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SPEED_LIMIT_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MINIMUM_SPEED_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OVERTAKING_BAN_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OVERTAKING_BAN_FOR_TRUCKS_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ALL_RESTRICTIONS_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NO_STOPPING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NO_PARKING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NO_PARKING_ZONE_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NO_PARKING_ZONE_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_RIGHT_OF_WAY_NEXT_INTERSECTION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_RIGHT_OF_WAY_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_RIGHT_OF_WAY_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRIORITY_OVER_OPPOSITE_DIRECTION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRIORITY_OVER_OPPOSITE_DIRECTION_UPSIDE_DOWN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOWN_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOWN_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CAR_PARKING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CAR_PARKING_ZONE_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CAR_PARKING_ZONE_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_HALF_PARKING_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_HALF_PARKING_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_PARKING_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_PARKING_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_PERPENDICULAR_HALF_PARKING_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_PERPENDICULAR_HALF_PARKING_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_PERPENDICULAR_PARKING_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_PERPENDICULAR_PARKING_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_LIVING_STREET_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_LIVING_STREET_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TUNNEL;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_EMERGENCY_STOPPING_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_EMERGENCY_STOPPING_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_EXPRESSWAY_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_EXPRESSWAY_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NAMED_HIGHWAY_EXIT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NAMED_EXPRESSWAY_EXIT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NAMED_ROAD_EXIT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_EXIT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_EXPRESSWAY_EXIT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ONEWAY_STREET;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CROSSING_GUARDS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DEADEND;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DEADEND_EXCLUDING_DESIGNATED_ACTORS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_FIRST_AID_STATION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_POLICE_STATION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TELEPHONE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_FILLING_STATION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HOTEL;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_INN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_KIOSK;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOILET;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CHAPEL;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOURIST_INFO;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_REPAIR_SERVICE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PEDESTRIAN_UNDERPASS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PEDESTRIAN_BRIDGE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CAMPER_PLACE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ADVISORY_SPEED_LIMIT_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ADVISORY_SPEED_LIMIT_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PLACE_NAME;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOURIST_ATTRACTION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOURIST_ROUTE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOURIST_AREA;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SHOULDER_NOT_PASSABLE_MOTOR_VEHICLES;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SHOULDER_UNSAFE_TRUCKS_TRACTORS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOLL_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOLL_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOLL_ROAD;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CUSTOMS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_INTERNATIONAL_BORDER_INFO;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_STREETLIGHT_RED_BAND;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_FEDERAL_HIGHWAY_ROUTE_NUMBER;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_ROUTE_NUMBER;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_INTERCHANGE_NUMBER;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_EUROPEAN_ROUTE_NUMBER;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_FEDERAL_HIGHWAY_DIRECTION_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_FEDERAL_HIGHWAY_DIRECTION_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRIMARY_ROAD_DIRECTION_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRIMARY_ROAD_DIRECTION_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SECONDARY_ROAD_DIRECTION_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SECONDARY_ROAD_DIRECTION_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_DESIGNATED_ACTORS_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_DESIGNATED_ACTORS_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROUTING_DESIGNATED_ACTORS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_TO_HIGHWAY_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_TO_HIGHWAY_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_TO_LOCAL_DESTINATION_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_TO_LOCAL_DESTINATION_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CONSOLIDATED_DIRECTIONS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_STREET_NAME;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_PREANNOUNCEMENT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_PREANNOUNCEMENT_LANE_CONFIG;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_PREANNOUNCEMENT_HIGHWAY_ENTRIES;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_ANNOUNCEMENT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OTHER_ROAD_ANNOUNCEMENT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_ANNOUNCEMENT_TRUCK_STOP;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_PREANNOUNCEMENT_DIRECTIONS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_POLE_EXIT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_DISTANCE_BOARD;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DETOUR_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DETOUR_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NUMBERED_DETOUR;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DETOUR_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DETOUR_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DETOUR_ROUTING_BOARD;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OPTIONAL_DETOUR;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OPTIONAL_DETOUR_ROUTING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROUTE_RECOMMENDATION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROUTE_RECOMMENDATION_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ANNOUNCE_LANE_TRANSITION_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ANNOUNCE_LANE_TRANSITION_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ANNOUNCE_RIGHT_LANE_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ANNOUNCE_LEFT_LANE_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ANNOUNCE_RIGHT_LANE_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ANNOUNCE_LEFT_LANE_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ANNOUNCE_LANE_CONSOLIDATION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DETOUR_CITY_BLOCK;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_GATE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_POLE_WARNING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TRAFFIC_CONE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MOBILE_LANE_CLOSURE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_REFLECTOR_POST;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTIONAL_BOARD_WARNING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_GUIDING_PLATE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_GUIDING_PLATE_WEDGES;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PARKING_HAZARD;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TRAFFIC_LIGHT_GREEN_ARROW;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::Type_MIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::Type_MAX;
constexpr int TrafficSign_MainSign_Classification::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficSign_MainSign_Classification_DirectionScope_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficsign_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficsign_2eproto[2];
}
bool TrafficSign_MainSign_Classification_DirectionScope_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DIRECTION_SCOPE_UNKNOWN;
constexpr TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DIRECTION_SCOPE_OTHER;
constexpr TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DIRECTION_SCOPE_NO_DIRECTION;
constexpr TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DIRECTION_SCOPE_LEFT;
constexpr TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DIRECTION_SCOPE_RIGHT;
constexpr TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DIRECTION_SCOPE_LEFT_RIGHT;
constexpr TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DirectionScope_MIN;
constexpr TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DirectionScope_MAX;
constexpr int TrafficSign_MainSign_Classification::DirectionScope_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficSign_SupplementarySign_Classification_Arrow_Direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficsign_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficsign_2eproto[3];
}
bool TrafficSign_SupplementarySign_Classification_Arrow_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_UNKNOWN;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_OTHER;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_NO_DIRECTION;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_0_DEG;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_45_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_45_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_90_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_90_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_135_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_135_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_180_DEG;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_45_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_45_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_90_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_90_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_135_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_135_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_180_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_180_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_0_DEG;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_45_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_45_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_90_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_90_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_135_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_135_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_180_DEG;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_KEEP_LEFT_TO_TURN_0_DEG;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_KEEP_RIGHT_TO_TURN_0_DEG;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_KEEP_LEFT_TO_TURN_90_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_KEEP_RIGHT_TO_TURN_90_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_KEEP_LEFT_DRIVE_BACK_TO_TURN_90_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_KEEP_RIGHT_DRIVE_BACK_TO_TURN_90_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::Direction_MIN;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::Direction_MAX;
constexpr int TrafficSign_SupplementarySign_Classification_Arrow::Direction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficSign_SupplementarySign_Classification_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficsign_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficsign_2eproto[4];
}
bool TrafficSign_SupplementarySign_Classification_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_UNKNOWN;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_OTHER;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_NO_SIGN;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_TEXT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_SPACE;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_TIME;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_ARROW;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_CONSTRAINED_TO;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_EXCEPT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_VALID_FOR_DISTANCE;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_BOTTOM_LEFT_FOUR_WAY;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_TOP_LEFT_FOUR_WAY;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_BOTTOM_LEFT_THREE_WAY_STRAIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_BOTTOM_LEFT_THREE_WAY_SIDEWAYS;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_TOP_LEFT_THREE_WAY_STRAIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_BOTTOM_RIGHT_FOUR_WAY;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_TOP_RIGHT_FOUR_WAY;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_BOTTOM_RIGHT_THREE_WAY_STRAIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_BOTTOM_RIGHT_THREE_WAY_SIDEWAY;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_TOP_RIGHT_THREE_WAY_STRAIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_VALID_IN_DISTANCE;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_STOP_IN;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_LEFT_ARROW;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_LEFT_BEND_ARROW;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_RIGHT_ARROW;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_RIGHT_BEND_ARROW;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_ACCIDENT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_SNOW;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_FOG;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_ROLLING_HIGHWAY_INFORMATION;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_SERVICES;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_TIME_RANGE;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PARKING_DISC_TIME_RESTRICTION;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_WEIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_WET;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PARKING_CONSTRAINT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_NO_WAITING_SIDE_STRIPES;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_RAIN;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_SNOW_RAIN;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_NIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_STOP_4_WAY;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_TRUCK;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_TRACTORS_MAY_BE_PASSED;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_HAZARDOUS;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_TRAILER;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_ZONE;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_MOTORCYCLE;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_MOTORCYCLE_ALLOWED;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_CAR;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::Type_MIN;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::Type_MAX;
constexpr int TrafficSign_SupplementarySign_Classification::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficSign_SupplementarySign_Classification_Actor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficsign_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficsign_2eproto[5];
}
bool TrafficSign_SupplementarySign_Classification_Actor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_UNKNOWN;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_OTHER;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_NO_ACTOR;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_AGRICULTURAL_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_BICYCLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_BUSES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CAMPERS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CARAVANS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CARS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CARS_WITH_CARAVANS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CARS_WITH_TRAILERS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CATTLE;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CHILDREN;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CONSTRUCTION_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_DELIVERY_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_DISABLED_PERSONS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_EBIKES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_ELECTRIC_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_EMERGENCY_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_FERRY_USERS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_FORESTRY_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_HAZARDOUS_GOODS_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_HORSE_CARRIAGES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_HORSE_RIDERS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_INLINE_SKATERS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_MEDICAL_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_MILITARY_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_MOPEDS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_MOTORCYCLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_MOTORIZED_MULTITRACK_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_OPERATIONAL_AND_UTILITY_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_PEDESTRIANS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_PUBLIC_TRANSPORT_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_RAILROAD_TRAFFIC;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_RESIDENTS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_SLURRY_TRANSPORT;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_TAXIS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_TRACTORS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_TRAILERS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_TRAMS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_TRUCKS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_TRUCKS_WITH_SEMITRAILERS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_TRUCKS_WITH_TRAILERS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_VEHICLES_WITH_GREEN_BADGES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_VEHICLES_WITH_RED_BADGES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_VEHICLES_WITH_YELLOW_BADGES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_WATER_POLLUTANT_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_WINTER_SPORTSPEOPLE;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::Actor_MIN;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::Actor_MAX;
constexpr int TrafficSign_SupplementarySign_Classification::Actor_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficSign_Variability_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficsign_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficsign_2eproto[6];
}
bool TrafficSign_Variability_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficSign_Variability TrafficSign::VARIABILITY_UNKNOWN;
constexpr TrafficSign_Variability TrafficSign::VARIABILITY_OTHER;
constexpr TrafficSign_Variability TrafficSign::VARIABILITY_FIXED;
constexpr TrafficSign_Variability TrafficSign::VARIABILITY_VARIABLE;
constexpr TrafficSign_Variability TrafficSign::Variability_MIN;
constexpr TrafficSign_Variability TrafficSign::Variability_MAX;
constexpr int TrafficSign::Variability_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class TrafficSignValue::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficSignValue>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrafficSignValue::TrafficSignValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficSignValue)
}
TrafficSignValue::TrafficSignValue(const TrafficSignValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_unit_) -
    reinterpret_cast<char*>(&value_)) + sizeof(value_unit_));
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficSignValue)
}

void TrafficSignValue::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_unit_) -
    reinterpret_cast<char*>(&value_)) + sizeof(value_unit_));
}

TrafficSignValue::~TrafficSignValue() {
  // @@protoc_insertion_point(destructor:osi3.TrafficSignValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficSignValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrafficSignValue::ArenaDtor(void* object) {
  TrafficSignValue* _this = reinterpret_cast< TrafficSignValue* >(object);
  (void)_this;
}
void TrafficSignValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficSignValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficSignValue::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficSignValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_unit_) -
        reinterpret_cast<char*>(&value_)) + sizeof(value_unit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficSignValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficSignValue.Unit value_unit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::TrafficSignValue_Unit_IsValid(val))) {
            _internal_set_value_unit(static_cast<::osi3::TrafficSignValue_Unit>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "osi3.TrafficSignValue.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficSignValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficSignValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double value = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  // optional .osi3.TrafficSignValue.Unit value_unit = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_value_unit(), target);
  }

  // optional string text = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.TrafficSignValue.text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficSignValue)
  return target;
}

size_t TrafficSignValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficSignValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string text = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional double value = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .osi3.TrafficSignValue.Unit value_unit = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value_unit());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficSignValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficSignValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficSignValue::GetClassData() const { return &_class_data_; }

void TrafficSignValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficSignValue *>(to)->MergeFrom(
      static_cast<const TrafficSignValue &>(from));
}


void TrafficSignValue::MergeFrom(const TrafficSignValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficSignValue)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      value_unit_ = from.value_unit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSignValue::CopyFrom(const TrafficSignValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficSignValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignValue::IsInitialized() const {
  return true;
}

void TrafficSignValue::InternalSwap(TrafficSignValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSignValue, value_unit_)
      + sizeof(TrafficSignValue::value_unit_)
      - PROTOBUF_FIELD_OFFSET(TrafficSignValue, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSignValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5ftrafficsign_2eproto_getter, &descriptor_table_osi_5ftrafficsign_2eproto_once,
      file_level_metadata_osi_5ftrafficsign_2eproto[0]);
}

// ===================================================================

class TrafficSign_MainSign_Classification::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficSign_MainSign_Classification>()._has_bits_);
  static void set_has_variability(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::osi3::TrafficSignValue& value(const TrafficSign_MainSign_Classification* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_direction_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_vertically_mirrored(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_out_of_service(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_country_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sub_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::osi3::TrafficSignValue&
TrafficSign_MainSign_Classification::_Internal::value(const TrafficSign_MainSign_Classification* msg) {
  return *msg->value_;
}
void TrafficSign_MainSign_Classification::clear_assigned_lane_id() {
  assigned_lane_id_.Clear();
}
TrafficSign_MainSign_Classification::TrafficSign_MainSign_Classification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  assigned_lane_id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficSign.MainSign.Classification)
}
TrafficSign_MainSign_Classification::TrafficSign_MainSign_Classification(const TrafficSign_MainSign_Classification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      assigned_lane_id_(from.assigned_lane_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country()) {
    country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country(), 
      GetArenaForAllocation());
  }
  country_revision_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country_revision()) {
    country_revision_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country_revision(), 
      GetArenaForAllocation());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_code()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  sub_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sub_code()) {
    sub_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sub_code(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new ::osi3::TrafficSignValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  ::memcpy(&variability_, &from.variability_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_out_of_service_) -
    reinterpret_cast<char*>(&variability_)) + sizeof(is_out_of_service_));
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficSign.MainSign.Classification)
}

void TrafficSign_MainSign_Classification::SharedCtor() {
country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
country_revision_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sub_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_out_of_service_) -
    reinterpret_cast<char*>(&value_)) + sizeof(is_out_of_service_));
}

TrafficSign_MainSign_Classification::~TrafficSign_MainSign_Classification() {
  // @@protoc_insertion_point(destructor:osi3.TrafficSign.MainSign.Classification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficSign_MainSign_Classification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_revision_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void TrafficSign_MainSign_Classification::ArenaDtor(void* object) {
  TrafficSign_MainSign_Classification* _this = reinterpret_cast< TrafficSign_MainSign_Classification* >(object);
  (void)_this;
}
void TrafficSign_MainSign_Classification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficSign_MainSign_Classification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficSign_MainSign_Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficSign.MainSign.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assigned_lane_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      country_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      country_revision_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      sub_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&variability_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&direction_scope_) -
        reinterpret_cast<char*>(&variability_)) + sizeof(direction_scope_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&vertically_mirrored_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_out_of_service_) -
        reinterpret_cast<char*>(&vertically_mirrored_)) + sizeof(is_out_of_service_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficSign_MainSign_Classification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.TrafficSign.Variability variability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::TrafficSign_Variability_IsValid(val))) {
            _internal_set_variability(static_cast<::osi3::TrafficSign_Variability>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficSign.MainSign.Classification.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::TrafficSign_MainSign_Classification_Type_IsValid(val))) {
            _internal_set_type(static_cast<::osi3::TrafficSign_MainSign_Classification_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficSignValue value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficSign.MainSign.Classification.DirectionScope direction_scope = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::TrafficSign_MainSign_Classification_DirectionScope_IsValid(val))) {
            _internal_set_direction_scope(static_cast<::osi3::TrafficSign_MainSign_Classification_DirectionScope>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Identifier assigned_lane_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assigned_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool vertically_mirrored = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_vertically_mirrored(&has_bits);
          vertically_mirrored_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_out_of_service = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_out_of_service(&has_bits);
          is_out_of_service_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string country = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "osi3.TrafficSign.MainSign.Classification.country");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string country_revision = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_country_revision();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "osi3.TrafficSign.MainSign.Classification.country_revision");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string code = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "osi3.TrafficSign.MainSign.Classification.code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string sub_code = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_sub_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "osi3.TrafficSign.MainSign.Classification.sub_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficSign_MainSign_Classification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficSign.MainSign.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.TrafficSign.Variability variability = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_variability(), target);
  }

  // optional .osi3.TrafficSign.MainSign.Classification.Type type = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional .osi3.TrafficSignValue value = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::value(this), target, stream);
  }

  // optional .osi3.TrafficSign.MainSign.Classification.DirectionScope direction_scope = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_direction_scope(), target);
  }

  // repeated .osi3.Identifier assigned_lane_id = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_assigned_lane_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_assigned_lane_id(i), target, stream);
  }

  // optional bool vertically_mirrored = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_vertically_mirrored(), target);
  }

  // optional bool is_out_of_service = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_out_of_service(), target);
  }

  // optional string country = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.TrafficSign.MainSign.Classification.country");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_country(), target);
  }

  // optional string country_revision = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_revision().data(), static_cast<int>(this->_internal_country_revision().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.TrafficSign.MainSign.Classification.country_revision");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_country_revision(), target);
  }

  // optional string code = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.TrafficSign.MainSign.Classification.code");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_code(), target);
  }

  // optional string sub_code = 11;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sub_code().data(), static_cast<int>(this->_internal_sub_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.TrafficSign.MainSign.Classification.sub_code");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_sub_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficSign.MainSign.Classification)
  return target;
}

size_t TrafficSign_MainSign_Classification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficSign.MainSign.Classification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Identifier assigned_lane_id = 5;
  total_size += 1UL * this->_internal_assigned_lane_id_size();
  for (const auto& msg : this->assigned_lane_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string country = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country());
    }

    // optional string country_revision = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_revision());
    }

    // optional string code = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code());
    }

    // optional string sub_code = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sub_code());
    }

    // optional .osi3.TrafficSignValue value = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_);
    }

    // optional .osi3.TrafficSign.Variability variability = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_variability());
    }

    // optional .osi3.TrafficSign.MainSign.Classification.Type type = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .osi3.TrafficSign.MainSign.Classification.DirectionScope direction_scope = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction_scope());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool vertically_mirrored = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool is_out_of_service = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficSign_MainSign_Classification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficSign_MainSign_Classification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficSign_MainSign_Classification::GetClassData() const { return &_class_data_; }

void TrafficSign_MainSign_Classification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficSign_MainSign_Classification *>(to)->MergeFrom(
      static_cast<const TrafficSign_MainSign_Classification &>(from));
}


void TrafficSign_MainSign_Classification::MergeFrom(const TrafficSign_MainSign_Classification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficSign.MainSign.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assigned_lane_id_.MergeFrom(from.assigned_lane_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_country(from._internal_country());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_country_revision(from._internal_country_revision());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_code(from._internal_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_sub_code(from._internal_sub_code());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_value()->::osi3::TrafficSignValue::MergeFrom(from._internal_value());
    }
    if (cached_has_bits & 0x00000020u) {
      variability_ = from.variability_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      direction_scope_ = from.direction_scope_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      vertically_mirrored_ = from.vertically_mirrored_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_out_of_service_ = from.is_out_of_service_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSign_MainSign_Classification::CopyFrom(const TrafficSign_MainSign_Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficSign.MainSign.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign_MainSign_Classification::IsInitialized() const {
  return true;
}

void TrafficSign_MainSign_Classification::InternalSwap(TrafficSign_MainSign_Classification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  assigned_lane_id_.InternalSwap(&other->assigned_lane_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &country_, lhs_arena,
      &other->country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &country_revision_, lhs_arena,
      &other->country_revision_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, lhs_arena,
      &other->code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sub_code_, lhs_arena,
      &other->sub_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSign_MainSign_Classification, is_out_of_service_)
      + sizeof(TrafficSign_MainSign_Classification::is_out_of_service_)
      - PROTOBUF_FIELD_OFFSET(TrafficSign_MainSign_Classification, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSign_MainSign_Classification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5ftrafficsign_2eproto_getter, &descriptor_table_osi_5ftrafficsign_2eproto_once,
      file_level_metadata_osi_5ftrafficsign_2eproto[1]);
}

// ===================================================================

class TrafficSign_MainSign::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficSign_MainSign>()._has_bits_);
  static const ::osi3::BaseStationary& base(const TrafficSign_MainSign* msg);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::TrafficSign_MainSign_Classification& classification(const TrafficSign_MainSign* msg);
  static void set_has_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_model_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osi3::BaseStationary&
TrafficSign_MainSign::_Internal::base(const TrafficSign_MainSign* msg) {
  return *msg->base_;
}
const ::osi3::TrafficSign_MainSign_Classification&
TrafficSign_MainSign::_Internal::classification(const TrafficSign_MainSign* msg) {
  return *msg->classification_;
}
void TrafficSign_MainSign::clear_base() {
  if (base_ != nullptr) base_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
TrafficSign_MainSign::TrafficSign_MainSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficSign.MainSign)
}
TrafficSign_MainSign::TrafficSign_MainSign(const TrafficSign_MainSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_model_reference()) {
    model_reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_reference(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    base_ = new ::osi3::BaseStationary(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_classification()) {
    classification_ = new ::osi3::TrafficSign_MainSign_Classification(*from.classification_);
  } else {
    classification_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficSign.MainSign)
}

void TrafficSign_MainSign::SharedCtor() {
model_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&classification_) -
    reinterpret_cast<char*>(&base_)) + sizeof(classification_));
}

TrafficSign_MainSign::~TrafficSign_MainSign() {
  // @@protoc_insertion_point(destructor:osi3.TrafficSign.MainSign)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficSign_MainSign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete classification_;
}

void TrafficSign_MainSign::ArenaDtor(void* object) {
  TrafficSign_MainSign* _this = reinterpret_cast< TrafficSign_MainSign* >(object);
  (void)_this;
}
void TrafficSign_MainSign::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficSign_MainSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficSign_MainSign::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficSign.MainSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      model_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(base_ != nullptr);
      base_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(classification_ != nullptr);
      classification_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficSign_MainSign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.BaseStationary base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficSign.MainSign.Classification classification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_classification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string model_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_model_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "osi3.TrafficSign.MainSign.model_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficSign_MainSign::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficSign.MainSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.BaseStationary base = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // optional .osi3.TrafficSign.MainSign.Classification classification = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::classification(this), target, stream);
  }

  // optional string model_reference = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model_reference().data(), static_cast<int>(this->_internal_model_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.TrafficSign.MainSign.model_reference");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficSign.MainSign)
  return target;
}

size_t TrafficSign_MainSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficSign.MainSign)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string model_reference = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model_reference());
    }

    // optional .osi3.BaseStationary base = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *base_);
    }

    // optional .osi3.TrafficSign.MainSign.Classification classification = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *classification_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficSign_MainSign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficSign_MainSign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficSign_MainSign::GetClassData() const { return &_class_data_; }

void TrafficSign_MainSign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficSign_MainSign *>(to)->MergeFrom(
      static_cast<const TrafficSign_MainSign &>(from));
}


void TrafficSign_MainSign::MergeFrom(const TrafficSign_MainSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficSign.MainSign)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_model_reference(from._internal_model_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_base()->::osi3::BaseStationary::MergeFrom(from._internal_base());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_classification()->::osi3::TrafficSign_MainSign_Classification::MergeFrom(from._internal_classification());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSign_MainSign::CopyFrom(const TrafficSign_MainSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficSign.MainSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign_MainSign::IsInitialized() const {
  return true;
}

void TrafficSign_MainSign::InternalSwap(TrafficSign_MainSign* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_reference_, lhs_arena,
      &other->model_reference_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSign_MainSign, classification_)
      + sizeof(TrafficSign_MainSign::classification_)
      - PROTOBUF_FIELD_OFFSET(TrafficSign_MainSign, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSign_MainSign::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5ftrafficsign_2eproto_getter, &descriptor_table_osi_5ftrafficsign_2eproto_once,
      file_level_metadata_osi_5ftrafficsign_2eproto[2]);
}

// ===================================================================

class TrafficSign_SupplementarySign_Classification_Arrow::_Internal {
 public:
};

void TrafficSign_SupplementarySign_Classification_Arrow::clear_lane_id() {
  lane_id_.Clear();
}
TrafficSign_SupplementarySign_Classification_Arrow::TrafficSign_SupplementarySign_Classification_Arrow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  lane_id_(arena),
  direction_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
}
TrafficSign_SupplementarySign_Classification_Arrow::TrafficSign_SupplementarySign_Classification_Arrow(const TrafficSign_SupplementarySign_Classification_Arrow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lane_id_(from.lane_id_),
      direction_(from.direction_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
}

void TrafficSign_SupplementarySign_Classification_Arrow::SharedCtor() {
}

TrafficSign_SupplementarySign_Classification_Arrow::~TrafficSign_SupplementarySign_Classification_Arrow() {
  // @@protoc_insertion_point(destructor:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficSign_SupplementarySign_Classification_Arrow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrafficSign_SupplementarySign_Classification_Arrow::ArenaDtor(void* object) {
  TrafficSign_SupplementarySign_Classification_Arrow* _this = reinterpret_cast< TrafficSign_SupplementarySign_Classification_Arrow* >(object);
  (void)_this;
}
void TrafficSign_SupplementarySign_Classification_Arrow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficSign_SupplementarySign_Classification_Arrow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficSign_SupplementarySign_Classification_Arrow::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_id_.Clear();
  direction_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficSign_SupplementarySign_Classification_Arrow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .osi3.Identifier lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow.Direction direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::osi3::TrafficSign_SupplementarySign_Classification_Arrow_Direction_IsValid(val))) {
              _internal_add_direction(static_cast<::osi3::TrafficSign_SupplementarySign_Classification_Arrow_Direction>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_direction(), ptr, ctx, ::osi3::TrafficSign_SupplementarySign_Classification_Arrow_Direction_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficSign_SupplementarySign_Classification_Arrow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .osi3.Identifier lane_id = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lane_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_lane_id(i), target, stream);
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow.Direction direction = 2;
  for (int i = 0, n = this->_internal_direction_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        2, this->_internal_direction(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  return target;
}

size_t TrafficSign_SupplementarySign_Classification_Arrow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Identifier lane_id = 1;
  total_size += 1UL * this->_internal_lane_id_size();
  for (const auto& msg : this->lane_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow.Direction direction = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_direction_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_direction(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficSign_SupplementarySign_Classification_Arrow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficSign_SupplementarySign_Classification_Arrow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficSign_SupplementarySign_Classification_Arrow::GetClassData() const { return &_class_data_; }

void TrafficSign_SupplementarySign_Classification_Arrow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficSign_SupplementarySign_Classification_Arrow *>(to)->MergeFrom(
      static_cast<const TrafficSign_SupplementarySign_Classification_Arrow &>(from));
}


void TrafficSign_SupplementarySign_Classification_Arrow::MergeFrom(const TrafficSign_SupplementarySign_Classification_Arrow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_id_.MergeFrom(from.lane_id_);
  direction_.MergeFrom(from.direction_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSign_SupplementarySign_Classification_Arrow::CopyFrom(const TrafficSign_SupplementarySign_Classification_Arrow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign_SupplementarySign_Classification_Arrow::IsInitialized() const {
  return true;
}

void TrafficSign_SupplementarySign_Classification_Arrow::InternalSwap(TrafficSign_SupplementarySign_Classification_Arrow* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  lane_id_.InternalSwap(&other->lane_id_);
  direction_.InternalSwap(&other->direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSign_SupplementarySign_Classification_Arrow::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5ftrafficsign_2eproto_getter, &descriptor_table_osi_5ftrafficsign_2eproto_once,
      file_level_metadata_osi_5ftrafficsign_2eproto[3]);
}

// ===================================================================

class TrafficSign_SupplementarySign_Classification::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficSign_SupplementarySign_Classification>()._has_bits_);
  static void set_has_variability(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_out_of_service(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_country_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sub_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

void TrafficSign_SupplementarySign_Classification::clear_assigned_lane_id() {
  assigned_lane_id_.Clear();
}
TrafficSign_SupplementarySign_Classification::TrafficSign_SupplementarySign_Classification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_(arena),
  assigned_lane_id_(arena),
  actor_(arena),
  arrow_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficSign.SupplementarySign.Classification)
}
TrafficSign_SupplementarySign_Classification::TrafficSign_SupplementarySign_Classification(const TrafficSign_SupplementarySign_Classification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      value_(from.value_),
      assigned_lane_id_(from.assigned_lane_id_),
      actor_(from.actor_),
      arrow_(from.arrow_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country()) {
    country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country(), 
      GetArenaForAllocation());
  }
  country_revision_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country_revision()) {
    country_revision_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country_revision(), 
      GetArenaForAllocation());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_code()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  sub_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sub_code()) {
    sub_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sub_code(), 
      GetArenaForAllocation());
  }
  ::memcpy(&variability_, &from.variability_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_out_of_service_) -
    reinterpret_cast<char*>(&variability_)) + sizeof(is_out_of_service_));
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficSign.SupplementarySign.Classification)
}

void TrafficSign_SupplementarySign_Classification::SharedCtor() {
country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
country_revision_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sub_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&variability_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_out_of_service_) -
    reinterpret_cast<char*>(&variability_)) + sizeof(is_out_of_service_));
}

TrafficSign_SupplementarySign_Classification::~TrafficSign_SupplementarySign_Classification() {
  // @@protoc_insertion_point(destructor:osi3.TrafficSign.SupplementarySign.Classification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficSign_SupplementarySign_Classification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_revision_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrafficSign_SupplementarySign_Classification::ArenaDtor(void* object) {
  TrafficSign_SupplementarySign_Classification* _this = reinterpret_cast< TrafficSign_SupplementarySign_Classification* >(object);
  (void)_this;
}
void TrafficSign_SupplementarySign_Classification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficSign_SupplementarySign_Classification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficSign_SupplementarySign_Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficSign.SupplementarySign.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  assigned_lane_id_.Clear();
  actor_.Clear();
  arrow_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      country_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      country_revision_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      sub_code_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&variability_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_out_of_service_) -
        reinterpret_cast<char*>(&variability_)) + sizeof(is_out_of_service_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficSign_SupplementarySign_Classification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.TrafficSign.Variability variability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::TrafficSign_Variability_IsValid(val))) {
            _internal_set_variability(static_cast<::osi3::TrafficSign_Variability>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficSign.SupplementarySign.Classification.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::TrafficSign_SupplementarySign_Classification_Type_IsValid(val))) {
            _internal_set_type(static_cast<::osi3::TrafficSign_SupplementarySign_Classification_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.TrafficSignValue value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Identifier assigned_lane_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assigned_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.TrafficSign.SupplementarySign.Classification.Actor actor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::osi3::TrafficSign_SupplementarySign_Classification_Actor_IsValid(val))) {
              _internal_add_actor(static_cast<::osi3::TrafficSign_SupplementarySign_Classification_Actor>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_actor(), ptr, ctx, ::osi3::TrafficSign_SupplementarySign_Classification_Actor_IsValid, &_internal_metadata_, 5);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow arrow = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arrow(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_out_of_service = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_out_of_service(&has_bits);
          is_out_of_service_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string country = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "osi3.TrafficSign.SupplementarySign.Classification.country");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string country_revision = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_country_revision();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "osi3.TrafficSign.SupplementarySign.Classification.country_revision");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string code = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "osi3.TrafficSign.SupplementarySign.Classification.code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string sub_code = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_sub_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "osi3.TrafficSign.SupplementarySign.Classification.sub_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficSign_SupplementarySign_Classification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficSign.SupplementarySign.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.TrafficSign.Variability variability = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_variability(), target);
  }

  // optional .osi3.TrafficSign.SupplementarySign.Classification.Type type = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // repeated .osi3.TrafficSignValue value = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_value(i), target, stream);
  }

  // repeated .osi3.Identifier assigned_lane_id = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_assigned_lane_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_assigned_lane_id(i), target, stream);
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Actor actor = 5;
  for (int i = 0, n = this->_internal_actor_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        5, this->_internal_actor(i), target);
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow arrow = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arrow_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_arrow(i), target, stream);
  }

  // optional bool is_out_of_service = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_out_of_service(), target);
  }

  // optional string country = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.TrafficSign.SupplementarySign.Classification.country");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_country(), target);
  }

  // optional string country_revision = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_revision().data(), static_cast<int>(this->_internal_country_revision().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.TrafficSign.SupplementarySign.Classification.country_revision");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_country_revision(), target);
  }

  // optional string code = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.TrafficSign.SupplementarySign.Classification.code");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_code(), target);
  }

  // optional string sub_code = 11;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sub_code().data(), static_cast<int>(this->_internal_sub_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.TrafficSign.SupplementarySign.Classification.sub_code");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_sub_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficSign.SupplementarySign.Classification)
  return target;
}

size_t TrafficSign_SupplementarySign_Classification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficSign.SupplementarySign.Classification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.TrafficSignValue value = 3;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.Identifier assigned_lane_id = 4;
  total_size += 1UL * this->_internal_assigned_lane_id_size();
  for (const auto& msg : this->assigned_lane_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Actor actor = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_actor_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_actor(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow arrow = 6;
  total_size += 1UL * this->_internal_arrow_size();
  for (const auto& msg : this->arrow_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string country = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country());
    }

    // optional string country_revision = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_revision());
    }

    // optional string code = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code());
    }

    // optional string sub_code = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sub_code());
    }

    // optional .osi3.TrafficSign.Variability variability = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_variability());
    }

    // optional .osi3.TrafficSign.SupplementarySign.Classification.Type type = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional bool is_out_of_service = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficSign_SupplementarySign_Classification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficSign_SupplementarySign_Classification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficSign_SupplementarySign_Classification::GetClassData() const { return &_class_data_; }

void TrafficSign_SupplementarySign_Classification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficSign_SupplementarySign_Classification *>(to)->MergeFrom(
      static_cast<const TrafficSign_SupplementarySign_Classification &>(from));
}


void TrafficSign_SupplementarySign_Classification::MergeFrom(const TrafficSign_SupplementarySign_Classification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficSign.SupplementarySign.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  assigned_lane_id_.MergeFrom(from.assigned_lane_id_);
  actor_.MergeFrom(from.actor_);
  arrow_.MergeFrom(from.arrow_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_country(from._internal_country());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_country_revision(from._internal_country_revision());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_code(from._internal_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_sub_code(from._internal_sub_code());
    }
    if (cached_has_bits & 0x00000010u) {
      variability_ = from.variability_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_out_of_service_ = from.is_out_of_service_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSign_SupplementarySign_Classification::CopyFrom(const TrafficSign_SupplementarySign_Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficSign.SupplementarySign.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign_SupplementarySign_Classification::IsInitialized() const {
  return true;
}

void TrafficSign_SupplementarySign_Classification::InternalSwap(TrafficSign_SupplementarySign_Classification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.InternalSwap(&other->value_);
  assigned_lane_id_.InternalSwap(&other->assigned_lane_id_);
  actor_.InternalSwap(&other->actor_);
  arrow_.InternalSwap(&other->arrow_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &country_, lhs_arena,
      &other->country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &country_revision_, lhs_arena,
      &other->country_revision_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, lhs_arena,
      &other->code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sub_code_, lhs_arena,
      &other->sub_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySign_Classification, is_out_of_service_)
      + sizeof(TrafficSign_SupplementarySign_Classification::is_out_of_service_)
      - PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySign_Classification, variability_)>(
          reinterpret_cast<char*>(&variability_),
          reinterpret_cast<char*>(&other->variability_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSign_SupplementarySign_Classification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5ftrafficsign_2eproto_getter, &descriptor_table_osi_5ftrafficsign_2eproto_once,
      file_level_metadata_osi_5ftrafficsign_2eproto[4]);
}

// ===================================================================

class TrafficSign_SupplementarySign::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficSign_SupplementarySign>()._has_bits_);
  static const ::osi3::BaseStationary& base(const TrafficSign_SupplementarySign* msg);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::TrafficSign_SupplementarySign_Classification& classification(const TrafficSign_SupplementarySign* msg);
  static void set_has_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_model_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osi3::BaseStationary&
TrafficSign_SupplementarySign::_Internal::base(const TrafficSign_SupplementarySign* msg) {
  return *msg->base_;
}
const ::osi3::TrafficSign_SupplementarySign_Classification&
TrafficSign_SupplementarySign::_Internal::classification(const TrafficSign_SupplementarySign* msg) {
  return *msg->classification_;
}
void TrafficSign_SupplementarySign::clear_base() {
  if (base_ != nullptr) base_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
TrafficSign_SupplementarySign::TrafficSign_SupplementarySign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficSign.SupplementarySign)
}
TrafficSign_SupplementarySign::TrafficSign_SupplementarySign(const TrafficSign_SupplementarySign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_model_reference()) {
    model_reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_reference(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    base_ = new ::osi3::BaseStationary(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_classification()) {
    classification_ = new ::osi3::TrafficSign_SupplementarySign_Classification(*from.classification_);
  } else {
    classification_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficSign.SupplementarySign)
}

void TrafficSign_SupplementarySign::SharedCtor() {
model_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&classification_) -
    reinterpret_cast<char*>(&base_)) + sizeof(classification_));
}

TrafficSign_SupplementarySign::~TrafficSign_SupplementarySign() {
  // @@protoc_insertion_point(destructor:osi3.TrafficSign.SupplementarySign)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficSign_SupplementarySign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete classification_;
}

void TrafficSign_SupplementarySign::ArenaDtor(void* object) {
  TrafficSign_SupplementarySign* _this = reinterpret_cast< TrafficSign_SupplementarySign* >(object);
  (void)_this;
}
void TrafficSign_SupplementarySign::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficSign_SupplementarySign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficSign_SupplementarySign::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficSign.SupplementarySign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      model_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(base_ != nullptr);
      base_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(classification_ != nullptr);
      classification_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficSign_SupplementarySign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.BaseStationary base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficSign.SupplementarySign.Classification classification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_classification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string model_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_model_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "osi3.TrafficSign.SupplementarySign.model_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficSign_SupplementarySign::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficSign.SupplementarySign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.BaseStationary base = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // optional .osi3.TrafficSign.SupplementarySign.Classification classification = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::classification(this), target, stream);
  }

  // optional string model_reference = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model_reference().data(), static_cast<int>(this->_internal_model_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.TrafficSign.SupplementarySign.model_reference");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficSign.SupplementarySign)
  return target;
}

size_t TrafficSign_SupplementarySign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficSign.SupplementarySign)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string model_reference = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model_reference());
    }

    // optional .osi3.BaseStationary base = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *base_);
    }

    // optional .osi3.TrafficSign.SupplementarySign.Classification classification = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *classification_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficSign_SupplementarySign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficSign_SupplementarySign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficSign_SupplementarySign::GetClassData() const { return &_class_data_; }

void TrafficSign_SupplementarySign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficSign_SupplementarySign *>(to)->MergeFrom(
      static_cast<const TrafficSign_SupplementarySign &>(from));
}


void TrafficSign_SupplementarySign::MergeFrom(const TrafficSign_SupplementarySign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficSign.SupplementarySign)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_model_reference(from._internal_model_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_base()->::osi3::BaseStationary::MergeFrom(from._internal_base());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_classification()->::osi3::TrafficSign_SupplementarySign_Classification::MergeFrom(from._internal_classification());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSign_SupplementarySign::CopyFrom(const TrafficSign_SupplementarySign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficSign.SupplementarySign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign_SupplementarySign::IsInitialized() const {
  return true;
}

void TrafficSign_SupplementarySign::InternalSwap(TrafficSign_SupplementarySign* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_reference_, lhs_arena,
      &other->model_reference_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySign, classification_)
      + sizeof(TrafficSign_SupplementarySign::classification_)
      - PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySign, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSign_SupplementarySign::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5ftrafficsign_2eproto_getter, &descriptor_table_osi_5ftrafficsign_2eproto_once,
      file_level_metadata_osi_5ftrafficsign_2eproto[5]);
}

// ===================================================================

class TrafficSign::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficSign>()._has_bits_);
  static const ::osi3::Identifier& id(const TrafficSign* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::TrafficSign_MainSign& main_sign(const TrafficSign* msg);
  static void set_has_main_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::osi3::Identifier&
TrafficSign::_Internal::id(const TrafficSign* msg) {
  return *msg->id_;
}
const ::osi3::TrafficSign_MainSign&
TrafficSign::_Internal::main_sign(const TrafficSign* msg) {
  return *msg->main_sign_;
}
void TrafficSign::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TrafficSign::clear_source_reference() {
  source_reference_.Clear();
}
TrafficSign::TrafficSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  supplementary_sign_(arena),
  source_reference_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficSign)
}
TrafficSign::TrafficSign(const TrafficSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      supplementary_sign_(from.supplementary_sign_),
      source_reference_(from.source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::osi3::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_main_sign()) {
    main_sign_ = new ::osi3::TrafficSign_MainSign(*from.main_sign_);
  } else {
    main_sign_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficSign)
}

void TrafficSign::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&main_sign_) -
    reinterpret_cast<char*>(&id_)) + sizeof(main_sign_));
}

TrafficSign::~TrafficSign() {
  // @@protoc_insertion_point(destructor:osi3.TrafficSign)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficSign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete main_sign_;
}

void TrafficSign::ArenaDtor(void* object) {
  TrafficSign* _this = reinterpret_cast< TrafficSign* >(object);
  (void)_this;
}
void TrafficSign::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficSign::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supplementary_sign_.Clear();
  source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(main_sign_ != nullptr);
      main_sign_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficSign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Identifier id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficSign.MainSign main_sign = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_main_sign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.TrafficSign.SupplementarySign supplementary_sign = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_supplementary_sign(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.ExternalReference source_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_source_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficSign::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.Identifier id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // optional .osi3.TrafficSign.MainSign main_sign = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::main_sign(this), target, stream);
  }

  // repeated .osi3.TrafficSign.SupplementarySign supplementary_sign = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_supplementary_sign_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_supplementary_sign(i), target, stream);
  }

  // repeated .osi3.ExternalReference source_reference = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_source_reference_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_source_reference(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficSign)
  return target;
}

size_t TrafficSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficSign)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.TrafficSign.SupplementarySign supplementary_sign = 3;
  total_size += 1UL * this->_internal_supplementary_sign_size();
  for (const auto& msg : this->supplementary_sign_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.ExternalReference source_reference = 4;
  total_size += 1UL * this->_internal_source_reference_size();
  for (const auto& msg : this->source_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .osi3.Identifier id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .osi3.TrafficSign.MainSign main_sign = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *main_sign_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficSign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficSign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficSign::GetClassData() const { return &_class_data_; }

void TrafficSign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficSign *>(to)->MergeFrom(
      static_cast<const TrafficSign &>(from));
}


void TrafficSign::MergeFrom(const TrafficSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficSign)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supplementary_sign_.MergeFrom(from.supplementary_sign_);
  source_reference_.MergeFrom(from.source_reference_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_id()->::osi3::Identifier::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_main_sign()->::osi3::TrafficSign_MainSign::MergeFrom(from._internal_main_sign());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSign::CopyFrom(const TrafficSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign::IsInitialized() const {
  return true;
}

void TrafficSign::InternalSwap(TrafficSign* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  supplementary_sign_.InternalSwap(&other->supplementary_sign_);
  source_reference_.InternalSwap(&other->source_reference_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSign, main_sign_)
      + sizeof(TrafficSign::main_sign_)
      - PROTOBUF_FIELD_OFFSET(TrafficSign, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSign::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5ftrafficsign_2eproto_getter, &descriptor_table_osi_5ftrafficsign_2eproto_once,
      file_level_metadata_osi_5ftrafficsign_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::TrafficSignValue* Arena::CreateMaybeMessage< ::osi3::TrafficSignValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficSignValue >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficSign_MainSign_Classification* Arena::CreateMaybeMessage< ::osi3::TrafficSign_MainSign_Classification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficSign_MainSign_Classification >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficSign_MainSign* Arena::CreateMaybeMessage< ::osi3::TrafficSign_MainSign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficSign_MainSign >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficSign_SupplementarySign_Classification_Arrow* Arena::CreateMaybeMessage< ::osi3::TrafficSign_SupplementarySign_Classification_Arrow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficSign_SupplementarySign_Classification_Arrow >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficSign_SupplementarySign_Classification* Arena::CreateMaybeMessage< ::osi3::TrafficSign_SupplementarySign_Classification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficSign_SupplementarySign_Classification >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficSign_SupplementarySign* Arena::CreateMaybeMessage< ::osi3::TrafficSign_SupplementarySign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficSign_SupplementarySign >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficSign* Arena::CreateMaybeMessage< ::osi3::TrafficSign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficSign >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
