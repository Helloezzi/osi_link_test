// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_environment.proto

#include "osi_environment.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace osi3 {
constexpr EnvironmentalConditions_TimeOfDay::EnvironmentalConditions_TimeOfDay(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seconds_since_midnight_(0u){}
struct EnvironmentalConditions_TimeOfDayDefaultTypeInternal {
  constexpr EnvironmentalConditions_TimeOfDayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnvironmentalConditions_TimeOfDayDefaultTypeInternal() {}
  union {
    EnvironmentalConditions_TimeOfDay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnvironmentalConditions_TimeOfDayDefaultTypeInternal _EnvironmentalConditions_TimeOfDay_default_instance_;
constexpr EnvironmentalConditions::EnvironmentalConditions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_reference_()
  , time_of_day_(nullptr)
  , atmospheric_pressure_(0)
  , ambient_illumination_(0)

  , precipitation_(0)

  , temperature_(0)
  , relative_humidity_(0)
  , unix_timestamp_(int64_t{0})
  , fog_(0)
{}
struct EnvironmentalConditionsDefaultTypeInternal {
  constexpr EnvironmentalConditionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnvironmentalConditionsDefaultTypeInternal() {}
  union {
    EnvironmentalConditions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnvironmentalConditionsDefaultTypeInternal _EnvironmentalConditions_default_instance_;
}  // namespace osi3
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5fenvironment_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_osi_5fenvironment_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5fenvironment_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5fenvironment_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions_TimeOfDay, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions_TimeOfDay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions_TimeOfDay, seconds_since_midnight_),
  0,
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, ambient_illumination_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, time_of_day_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, unix_timestamp_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, atmospheric_pressure_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, temperature_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, relative_humidity_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, precipitation_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, fog_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, source_reference_),
  2,
  0,
  6,
  1,
  4,
  5,
  3,
  7,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::osi3::EnvironmentalConditions_TimeOfDay)},
  { 8, 23, -1, sizeof(::osi3::EnvironmentalConditions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_EnvironmentalConditions_TimeOfDay_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_EnvironmentalConditions_default_instance_),
};

const char descriptor_table_protodef_osi_5fenvironment_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025osi_environment.proto\022\004osi3\032\020osi_commo"
  "n.proto\"\270\n\n\027EnvironmentalConditions\022O\n\024a"
  "mbient_illumination\030\001 \001(\01621.osi3.Environ"
  "mentalConditions.AmbientIllumination\022<\n\013"
  "time_of_day\030\002 \001(\0132\'.osi3.EnvironmentalCo"
  "nditions.TimeOfDay\022\026\n\016unix_timestamp\030\010 \001"
  "(\003\022\034\n\024atmospheric_pressure\030\003 \001(\001\022\023\n\013temp"
  "erature\030\004 \001(\001\022\031\n\021relative_humidity\030\005 \001(\001"
  "\022B\n\rprecipitation\030\006 \001(\0162+.osi3.Environme"
  "ntalConditions.Precipitation\022.\n\003fog\030\007 \001("
  "\0162!.osi3.EnvironmentalConditions.Fog\0221\n\020"
  "source_reference\030\t \003(\0132\027.osi3.ExternalRe"
  "ference\032+\n\tTimeOfDay\022\036\n\026seconds_since_mi"
  "dnight\030\001 \001(\r\"\200\002\n\rPrecipitation\022\031\n\025PRECIP"
  "ITATION_UNKNOWN\020\000\022\027\n\023PRECIPITATION_OTHER"
  "\020\001\022\026\n\022PRECIPITATION_NONE\020\002\022\034\n\030PRECIPITAT"
  "ION_VERY_LIGHT\020\003\022\027\n\023PRECIPITATION_LIGHT\020"
  "\004\022\032\n\026PRECIPITATION_MODERATE\020\005\022\027\n\023PRECIPI"
  "TATION_HEAVY\020\006\022\034\n\030PRECIPITATION_VERY_HEA"
  "VY\020\007\022\031\n\025PRECIPITATION_EXTREME\020\010\"\315\001\n\003Fog\022"
  "\017\n\013FOG_UNKNOWN\020\000\022\r\n\tFOG_OTHER\020\001\022\034\n\030FOG_E"
  "XCELLENT_VISIBILITY\020\002\022\027\n\023FOG_GOOD_VISIBI"
  "LITY\020\003\022\033\n\027FOG_MODERATE_VISIBILITY\020\004\022\027\n\023F"
  "OG_POOR_VISIBILITY\020\005\022\014\n\010FOG_MIST\020\006\022\r\n\tFO"
  "G_LIGHT\020\007\022\r\n\tFOG_THICK\020\010\022\r\n\tFOG_DENSE\020\t\""
  "\200\003\n\023AmbientIllumination\022 \n\034AMBIENT_ILLUM"
  "INATION_UNKNOWN\020\000\022\036\n\032AMBIENT_ILLUMINATIO"
  "N_OTHER\020\001\022\037\n\033AMBIENT_ILLUMINATION_LEVEL1"
  "\020\002\022\037\n\033AMBIENT_ILLUMINATION_LEVEL2\020\003\022\037\n\033A"
  "MBIENT_ILLUMINATION_LEVEL3\020\004\022\037\n\033AMBIENT_"
  "ILLUMINATION_LEVEL4\020\005\022\037\n\033AMBIENT_ILLUMIN"
  "ATION_LEVEL5\020\006\022\037\n\033AMBIENT_ILLUMINATION_L"
  "EVEL6\020\007\022\037\n\033AMBIENT_ILLUMINATION_LEVEL7\020\010"
  "\022\037\n\033AMBIENT_ILLUMINATION_LEVEL8\020\t\022\037\n\033AMB"
  "IENT_ILLUMINATION_LEVEL9\020\nB\002H\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5fenvironment_2eproto_deps[1] = {
  &::descriptor_table_osi_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5fenvironment_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fenvironment_2eproto = {
  false, false, 1390, descriptor_table_protodef_osi_5fenvironment_2eproto, "osi_environment.proto", 
  &descriptor_table_osi_5fenvironment_2eproto_once, descriptor_table_osi_5fenvironment_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_osi_5fenvironment_2eproto::offsets,
  file_level_metadata_osi_5fenvironment_2eproto, file_level_enum_descriptors_osi_5fenvironment_2eproto, file_level_service_descriptors_osi_5fenvironment_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_osi_5fenvironment_2eproto_getter() {
  return &descriptor_table_osi_5fenvironment_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_osi_5fenvironment_2eproto(&descriptor_table_osi_5fenvironment_2eproto);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnvironmentalConditions_Precipitation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fenvironment_2eproto);
  return file_level_enum_descriptors_osi_5fenvironment_2eproto[0];
}
bool EnvironmentalConditions_Precipitation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_UNKNOWN;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_OTHER;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_NONE;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_VERY_LIGHT;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_LIGHT;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_MODERATE;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_HEAVY;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_VERY_HEAVY;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_EXTREME;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::Precipitation_MIN;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::Precipitation_MAX;
constexpr int EnvironmentalConditions::Precipitation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnvironmentalConditions_Fog_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fenvironment_2eproto);
  return file_level_enum_descriptors_osi_5fenvironment_2eproto[1];
}
bool EnvironmentalConditions_Fog_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_UNKNOWN;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_OTHER;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_EXCELLENT_VISIBILITY;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_GOOD_VISIBILITY;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_MODERATE_VISIBILITY;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_POOR_VISIBILITY;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_MIST;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_LIGHT;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_THICK;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_DENSE;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::Fog_MIN;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::Fog_MAX;
constexpr int EnvironmentalConditions::Fog_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnvironmentalConditions_AmbientIllumination_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fenvironment_2eproto);
  return file_level_enum_descriptors_osi_5fenvironment_2eproto[2];
}
bool EnvironmentalConditions_AmbientIllumination_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_UNKNOWN;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_OTHER;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL1;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL2;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL3;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL4;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL5;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL6;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL7;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL8;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL9;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AmbientIllumination_MIN;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AmbientIllumination_MAX;
constexpr int EnvironmentalConditions::AmbientIllumination_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class EnvironmentalConditions_TimeOfDay::_Internal {
 public:
  using HasBits = decltype(std::declval<EnvironmentalConditions_TimeOfDay>()._has_bits_);
  static void set_has_seconds_since_midnight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnvironmentalConditions_TimeOfDay::EnvironmentalConditions_TimeOfDay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.EnvironmentalConditions.TimeOfDay)
}
EnvironmentalConditions_TimeOfDay::EnvironmentalConditions_TimeOfDay(const EnvironmentalConditions_TimeOfDay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seconds_since_midnight_ = from.seconds_since_midnight_;
  // @@protoc_insertion_point(copy_constructor:osi3.EnvironmentalConditions.TimeOfDay)
}

void EnvironmentalConditions_TimeOfDay::SharedCtor() {
seconds_since_midnight_ = 0u;
}

EnvironmentalConditions_TimeOfDay::~EnvironmentalConditions_TimeOfDay() {
  // @@protoc_insertion_point(destructor:osi3.EnvironmentalConditions.TimeOfDay)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EnvironmentalConditions_TimeOfDay::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnvironmentalConditions_TimeOfDay::ArenaDtor(void* object) {
  EnvironmentalConditions_TimeOfDay* _this = reinterpret_cast< EnvironmentalConditions_TimeOfDay* >(object);
  (void)_this;
}
void EnvironmentalConditions_TimeOfDay::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnvironmentalConditions_TimeOfDay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EnvironmentalConditions_TimeOfDay::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.EnvironmentalConditions.TimeOfDay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seconds_since_midnight_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnvironmentalConditions_TimeOfDay::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 seconds_since_midnight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_seconds_since_midnight(&has_bits);
          seconds_since_midnight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvironmentalConditions_TimeOfDay::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.EnvironmentalConditions.TimeOfDay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 seconds_since_midnight = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_seconds_since_midnight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.EnvironmentalConditions.TimeOfDay)
  return target;
}

size_t EnvironmentalConditions_TimeOfDay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.EnvironmentalConditions.TimeOfDay)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 seconds_since_midnight = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_seconds_since_midnight());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnvironmentalConditions_TimeOfDay::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EnvironmentalConditions_TimeOfDay::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnvironmentalConditions_TimeOfDay::GetClassData() const { return &_class_data_; }

void EnvironmentalConditions_TimeOfDay::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EnvironmentalConditions_TimeOfDay *>(to)->MergeFrom(
      static_cast<const EnvironmentalConditions_TimeOfDay &>(from));
}


void EnvironmentalConditions_TimeOfDay::MergeFrom(const EnvironmentalConditions_TimeOfDay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.EnvironmentalConditions.TimeOfDay)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_seconds_since_midnight()) {
    _internal_set_seconds_since_midnight(from._internal_seconds_since_midnight());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnvironmentalConditions_TimeOfDay::CopyFrom(const EnvironmentalConditions_TimeOfDay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.EnvironmentalConditions.TimeOfDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentalConditions_TimeOfDay::IsInitialized() const {
  return true;
}

void EnvironmentalConditions_TimeOfDay::InternalSwap(EnvironmentalConditions_TimeOfDay* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(seconds_since_midnight_, other->seconds_since_midnight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvironmentalConditions_TimeOfDay::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fenvironment_2eproto_getter, &descriptor_table_osi_5fenvironment_2eproto_once,
      file_level_metadata_osi_5fenvironment_2eproto[0]);
}

// ===================================================================

class EnvironmentalConditions::_Internal {
 public:
  using HasBits = decltype(std::declval<EnvironmentalConditions>()._has_bits_);
  static void set_has_ambient_illumination(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::osi3::EnvironmentalConditions_TimeOfDay& time_of_day(const EnvironmentalConditions* msg);
  static void set_has_time_of_day(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unix_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_atmospheric_pressure(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_relative_humidity(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_precipitation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fog(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::osi3::EnvironmentalConditions_TimeOfDay&
EnvironmentalConditions::_Internal::time_of_day(const EnvironmentalConditions* msg) {
  return *msg->time_of_day_;
}
void EnvironmentalConditions::clear_source_reference() {
  source_reference_.Clear();
}
EnvironmentalConditions::EnvironmentalConditions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  source_reference_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.EnvironmentalConditions)
}
EnvironmentalConditions::EnvironmentalConditions(const EnvironmentalConditions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      source_reference_(from.source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_of_day()) {
    time_of_day_ = new ::osi3::EnvironmentalConditions_TimeOfDay(*from.time_of_day_);
  } else {
    time_of_day_ = nullptr;
  }
  ::memcpy(&atmospheric_pressure_, &from.atmospheric_pressure_,
    static_cast<size_t>(reinterpret_cast<char*>(&fog_) -
    reinterpret_cast<char*>(&atmospheric_pressure_)) + sizeof(fog_));
  // @@protoc_insertion_point(copy_constructor:osi3.EnvironmentalConditions)
}

void EnvironmentalConditions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_of_day_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fog_) -
    reinterpret_cast<char*>(&time_of_day_)) + sizeof(fog_));
}

EnvironmentalConditions::~EnvironmentalConditions() {
  // @@protoc_insertion_point(destructor:osi3.EnvironmentalConditions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EnvironmentalConditions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete time_of_day_;
}

void EnvironmentalConditions::ArenaDtor(void* object) {
  EnvironmentalConditions* _this = reinterpret_cast< EnvironmentalConditions* >(object);
  (void)_this;
}
void EnvironmentalConditions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnvironmentalConditions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EnvironmentalConditions::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.EnvironmentalConditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(time_of_day_ != nullptr);
    time_of_day_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&atmospheric_pressure_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fog_) -
        reinterpret_cast<char*>(&atmospheric_pressure_)) + sizeof(fog_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnvironmentalConditions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.EnvironmentalConditions.AmbientIllumination ambient_illumination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::EnvironmentalConditions_AmbientIllumination_IsValid(val))) {
            _internal_set_ambient_illumination(static_cast<::osi3::EnvironmentalConditions_AmbientIllumination>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.EnvironmentalConditions.TimeOfDay time_of_day = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_of_day(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double atmospheric_pressure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_atmospheric_pressure(&has_bits);
          atmospheric_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double temperature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_temperature(&has_bits);
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double relative_humidity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_relative_humidity(&has_bits);
          relative_humidity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.EnvironmentalConditions.Precipitation precipitation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::EnvironmentalConditions_Precipitation_IsValid(val))) {
            _internal_set_precipitation(static_cast<::osi3::EnvironmentalConditions_Precipitation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.EnvironmentalConditions.Fog fog = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::EnvironmentalConditions_Fog_IsValid(val))) {
            _internal_set_fog(static_cast<::osi3::EnvironmentalConditions_Fog>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 unix_timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_unix_timestamp(&has_bits);
          unix_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.ExternalReference source_reference = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_source_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvironmentalConditions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.EnvironmentalConditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.EnvironmentalConditions.AmbientIllumination ambient_illumination = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ambient_illumination(), target);
  }

  // optional .osi3.EnvironmentalConditions.TimeOfDay time_of_day = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::time_of_day(this), target, stream);
  }

  // optional double atmospheric_pressure = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_atmospheric_pressure(), target);
  }

  // optional double temperature = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_temperature(), target);
  }

  // optional double relative_humidity = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_relative_humidity(), target);
  }

  // optional .osi3.EnvironmentalConditions.Precipitation precipitation = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_precipitation(), target);
  }

  // optional .osi3.EnvironmentalConditions.Fog fog = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_fog(), target);
  }

  // optional int64 unix_timestamp = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_unix_timestamp(), target);
  }

  // repeated .osi3.ExternalReference source_reference = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_source_reference_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_source_reference(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.EnvironmentalConditions)
  return target;
}

size_t EnvironmentalConditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.EnvironmentalConditions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.ExternalReference source_reference = 9;
  total_size += 1UL * this->_internal_source_reference_size();
  for (const auto& msg : this->source_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .osi3.EnvironmentalConditions.TimeOfDay time_of_day = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *time_of_day_);
    }

    // optional double atmospheric_pressure = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .osi3.EnvironmentalConditions.AmbientIllumination ambient_illumination = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ambient_illumination());
    }

    // optional .osi3.EnvironmentalConditions.Precipitation precipitation = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_precipitation());
    }

    // optional double temperature = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double relative_humidity = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int64 unix_timestamp = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_unix_timestamp());
    }

    // optional .osi3.EnvironmentalConditions.Fog fog = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fog());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnvironmentalConditions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EnvironmentalConditions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnvironmentalConditions::GetClassData() const { return &_class_data_; }

void EnvironmentalConditions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EnvironmentalConditions *>(to)->MergeFrom(
      static_cast<const EnvironmentalConditions &>(from));
}


void EnvironmentalConditions::MergeFrom(const EnvironmentalConditions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.EnvironmentalConditions)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_reference_.MergeFrom(from.source_reference_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_time_of_day()->::osi3::EnvironmentalConditions_TimeOfDay::MergeFrom(from._internal_time_of_day());
    }
    if (cached_has_bits & 0x00000002u) {
      atmospheric_pressure_ = from.atmospheric_pressure_;
    }
    if (cached_has_bits & 0x00000004u) {
      ambient_illumination_ = from.ambient_illumination_;
    }
    if (cached_has_bits & 0x00000008u) {
      precipitation_ = from.precipitation_;
    }
    if (cached_has_bits & 0x00000010u) {
      temperature_ = from.temperature_;
    }
    if (cached_has_bits & 0x00000020u) {
      relative_humidity_ = from.relative_humidity_;
    }
    if (cached_has_bits & 0x00000040u) {
      unix_timestamp_ = from.unix_timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      fog_ = from.fog_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnvironmentalConditions::CopyFrom(const EnvironmentalConditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.EnvironmentalConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentalConditions::IsInitialized() const {
  return true;
}

void EnvironmentalConditions::InternalSwap(EnvironmentalConditions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  source_reference_.InternalSwap(&other->source_reference_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnvironmentalConditions, fog_)
      + sizeof(EnvironmentalConditions::fog_)
      - PROTOBUF_FIELD_OFFSET(EnvironmentalConditions, time_of_day_)>(
          reinterpret_cast<char*>(&time_of_day_),
          reinterpret_cast<char*>(&other->time_of_day_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvironmentalConditions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fenvironment_2eproto_getter, &descriptor_table_osi_5fenvironment_2eproto_once,
      file_level_metadata_osi_5fenvironment_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::EnvironmentalConditions_TimeOfDay* Arena::CreateMaybeMessage< ::osi3::EnvironmentalConditions_TimeOfDay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::EnvironmentalConditions_TimeOfDay >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::EnvironmentalConditions* Arena::CreateMaybeMessage< ::osi3::EnvironmentalConditions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::EnvironmentalConditions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
