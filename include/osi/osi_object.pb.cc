// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_object.proto

#include "osi_object.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace osi3 {
constexpr StationaryObject_Classification_EmittingStructureAttribute::StationaryObject_Classification_EmittingStructureAttribute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : wavelength_data_()
  , emitted_spatial_signal_strength_(){}
struct StationaryObject_Classification_EmittingStructureAttributeDefaultTypeInternal {
  constexpr StationaryObject_Classification_EmittingStructureAttributeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StationaryObject_Classification_EmittingStructureAttributeDefaultTypeInternal() {}
  union {
    StationaryObject_Classification_EmittingStructureAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StationaryObject_Classification_EmittingStructureAttributeDefaultTypeInternal _StationaryObject_Classification_EmittingStructureAttribute_default_instance_;
constexpr StationaryObject_Classification::StationaryObject_Classification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : assigned_lane_id_()
  , assigned_lane_percentage_()
  , emitting_structure_attribute_(nullptr)
  , type_(0)

  , material_(0)

  , density_(0)

  , color_(0)
{}
struct StationaryObject_ClassificationDefaultTypeInternal {
  constexpr StationaryObject_ClassificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StationaryObject_ClassificationDefaultTypeInternal() {}
  union {
    StationaryObject_Classification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StationaryObject_ClassificationDefaultTypeInternal _StationaryObject_Classification_default_instance_;
constexpr StationaryObject::StationaryObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_reference_()
  , model_reference_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(nullptr)
  , base_(nullptr)
  , classification_(nullptr)
  , color_description_(nullptr){}
struct StationaryObjectDefaultTypeInternal {
  constexpr StationaryObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StationaryObjectDefaultTypeInternal() {}
  union {
    StationaryObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StationaryObjectDefaultTypeInternal _StationaryObject_default_instance_;
constexpr MovingObject_VehicleAttributes_WheelData::MovingObject_VehicleAttributes_WheelData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_reference_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , position_(nullptr)
  , orientation_(nullptr)
  , axle_(0u)
  , index_(0u)
  , wheel_radius_(0)
  , rim_radius_(0)
  , width_(0)
  , rotation_rate_(0){}
struct MovingObject_VehicleAttributes_WheelDataDefaultTypeInternal {
  constexpr MovingObject_VehicleAttributes_WheelDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MovingObject_VehicleAttributes_WheelDataDefaultTypeInternal() {}
  union {
    MovingObject_VehicleAttributes_WheelData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MovingObject_VehicleAttributes_WheelDataDefaultTypeInternal _MovingObject_VehicleAttributes_WheelData_default_instance_;
constexpr MovingObject_VehicleAttributes::MovingObject_VehicleAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : wheel_data_()
  , driver_id_(nullptr)
  , bbcenter_to_rear_(nullptr)
  , bbcenter_to_front_(nullptr)
  , radius_wheel_(0)
  , ground_clearance_(0)
  , steering_wheel_angle_(0)
  , number_wheels_(0u){}
struct MovingObject_VehicleAttributesDefaultTypeInternal {
  constexpr MovingObject_VehicleAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MovingObject_VehicleAttributesDefaultTypeInternal() {}
  union {
    MovingObject_VehicleAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MovingObject_VehicleAttributesDefaultTypeInternal _MovingObject_VehicleAttributes_default_instance_;
constexpr MovingObject_MovingObjectClassification::MovingObject_MovingObjectClassification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : assigned_lane_id_()
  , assigned_lane_percentage_(){}
struct MovingObject_MovingObjectClassificationDefaultTypeInternal {
  constexpr MovingObject_MovingObjectClassificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MovingObject_MovingObjectClassificationDefaultTypeInternal() {}
  union {
    MovingObject_MovingObjectClassification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MovingObject_MovingObjectClassificationDefaultTypeInternal _MovingObject_MovingObjectClassification_default_instance_;
constexpr MovingObject_VehicleClassification_LightState::MovingObject_VehicleClassification_LightState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : indicator_state_(0)

  , front_fog_light_(0)

  , rear_fog_light_(0)

  , head_light_(0)

  , high_beam_(0)

  , reversing_light_(0)

  , brake_light_state_(0)

  , license_plate_illumination_rear_(0)

  , emergency_vehicle_illumination_(0)

  , service_vehicle_illumination_(0)
{}
struct MovingObject_VehicleClassification_LightStateDefaultTypeInternal {
  constexpr MovingObject_VehicleClassification_LightStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MovingObject_VehicleClassification_LightStateDefaultTypeInternal() {}
  union {
    MovingObject_VehicleClassification_LightState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MovingObject_VehicleClassification_LightStateDefaultTypeInternal _MovingObject_VehicleClassification_LightState_default_instance_;
constexpr MovingObject_VehicleClassification::MovingObject_VehicleClassification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : light_state_(nullptr)
  , trailer_id_(nullptr)
  , type_(0)

  , has_trailer_(false){}
struct MovingObject_VehicleClassificationDefaultTypeInternal {
  constexpr MovingObject_VehicleClassificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MovingObject_VehicleClassificationDefaultTypeInternal() {}
  union {
    MovingObject_VehicleClassification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MovingObject_VehicleClassificationDefaultTypeInternal _MovingObject_VehicleClassification_default_instance_;
constexpr MovingObject::MovingObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : assigned_lane_id_()
  , future_trajectory_()
  , source_reference_()
  , model_reference_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(nullptr)
  , base_(nullptr)
  , vehicle_attributes_(nullptr)
  , vehicle_classification_(nullptr)
  , moving_object_classification_(nullptr)
  , color_description_(nullptr)
  , type_(0)
{}
struct MovingObjectDefaultTypeInternal {
  constexpr MovingObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MovingObjectDefaultTypeInternal() {}
  union {
    MovingObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MovingObjectDefaultTypeInternal _MovingObject_default_instance_;
}  // namespace osi3
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5fobject_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_osi_5fobject_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5fobject_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5fobject_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject_Classification_EmittingStructureAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject_Classification_EmittingStructureAttribute, wavelength_data_),
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject_Classification_EmittingStructureAttribute, emitted_spatial_signal_strength_),
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject_Classification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject_Classification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject_Classification, type_),
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject_Classification, material_),
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject_Classification, density_),
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject_Classification, color_),
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject_Classification, emitting_structure_attribute_),
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject_Classification, assigned_lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject_Classification, assigned_lane_percentage_),
  1,
  2,
  3,
  4,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject, id_),
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject, base_),
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject, classification_),
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject, model_reference_),
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject, source_reference_),
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject, color_description_),
  1,
  2,
  3,
  0,
  ~0u,
  4,
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes_WheelData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes_WheelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes_WheelData, axle_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes_WheelData, index_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes_WheelData, position_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes_WheelData, wheel_radius_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes_WheelData, rim_radius_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes_WheelData, width_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes_WheelData, orientation_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes_WheelData, rotation_rate_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes_WheelData, model_reference_),
  3,
  4,
  1,
  5,
  6,
  7,
  2,
  8,
  0,
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes, driver_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes, radius_wheel_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes, number_wheels_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes, bbcenter_to_rear_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes, bbcenter_to_front_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes, ground_clearance_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes, wheel_data_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes, steering_wheel_angle_),
  0,
  3,
  6,
  1,
  2,
  4,
  ~0u,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_MovingObjectClassification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_MovingObjectClassification, assigned_lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_MovingObjectClassification, assigned_lane_percentage_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, indicator_state_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, front_fog_light_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, rear_fog_light_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, head_light_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, high_beam_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, reversing_light_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, brake_light_state_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, license_plate_illumination_rear_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, emergency_vehicle_illumination_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, service_vehicle_illumination_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification, type_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification, light_state_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification, has_trailer_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification, trailer_id_),
  2,
  0,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject, id_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject, base_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject, type_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject, assigned_lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject, vehicle_attributes_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject, vehicle_classification_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject, model_reference_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject, future_trajectory_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject, moving_object_classification_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject, source_reference_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject, color_description_),
  1,
  2,
  7,
  ~0u,
  3,
  4,
  0,
  ~0u,
  5,
  ~0u,
  6,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::osi3::StationaryObject_Classification_EmittingStructureAttribute)},
  { 8, 21, -1, sizeof(::osi3::StationaryObject_Classification)},
  { 28, 40, -1, sizeof(::osi3::StationaryObject)},
  { 46, 61, -1, sizeof(::osi3::MovingObject_VehicleAttributes_WheelData)},
  { 70, 84, -1, sizeof(::osi3::MovingObject_VehicleAttributes)},
  { 92, -1, -1, sizeof(::osi3::MovingObject_MovingObjectClassification)},
  { 100, 116, -1, sizeof(::osi3::MovingObject_VehicleClassification_LightState)},
  { 126, 136, -1, sizeof(::osi3::MovingObject_VehicleClassification)},
  { 140, 157, -1, sizeof(::osi3::MovingObject)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_StationaryObject_Classification_EmittingStructureAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_StationaryObject_Classification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_StationaryObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_MovingObject_VehicleAttributes_WheelData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_MovingObject_VehicleAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_MovingObject_MovingObjectClassification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_MovingObject_VehicleClassification_LightState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_MovingObject_VehicleClassification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_MovingObject_default_instance_),
};

const char descriptor_table_protodef_osi_5fobject_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020osi_object.proto\022\004osi3\032\020osi_common.pro"
  "to\"\276\016\n\020StationaryObject\022\034\n\002id\030\001 \001(\0132\020.os"
  "i3.Identifier\022\"\n\004base\030\002 \001(\0132\024.osi3.BaseS"
  "tationary\022=\n\016classification\030\003 \001(\0132%.osi3"
  ".StationaryObject.Classification\022\027\n\017mode"
  "l_reference\030\004 \001(\t\0221\n\020source_reference\030\005 "
  "\003(\0132\027.osi3.ExternalReference\0221\n\021color_de"
  "scription\030\006 \001(\0132\026.osi3.ColorDescription\032"
  "\251\014\n\016Classification\0228\n\004type\030\001 \001(\0162*.osi3."
  "StationaryObject.Classification.Type\022@\n\010"
  "material\030\002 \001(\0162..osi3.StationaryObject.C"
  "lassification.Material\022>\n\007density\030\003 \001(\0162"
  "-.osi3.StationaryObject.Classification.D"
  "ensity\022:\n\005color\030\004 \001(\0162+.osi3.StationaryO"
  "bject.Classification.Color\022f\n\034emitting_s"
  "tructure_attribute\030\005 \001(\0132@.osi3.Stationa"
  "ryObject.Classification.EmittingStructur"
  "eAttribute\022*\n\020assigned_lane_id\030\006 \003(\0132\020.o"
  "si3.Identifier\022 \n\030assigned_lane_percenta"
  "ge\030\007 \003(\001\032\221\001\n\032EmittingStructureAttribute\022"
  "-\n\017wavelength_data\030\001 \003(\0132\024.osi3.Waveleng"
  "thData\022D\n\037emitted_spatial_signal_strengt"
  "h\030\003 \003(\0132\033.osi3.SpatialSignalStrength\"\250\003\n"
  "\004Type\022\020\n\014TYPE_UNKNOWN\020\000\022\016\n\nTYPE_OTHER\020\001\022"
  "\017\n\013TYPE_BRIDGE\020\002\022\021\n\rTYPE_BUILDING\020\003\022\r\n\tT"
  "YPE_POLE\020\004\022\016\n\nTYPE_PYLON\020\005\022\023\n\017TYPE_DELIN"
  "EATOR\020\006\022\r\n\tTYPE_TREE\020\007\022\020\n\014TYPE_BARRIER\020\010"
  "\022\023\n\017TYPE_VEGETATION\020\t\022\022\n\016TYPE_CURBSTONE\020"
  "\n\022\r\n\tTYPE_WALL\020\013\022\033\n\027TYPE_VERTICAL_STRUCT"
  "URE\020\014\022\036\n\032TYPE_RECTANGULAR_STRUCTURE\020\r\022\033\n"
  "\027TYPE_OVERHEAD_STRUCTURE\020\016\022\035\n\031TYPE_REFLE"
  "CTIVE_STRUCTURE\020\017\022\"\n\036TYPE_CONSTRUCTION_S"
  "ITE_ELEMENT\020\020\022\023\n\017TYPE_SPEED_BUMP\020\021\022\033\n\027TY"
  "PE_EMITTING_STRUCTURE\020\022\"\301\001\n\010Material\022\024\n\020"
  "MATERIAL_UNKNOWN\020\000\022\022\n\016MATERIAL_OTHER\020\001\022\021"
  "\n\rMATERIAL_WOOD\020\002\022\024\n\020MATERIAL_PLASTIC\020\003\022"
  "\025\n\021MATERIAL_CONCRETE\020\004\022\022\n\016MATERIAL_METAL"
  "\020\005\022\022\n\016MATERIAL_STONE\020\006\022\021\n\rMATERIAL_GLAS\020"
  "\007\022\020\n\014MATERIAL_MUD\020\010\"\237\001\n\007Density\022\023\n\017DENSI"
  "TY_UNKNOWN\020\000\022\021\n\rDENSITY_OTHER\020\001\022\021\n\rDENSI"
  "TY_SOLID\020\002\022\026\n\022DENSITY_SMALL_MESH\020\003\022\027\n\023DE"
  "NSITY_MEDIAN_MESH\020\004\022\026\n\022DENSITY_LARGE_MES"
  "H\020\005\022\020\n\014DENSITY_OPEN\020\006\"\303\001\n\005Color\022\021\n\rCOLOR"
  "_UNKNOWN\020\000\022\017\n\013COLOR_OTHER\020\001\022\020\n\014COLOR_YEL"
  "LOW\020\002\022\017\n\013COLOR_GREEN\020\003\022\016\n\nCOLOR_BLUE\020\004\022\020"
  "\n\014COLOR_VIOLET\020\005\022\r\n\tCOLOR_RED\020\006\022\020\n\014COLOR"
  "_ORANGE\020\007\022\017\n\013COLOR_BLACK\020\010\022\016\n\nCOLOR_GREY"
  "\020\t\022\017\n\013COLOR_WHITE\020\n\"\201\033\n\014MovingObject\022\034\n\002"
  "id\030\001 \001(\0132\020.osi3.Identifier\022\036\n\004base\030\002 \001(\013"
  "2\020.osi3.BaseMoving\022%\n\004type\030\003 \001(\0162\027.osi3."
  "MovingObject.Type\022*\n\020assigned_lane_id\030\004 "
  "\003(\0132\020.osi3.Identifier\022@\n\022vehicle_attribu"
  "tes\030\005 \001(\0132$.osi3.MovingObject.VehicleAtt"
  "ributes\022H\n\026vehicle_classification\030\006 \001(\0132"
  "(.osi3.MovingObject.VehicleClassificatio"
  "n\022\027\n\017model_reference\030\007 \001(\t\022+\n\021future_tra"
  "jectory\030\010 \003(\0132\020.osi3.StatePoint\022S\n\034movin"
  "g_object_classification\030\t \001(\0132-.osi3.Mov"
  "ingObject.MovingObjectClassification\0221\n\020"
  "source_reference\030\n \003(\0132\027.osi3.ExternalRe"
  "ference\0221\n\021color_description\030\013 \001(\0132\026.osi"
  "3.ColorDescription\032\226\004\n\021VehicleAttributes"
  "\022#\n\tdriver_id\030\001 \001(\0132\020.osi3.Identifier\022\024\n"
  "\014radius_wheel\030\002 \001(\001\022\025\n\rnumber_wheels\030\003 \001"
  "(\r\022(\n\020bbcenter_to_rear\030\004 \001(\0132\016.osi3.Vect"
  "or3d\022)\n\021bbcenter_to_front\030\005 \001(\0132\016.osi3.V"
  "ector3d\022\030\n\020ground_clearance\030\006 \001(\001\022B\n\nwhe"
  "el_data\030\007 \003(\0132..osi3.MovingObject.Vehicl"
  "eAttributes.WheelData\022\034\n\024steering_wheel_"
  "angle\030\010 \001(\001\032\335\001\n\tWheelData\022\014\n\004axle\030\001 \001(\r\022"
  "\r\n\005index\030\002 \001(\r\022 \n\010position\030\003 \001(\0132\016.osi3."
  "Vector3d\022\024\n\014wheel_radius\030\004 \001(\001\022\022\n\nrim_ra"
  "dius\030\005 \001(\001\022\r\n\005width\030\006 \001(\001\022(\n\013orientation"
  "\030\007 \001(\0132\023.osi3.Orientation3d\022\025\n\rrotation_"
  "rate\030\010 \001(\001\022\027\n\017model_reference\030\t \001(\t\032j\n\032M"
  "ovingObjectClassification\022*\n\020assigned_la"
  "ne_id\030\001 \003(\0132\020.osi3.Identifier\022 \n\030assigne"
  "d_lane_percentage\030\002 \003(\001\032\353\020\n\025VehicleClass"
  "ification\022;\n\004type\030\001 \001(\0162-.osi3.MovingObj"
  "ect.VehicleClassification.Type\022H\n\013light_"
  "state\030\002 \001(\01323.osi3.MovingObject.VehicleC"
  "lassification.LightState\022\023\n\013has_trailer\030"
  "\003 \001(\010\022$\n\ntrailer_id\030\004 \001(\0132\020.osi3.Identif"
  "ier\032\323\014\n\nLightState\022[\n\017indicator_state\030\001 "
  "\001(\0162B.osi3.MovingObject.VehicleClassific"
  "ation.LightState.IndicatorState\022^\n\017front"
  "_fog_light\030\002 \001(\0162E.osi3.MovingObject.Veh"
  "icleClassification.LightState.GenericLig"
  "htState\022]\n\016rear_fog_light\030\003 \001(\0162E.osi3.M"
  "ovingObject.VehicleClassification.LightS"
  "tate.GenericLightState\022Y\n\nhead_light\030\004 \001"
  "(\0162E.osi3.MovingObject.VehicleClassifica"
  "tion.LightState.GenericLightState\022X\n\thig"
  "h_beam\030\005 \001(\0162E.osi3.MovingObject.Vehicle"
  "Classification.LightState.GenericLightSt"
  "ate\022^\n\017reversing_light\030\006 \001(\0162E.osi3.Movi"
  "ngObject.VehicleClassification.LightStat"
  "e.GenericLightState\022^\n\021brake_light_state"
  "\030\007 \001(\0162C.osi3.MovingObject.VehicleClassi"
  "fication.LightState.BrakeLightState\022n\n\037l"
  "icense_plate_illumination_rear\030\010 \001(\0162E.o"
  "si3.MovingObject.VehicleClassification.L"
  "ightState.GenericLightState\022m\n\036emergency"
  "_vehicle_illumination\030\t \001(\0162E.osi3.Movin"
  "gObject.VehicleClassification.LightState"
  ".GenericLightState\022k\n\034service_vehicle_il"
  "lumination\030\n \001(\0162E.osi3.MovingObject.Veh"
  "icleClassification.LightState.GenericLig"
  "htState\"\263\001\n\016IndicatorState\022\033\n\027INDICATOR_"
  "STATE_UNKNOWN\020\000\022\031\n\025INDICATOR_STATE_OTHER"
  "\020\001\022\027\n\023INDICATOR_STATE_OFF\020\002\022\030\n\024INDICATOR"
  "_STATE_LEFT\020\003\022\031\n\025INDICATOR_STATE_RIGHT\020\004"
  "\022\033\n\027INDICATOR_STATE_WARNING\020\005\"\212\002\n\021Generi"
  "cLightState\022\037\n\033GENERIC_LIGHT_STATE_UNKNO"
  "WN\020\000\022\035\n\031GENERIC_LIGHT_STATE_OTHER\020\001\022\033\n\027G"
  "ENERIC_LIGHT_STATE_OFF\020\002\022\032\n\026GENERIC_LIGH"
  "T_STATE_ON\020\003\022%\n!GENERIC_LIGHT_STATE_FLAS"
  "HING_BLUE\020\004\022-\n)GENERIC_LIGHT_STATE_FLASH"
  "ING_BLUE_AND_RED\020\005\022&\n\"GENERIC_LIGHT_STAT"
  "E_FLASHING_AMBER\020\006\"\244\001\n\017BrakeLightState\022\035"
  "\n\031BRAKE_LIGHT_STATE_UNKNOWN\020\000\022\033\n\027BRAKE_L"
  "IGHT_STATE_OTHER\020\001\022\031\n\025BRAKE_LIGHT_STATE_"
  "OFF\020\002\022\034\n\030BRAKE_LIGHT_STATE_NORMAL\020\003\022\034\n\030B"
  "RAKE_LIGHT_STATE_STRONG\020\004\"\271\002\n\004Type\022\020\n\014TY"
  "PE_UNKNOWN\020\000\022\016\n\nTYPE_OTHER\020\001\022\022\n\016TYPE_SMA"
  "LL_CAR\020\002\022\024\n\020TYPE_COMPACT_CAR\020\003\022\023\n\017TYPE_M"
  "EDIUM_CAR\020\004\022\023\n\017TYPE_LUXURY_CAR\020\005\022\025\n\021TYPE"
  "_DELIVERY_VAN\020\006\022\024\n\020TYPE_HEAVY_TRUCK\020\007\022\024\n"
  "\020TYPE_SEMITRAILER\020\010\022\020\n\014TYPE_TRAILER\020\t\022\022\n"
  "\016TYPE_MOTORBIKE\020\n\022\020\n\014TYPE_BICYCLE\020\013\022\014\n\010T"
  "YPE_BUS\020\014\022\r\n\tTYPE_TRAM\020\r\022\016\n\nTYPE_TRAIN\020\016"
  "\022\023\n\017TYPE_WHEELCHAIR\020\017\"`\n\004Type\022\020\n\014TYPE_UN"
  "KNOWN\020\000\022\016\n\nTYPE_OTHER\020\001\022\020\n\014TYPE_VEHICLE\020"
  "\002\022\023\n\017TYPE_PEDESTRIAN\020\003\022\017\n\013TYPE_ANIMAL\020\004B"
  "\002H\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5fobject_2eproto_deps[1] = {
  &::descriptor_table_osi_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5fobject_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fobject_2eproto = {
  false, false, 5363, descriptor_table_protodef_osi_5fobject_2eproto, "osi_object.proto", 
  &descriptor_table_osi_5fobject_2eproto_once, descriptor_table_osi_5fobject_2eproto_deps, 1, 9,
  schemas, file_default_instances, TableStruct_osi_5fobject_2eproto::offsets,
  file_level_metadata_osi_5fobject_2eproto, file_level_enum_descriptors_osi_5fobject_2eproto, file_level_service_descriptors_osi_5fobject_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_osi_5fobject_2eproto_getter() {
  return &descriptor_table_osi_5fobject_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_osi_5fobject_2eproto(&descriptor_table_osi_5fobject_2eproto);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StationaryObject_Classification_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fobject_2eproto);
  return file_level_enum_descriptors_osi_5fobject_2eproto[0];
}
bool StationaryObject_Classification_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_UNKNOWN;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_OTHER;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_BRIDGE;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_BUILDING;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_POLE;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_PYLON;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_DELINEATOR;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_TREE;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_BARRIER;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_VEGETATION;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_CURBSTONE;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_WALL;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_VERTICAL_STRUCTURE;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_RECTANGULAR_STRUCTURE;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_OVERHEAD_STRUCTURE;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_REFLECTIVE_STRUCTURE;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_CONSTRUCTION_SITE_ELEMENT;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_SPEED_BUMP;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_EMITTING_STRUCTURE;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::Type_MIN;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::Type_MAX;
constexpr int StationaryObject_Classification::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StationaryObject_Classification_Material_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fobject_2eproto);
  return file_level_enum_descriptors_osi_5fobject_2eproto[1];
}
bool StationaryObject_Classification_Material_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_UNKNOWN;
constexpr StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_OTHER;
constexpr StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_WOOD;
constexpr StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_PLASTIC;
constexpr StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_CONCRETE;
constexpr StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_METAL;
constexpr StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_STONE;
constexpr StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_GLAS;
constexpr StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_MUD;
constexpr StationaryObject_Classification_Material StationaryObject_Classification::Material_MIN;
constexpr StationaryObject_Classification_Material StationaryObject_Classification::Material_MAX;
constexpr int StationaryObject_Classification::Material_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StationaryObject_Classification_Density_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fobject_2eproto);
  return file_level_enum_descriptors_osi_5fobject_2eproto[2];
}
bool StationaryObject_Classification_Density_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StationaryObject_Classification_Density StationaryObject_Classification::DENSITY_UNKNOWN;
constexpr StationaryObject_Classification_Density StationaryObject_Classification::DENSITY_OTHER;
constexpr StationaryObject_Classification_Density StationaryObject_Classification::DENSITY_SOLID;
constexpr StationaryObject_Classification_Density StationaryObject_Classification::DENSITY_SMALL_MESH;
constexpr StationaryObject_Classification_Density StationaryObject_Classification::DENSITY_MEDIAN_MESH;
constexpr StationaryObject_Classification_Density StationaryObject_Classification::DENSITY_LARGE_MESH;
constexpr StationaryObject_Classification_Density StationaryObject_Classification::DENSITY_OPEN;
constexpr StationaryObject_Classification_Density StationaryObject_Classification::Density_MIN;
constexpr StationaryObject_Classification_Density StationaryObject_Classification::Density_MAX;
constexpr int StationaryObject_Classification::Density_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StationaryObject_Classification_Color_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fobject_2eproto);
  return file_level_enum_descriptors_osi_5fobject_2eproto[3];
}
bool StationaryObject_Classification_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StationaryObject_Classification_Color StationaryObject_Classification::COLOR_UNKNOWN;
constexpr StationaryObject_Classification_Color StationaryObject_Classification::COLOR_OTHER;
constexpr StationaryObject_Classification_Color StationaryObject_Classification::COLOR_YELLOW;
constexpr StationaryObject_Classification_Color StationaryObject_Classification::COLOR_GREEN;
constexpr StationaryObject_Classification_Color StationaryObject_Classification::COLOR_BLUE;
constexpr StationaryObject_Classification_Color StationaryObject_Classification::COLOR_VIOLET;
constexpr StationaryObject_Classification_Color StationaryObject_Classification::COLOR_RED;
constexpr StationaryObject_Classification_Color StationaryObject_Classification::COLOR_ORANGE;
constexpr StationaryObject_Classification_Color StationaryObject_Classification::COLOR_BLACK;
constexpr StationaryObject_Classification_Color StationaryObject_Classification::COLOR_GREY;
constexpr StationaryObject_Classification_Color StationaryObject_Classification::COLOR_WHITE;
constexpr StationaryObject_Classification_Color StationaryObject_Classification::Color_MIN;
constexpr StationaryObject_Classification_Color StationaryObject_Classification::Color_MAX;
constexpr int StationaryObject_Classification::Color_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MovingObject_VehicleClassification_LightState_IndicatorState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fobject_2eproto);
  return file_level_enum_descriptors_osi_5fobject_2eproto[4];
}
bool MovingObject_VehicleClassification_LightState_IndicatorState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::INDICATOR_STATE_UNKNOWN;
constexpr MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::INDICATOR_STATE_OTHER;
constexpr MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::INDICATOR_STATE_OFF;
constexpr MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::INDICATOR_STATE_LEFT;
constexpr MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::INDICATOR_STATE_RIGHT;
constexpr MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::INDICATOR_STATE_WARNING;
constexpr MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::IndicatorState_MIN;
constexpr MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::IndicatorState_MAX;
constexpr int MovingObject_VehicleClassification_LightState::IndicatorState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MovingObject_VehicleClassification_LightState_GenericLightState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fobject_2eproto);
  return file_level_enum_descriptors_osi_5fobject_2eproto[5];
}
bool MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GENERIC_LIGHT_STATE_UNKNOWN;
constexpr MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GENERIC_LIGHT_STATE_OTHER;
constexpr MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GENERIC_LIGHT_STATE_OFF;
constexpr MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GENERIC_LIGHT_STATE_ON;
constexpr MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GENERIC_LIGHT_STATE_FLASHING_BLUE;
constexpr MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GENERIC_LIGHT_STATE_FLASHING_BLUE_AND_RED;
constexpr MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GENERIC_LIGHT_STATE_FLASHING_AMBER;
constexpr MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GenericLightState_MIN;
constexpr MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GenericLightState_MAX;
constexpr int MovingObject_VehicleClassification_LightState::GenericLightState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MovingObject_VehicleClassification_LightState_BrakeLightState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fobject_2eproto);
  return file_level_enum_descriptors_osi_5fobject_2eproto[6];
}
bool MovingObject_VehicleClassification_LightState_BrakeLightState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::BRAKE_LIGHT_STATE_UNKNOWN;
constexpr MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::BRAKE_LIGHT_STATE_OTHER;
constexpr MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::BRAKE_LIGHT_STATE_OFF;
constexpr MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::BRAKE_LIGHT_STATE_NORMAL;
constexpr MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::BRAKE_LIGHT_STATE_STRONG;
constexpr MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::BrakeLightState_MIN;
constexpr MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::BrakeLightState_MAX;
constexpr int MovingObject_VehicleClassification_LightState::BrakeLightState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MovingObject_VehicleClassification_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fobject_2eproto);
  return file_level_enum_descriptors_osi_5fobject_2eproto[7];
}
bool MovingObject_VehicleClassification_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_UNKNOWN;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_OTHER;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_SMALL_CAR;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_COMPACT_CAR;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_MEDIUM_CAR;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_LUXURY_CAR;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_DELIVERY_VAN;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_HEAVY_TRUCK;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_SEMITRAILER;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_TRAILER;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_MOTORBIKE;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_BICYCLE;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_BUS;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_TRAM;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_TRAIN;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_WHEELCHAIR;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::Type_MIN;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::Type_MAX;
constexpr int MovingObject_VehicleClassification::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MovingObject_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fobject_2eproto);
  return file_level_enum_descriptors_osi_5fobject_2eproto[8];
}
bool MovingObject_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MovingObject_Type MovingObject::TYPE_UNKNOWN;
constexpr MovingObject_Type MovingObject::TYPE_OTHER;
constexpr MovingObject_Type MovingObject::TYPE_VEHICLE;
constexpr MovingObject_Type MovingObject::TYPE_PEDESTRIAN;
constexpr MovingObject_Type MovingObject::TYPE_ANIMAL;
constexpr MovingObject_Type MovingObject::Type_MIN;
constexpr MovingObject_Type MovingObject::Type_MAX;
constexpr int MovingObject::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class StationaryObject_Classification_EmittingStructureAttribute::_Internal {
 public:
};

void StationaryObject_Classification_EmittingStructureAttribute::clear_wavelength_data() {
  wavelength_data_.Clear();
}
void StationaryObject_Classification_EmittingStructureAttribute::clear_emitted_spatial_signal_strength() {
  emitted_spatial_signal_strength_.Clear();
}
StationaryObject_Classification_EmittingStructureAttribute::StationaryObject_Classification_EmittingStructureAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  wavelength_data_(arena),
  emitted_spatial_signal_strength_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.StationaryObject.Classification.EmittingStructureAttribute)
}
StationaryObject_Classification_EmittingStructureAttribute::StationaryObject_Classification_EmittingStructureAttribute(const StationaryObject_Classification_EmittingStructureAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      wavelength_data_(from.wavelength_data_),
      emitted_spatial_signal_strength_(from.emitted_spatial_signal_strength_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:osi3.StationaryObject.Classification.EmittingStructureAttribute)
}

void StationaryObject_Classification_EmittingStructureAttribute::SharedCtor() {
}

StationaryObject_Classification_EmittingStructureAttribute::~StationaryObject_Classification_EmittingStructureAttribute() {
  // @@protoc_insertion_point(destructor:osi3.StationaryObject.Classification.EmittingStructureAttribute)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StationaryObject_Classification_EmittingStructureAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StationaryObject_Classification_EmittingStructureAttribute::ArenaDtor(void* object) {
  StationaryObject_Classification_EmittingStructureAttribute* _this = reinterpret_cast< StationaryObject_Classification_EmittingStructureAttribute* >(object);
  (void)_this;
}
void StationaryObject_Classification_EmittingStructureAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StationaryObject_Classification_EmittingStructureAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StationaryObject_Classification_EmittingStructureAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.StationaryObject.Classification.EmittingStructureAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wavelength_data_.Clear();
  emitted_spatial_signal_strength_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StationaryObject_Classification_EmittingStructureAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .osi3.WavelengthData wavelength_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_wavelength_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.SpatialSignalStrength emitted_spatial_signal_strength = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_emitted_spatial_signal_strength(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StationaryObject_Classification_EmittingStructureAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.StationaryObject.Classification.EmittingStructureAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .osi3.WavelengthData wavelength_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_wavelength_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_wavelength_data(i), target, stream);
  }

  // repeated .osi3.SpatialSignalStrength emitted_spatial_signal_strength = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_emitted_spatial_signal_strength_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_emitted_spatial_signal_strength(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.StationaryObject.Classification.EmittingStructureAttribute)
  return target;
}

size_t StationaryObject_Classification_EmittingStructureAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.StationaryObject.Classification.EmittingStructureAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.WavelengthData wavelength_data = 1;
  total_size += 1UL * this->_internal_wavelength_data_size();
  for (const auto& msg : this->wavelength_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.SpatialSignalStrength emitted_spatial_signal_strength = 3;
  total_size += 1UL * this->_internal_emitted_spatial_signal_strength_size();
  for (const auto& msg : this->emitted_spatial_signal_strength_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StationaryObject_Classification_EmittingStructureAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StationaryObject_Classification_EmittingStructureAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StationaryObject_Classification_EmittingStructureAttribute::GetClassData() const { return &_class_data_; }

void StationaryObject_Classification_EmittingStructureAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StationaryObject_Classification_EmittingStructureAttribute *>(to)->MergeFrom(
      static_cast<const StationaryObject_Classification_EmittingStructureAttribute &>(from));
}


void StationaryObject_Classification_EmittingStructureAttribute::MergeFrom(const StationaryObject_Classification_EmittingStructureAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.StationaryObject.Classification.EmittingStructureAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wavelength_data_.MergeFrom(from.wavelength_data_);
  emitted_spatial_signal_strength_.MergeFrom(from.emitted_spatial_signal_strength_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StationaryObject_Classification_EmittingStructureAttribute::CopyFrom(const StationaryObject_Classification_EmittingStructureAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.StationaryObject.Classification.EmittingStructureAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationaryObject_Classification_EmittingStructureAttribute::IsInitialized() const {
  return true;
}

void StationaryObject_Classification_EmittingStructureAttribute::InternalSwap(StationaryObject_Classification_EmittingStructureAttribute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  wavelength_data_.InternalSwap(&other->wavelength_data_);
  emitted_spatial_signal_strength_.InternalSwap(&other->emitted_spatial_signal_strength_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StationaryObject_Classification_EmittingStructureAttribute::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fobject_2eproto_getter, &descriptor_table_osi_5fobject_2eproto_once,
      file_level_metadata_osi_5fobject_2eproto[0]);
}

// ===================================================================

class StationaryObject_Classification::_Internal {
 public:
  using HasBits = decltype(std::declval<StationaryObject_Classification>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_material(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_density(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::osi3::StationaryObject_Classification_EmittingStructureAttribute& emitting_structure_attribute(const StationaryObject_Classification* msg);
  static void set_has_emitting_structure_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osi3::StationaryObject_Classification_EmittingStructureAttribute&
StationaryObject_Classification::_Internal::emitting_structure_attribute(const StationaryObject_Classification* msg) {
  return *msg->emitting_structure_attribute_;
}
void StationaryObject_Classification::clear_assigned_lane_id() {
  assigned_lane_id_.Clear();
}
StationaryObject_Classification::StationaryObject_Classification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  assigned_lane_id_(arena),
  assigned_lane_percentage_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.StationaryObject.Classification)
}
StationaryObject_Classification::StationaryObject_Classification(const StationaryObject_Classification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      assigned_lane_id_(from.assigned_lane_id_),
      assigned_lane_percentage_(from.assigned_lane_percentage_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_emitting_structure_attribute()) {
    emitting_structure_attribute_ = new ::osi3::StationaryObject_Classification_EmittingStructureAttribute(*from.emitting_structure_attribute_);
  } else {
    emitting_structure_attribute_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&type_)) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:osi3.StationaryObject.Classification)
}

void StationaryObject_Classification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&emitting_structure_attribute_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&emitting_structure_attribute_)) + sizeof(color_));
}

StationaryObject_Classification::~StationaryObject_Classification() {
  // @@protoc_insertion_point(destructor:osi3.StationaryObject.Classification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StationaryObject_Classification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete emitting_structure_attribute_;
}

void StationaryObject_Classification::ArenaDtor(void* object) {
  StationaryObject_Classification* _this = reinterpret_cast< StationaryObject_Classification* >(object);
  (void)_this;
}
void StationaryObject_Classification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StationaryObject_Classification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StationaryObject_Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.StationaryObject.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assigned_lane_id_.Clear();
  assigned_lane_percentage_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(emitting_structure_attribute_ != nullptr);
    emitting_structure_attribute_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&color_) -
        reinterpret_cast<char*>(&type_)) + sizeof(color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StationaryObject_Classification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.StationaryObject.Classification.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::StationaryObject_Classification_Type_IsValid(val))) {
            _internal_set_type(static_cast<::osi3::StationaryObject_Classification_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.StationaryObject.Classification.Material material = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::StationaryObject_Classification_Material_IsValid(val))) {
            _internal_set_material(static_cast<::osi3::StationaryObject_Classification_Material>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.StationaryObject.Classification.Density density = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::StationaryObject_Classification_Density_IsValid(val))) {
            _internal_set_density(static_cast<::osi3::StationaryObject_Classification_Density>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.StationaryObject.Classification.Color color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::StationaryObject_Classification_Color_IsValid(val))) {
            _internal_set_color(static_cast<::osi3::StationaryObject_Classification_Color>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.StationaryObject.Classification.EmittingStructureAttribute emitting_structure_attribute = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_emitting_structure_attribute(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Identifier assigned_lane_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assigned_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated double assigned_lane_percentage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_assigned_lane_percentage(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<57>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_assigned_lane_percentage(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StationaryObject_Classification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.StationaryObject.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.StationaryObject.Classification.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .osi3.StationaryObject.Classification.Material material = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_material(), target);
  }

  // optional .osi3.StationaryObject.Classification.Density density = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_density(), target);
  }

  // optional .osi3.StationaryObject.Classification.Color color = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_color(), target);
  }

  // optional .osi3.StationaryObject.Classification.EmittingStructureAttribute emitting_structure_attribute = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::emitting_structure_attribute(this), target, stream);
  }

  // repeated .osi3.Identifier assigned_lane_id = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_assigned_lane_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_assigned_lane_id(i), target, stream);
  }

  // repeated double assigned_lane_percentage = 7;
  for (int i = 0, n = this->_internal_assigned_lane_percentage_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_assigned_lane_percentage(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.StationaryObject.Classification)
  return target;
}

size_t StationaryObject_Classification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.StationaryObject.Classification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Identifier assigned_lane_id = 6;
  total_size += 1UL * this->_internal_assigned_lane_id_size();
  for (const auto& msg : this->assigned_lane_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double assigned_lane_percentage = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_assigned_lane_percentage_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_assigned_lane_percentage_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .osi3.StationaryObject.Classification.EmittingStructureAttribute emitting_structure_attribute = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *emitting_structure_attribute_);
    }

    // optional .osi3.StationaryObject.Classification.Type type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .osi3.StationaryObject.Classification.Material material = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_material());
    }

    // optional .osi3.StationaryObject.Classification.Density density = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_density());
    }

    // optional .osi3.StationaryObject.Classification.Color color = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_color());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StationaryObject_Classification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StationaryObject_Classification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StationaryObject_Classification::GetClassData() const { return &_class_data_; }

void StationaryObject_Classification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StationaryObject_Classification *>(to)->MergeFrom(
      static_cast<const StationaryObject_Classification &>(from));
}


void StationaryObject_Classification::MergeFrom(const StationaryObject_Classification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.StationaryObject.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assigned_lane_id_.MergeFrom(from.assigned_lane_id_);
  assigned_lane_percentage_.MergeFrom(from.assigned_lane_percentage_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_emitting_structure_attribute()->::osi3::StationaryObject_Classification_EmittingStructureAttribute::MergeFrom(from._internal_emitting_structure_attribute());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      material_ = from.material_;
    }
    if (cached_has_bits & 0x00000008u) {
      density_ = from.density_;
    }
    if (cached_has_bits & 0x00000010u) {
      color_ = from.color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StationaryObject_Classification::CopyFrom(const StationaryObject_Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.StationaryObject.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationaryObject_Classification::IsInitialized() const {
  return true;
}

void StationaryObject_Classification::InternalSwap(StationaryObject_Classification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  assigned_lane_id_.InternalSwap(&other->assigned_lane_id_);
  assigned_lane_percentage_.InternalSwap(&other->assigned_lane_percentage_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StationaryObject_Classification, color_)
      + sizeof(StationaryObject_Classification::color_)
      - PROTOBUF_FIELD_OFFSET(StationaryObject_Classification, emitting_structure_attribute_)>(
          reinterpret_cast<char*>(&emitting_structure_attribute_),
          reinterpret_cast<char*>(&other->emitting_structure_attribute_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StationaryObject_Classification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fobject_2eproto_getter, &descriptor_table_osi_5fobject_2eproto_once,
      file_level_metadata_osi_5fobject_2eproto[1]);
}

// ===================================================================

class StationaryObject::_Internal {
 public:
  using HasBits = decltype(std::declval<StationaryObject>()._has_bits_);
  static const ::osi3::Identifier& id(const StationaryObject* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::BaseStationary& base(const StationaryObject* msg);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::osi3::StationaryObject_Classification& classification(const StationaryObject* msg);
  static void set_has_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_model_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::ColorDescription& color_description(const StationaryObject* msg);
  static void set_has_color_description(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::osi3::Identifier&
StationaryObject::_Internal::id(const StationaryObject* msg) {
  return *msg->id_;
}
const ::osi3::BaseStationary&
StationaryObject::_Internal::base(const StationaryObject* msg) {
  return *msg->base_;
}
const ::osi3::StationaryObject_Classification&
StationaryObject::_Internal::classification(const StationaryObject* msg) {
  return *msg->classification_;
}
const ::osi3::ColorDescription&
StationaryObject::_Internal::color_description(const StationaryObject* msg) {
  return *msg->color_description_;
}
void StationaryObject::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void StationaryObject::clear_base() {
  if (base_ != nullptr) base_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void StationaryObject::clear_source_reference() {
  source_reference_.Clear();
}
void StationaryObject::clear_color_description() {
  if (color_description_ != nullptr) color_description_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
StationaryObject::StationaryObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  source_reference_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.StationaryObject)
}
StationaryObject::StationaryObject(const StationaryObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      source_reference_(from.source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_model_reference()) {
    model_reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_reference(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    id_ = new ::osi3::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_base()) {
    base_ = new ::osi3::BaseStationary(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_classification()) {
    classification_ = new ::osi3::StationaryObject_Classification(*from.classification_);
  } else {
    classification_ = nullptr;
  }
  if (from._internal_has_color_description()) {
    color_description_ = new ::osi3::ColorDescription(*from.color_description_);
  } else {
    color_description_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.StationaryObject)
}

void StationaryObject::SharedCtor() {
model_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&color_description_) -
    reinterpret_cast<char*>(&id_)) + sizeof(color_description_));
}

StationaryObject::~StationaryObject() {
  // @@protoc_insertion_point(destructor:osi3.StationaryObject)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StationaryObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete classification_;
  if (this != internal_default_instance()) delete color_description_;
}

void StationaryObject::ArenaDtor(void* object) {
  StationaryObject* _this = reinterpret_cast< StationaryObject* >(object);
  (void)_this;
}
void StationaryObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StationaryObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StationaryObject::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.StationaryObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      model_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(base_ != nullptr);
      base_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(classification_ != nullptr);
      classification_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(color_description_ != nullptr);
      color_description_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StationaryObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Identifier id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.BaseStationary base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.StationaryObject.Classification classification = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_classification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string model_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_model_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "osi3.StationaryObject.model_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.ExternalReference source_reference = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_source_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.ColorDescription color_description = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_color_description(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StationaryObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.StationaryObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.Identifier id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // optional .osi3.BaseStationary base = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::base(this), target, stream);
  }

  // optional .osi3.StationaryObject.Classification classification = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::classification(this), target, stream);
  }

  // optional string model_reference = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model_reference().data(), static_cast<int>(this->_internal_model_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.StationaryObject.model_reference");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_model_reference(), target);
  }

  // repeated .osi3.ExternalReference source_reference = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_source_reference_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_source_reference(i), target, stream);
  }

  // optional .osi3.ColorDescription color_description = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::color_description(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.StationaryObject)
  return target;
}

size_t StationaryObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.StationaryObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.ExternalReference source_reference = 5;
  total_size += 1UL * this->_internal_source_reference_size();
  for (const auto& msg : this->source_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string model_reference = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model_reference());
    }

    // optional .osi3.Identifier id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .osi3.BaseStationary base = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *base_);
    }

    // optional .osi3.StationaryObject.Classification classification = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *classification_);
    }

    // optional .osi3.ColorDescription color_description = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_description_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StationaryObject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StationaryObject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StationaryObject::GetClassData() const { return &_class_data_; }

void StationaryObject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StationaryObject *>(to)->MergeFrom(
      static_cast<const StationaryObject &>(from));
}


void StationaryObject::MergeFrom(const StationaryObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.StationaryObject)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_reference_.MergeFrom(from.source_reference_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_model_reference(from._internal_model_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_id()->::osi3::Identifier::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_base()->::osi3::BaseStationary::MergeFrom(from._internal_base());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_classification()->::osi3::StationaryObject_Classification::MergeFrom(from._internal_classification());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_color_description()->::osi3::ColorDescription::MergeFrom(from._internal_color_description());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StationaryObject::CopyFrom(const StationaryObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.StationaryObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationaryObject::IsInitialized() const {
  return true;
}

void StationaryObject::InternalSwap(StationaryObject* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  source_reference_.InternalSwap(&other->source_reference_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_reference_, lhs_arena,
      &other->model_reference_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StationaryObject, color_description_)
      + sizeof(StationaryObject::color_description_)
      - PROTOBUF_FIELD_OFFSET(StationaryObject, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StationaryObject::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fobject_2eproto_getter, &descriptor_table_osi_5fobject_2eproto_once,
      file_level_metadata_osi_5fobject_2eproto[2]);
}

// ===================================================================

class MovingObject_VehicleAttributes_WheelData::_Internal {
 public:
  using HasBits = decltype(std::declval<MovingObject_VehicleAttributes_WheelData>()._has_bits_);
  static void set_has_axle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::osi3::Vector3d& position(const MovingObject_VehicleAttributes_WheelData* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_wheel_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rim_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::osi3::Orientation3d& orientation(const MovingObject_VehicleAttributes_WheelData* msg);
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rotation_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_model_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osi3::Vector3d&
MovingObject_VehicleAttributes_WheelData::_Internal::position(const MovingObject_VehicleAttributes_WheelData* msg) {
  return *msg->position_;
}
const ::osi3::Orientation3d&
MovingObject_VehicleAttributes_WheelData::_Internal::orientation(const MovingObject_VehicleAttributes_WheelData* msg) {
  return *msg->orientation_;
}
void MovingObject_VehicleAttributes_WheelData::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void MovingObject_VehicleAttributes_WheelData::clear_orientation() {
  if (orientation_ != nullptr) orientation_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
MovingObject_VehicleAttributes_WheelData::MovingObject_VehicleAttributes_WheelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.MovingObject.VehicleAttributes.WheelData)
}
MovingObject_VehicleAttributes_WheelData::MovingObject_VehicleAttributes_WheelData(const MovingObject_VehicleAttributes_WheelData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_model_reference()) {
    model_reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_reference(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_position()) {
    position_ = new ::osi3::Vector3d(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::osi3::Orientation3d(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  ::memcpy(&axle_, &from.axle_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotation_rate_) -
    reinterpret_cast<char*>(&axle_)) + sizeof(rotation_rate_));
  // @@protoc_insertion_point(copy_constructor:osi3.MovingObject.VehicleAttributes.WheelData)
}

void MovingObject_VehicleAttributes_WheelData::SharedCtor() {
model_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rotation_rate_) -
    reinterpret_cast<char*>(&position_)) + sizeof(rotation_rate_));
}

MovingObject_VehicleAttributes_WheelData::~MovingObject_VehicleAttributes_WheelData() {
  // @@protoc_insertion_point(destructor:osi3.MovingObject.VehicleAttributes.WheelData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MovingObject_VehicleAttributes_WheelData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
}

void MovingObject_VehicleAttributes_WheelData::ArenaDtor(void* object) {
  MovingObject_VehicleAttributes_WheelData* _this = reinterpret_cast< MovingObject_VehicleAttributes_WheelData* >(object);
  (void)_this;
}
void MovingObject_VehicleAttributes_WheelData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MovingObject_VehicleAttributes_WheelData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MovingObject_VehicleAttributes_WheelData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.MovingObject.VehicleAttributes.WheelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      model_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(orientation_ != nullptr);
      orientation_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&axle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&width_) -
        reinterpret_cast<char*>(&axle_)) + sizeof(width_));
  }
  rotation_rate_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MovingObject_VehicleAttributes_WheelData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 axle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_axle(&has_bits);
          axle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Vector3d position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double wheel_radius = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_wheel_radius(&has_bits);
          wheel_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double rim_radius = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_rim_radius(&has_bits);
          rim_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Orientation3d orientation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double rotation_rate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_rotation_rate(&has_bits);
          rotation_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string model_reference = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_model_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "osi3.MovingObject.VehicleAttributes.WheelData.model_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MovingObject_VehicleAttributes_WheelData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.MovingObject.VehicleAttributes.WheelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 axle = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_axle(), target);
  }

  // optional uint32 index = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  // optional .osi3.Vector3d position = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::position(this), target, stream);
  }

  // optional double wheel_radius = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_wheel_radius(), target);
  }

  // optional double rim_radius = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_rim_radius(), target);
  }

  // optional double width = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_width(), target);
  }

  // optional .osi3.Orientation3d orientation = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::orientation(this), target, stream);
  }

  // optional double rotation_rate = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_rotation_rate(), target);
  }

  // optional string model_reference = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model_reference().data(), static_cast<int>(this->_internal_model_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.MovingObject.VehicleAttributes.WheelData.model_reference");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_model_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.MovingObject.VehicleAttributes.WheelData)
  return target;
}

size_t MovingObject_VehicleAttributes_WheelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.MovingObject.VehicleAttributes.WheelData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string model_reference = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model_reference());
    }

    // optional .osi3.Vector3d position = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .osi3.Orientation3d orientation = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *orientation_);
    }

    // optional uint32 axle = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_axle());
    }

    // optional uint32 index = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
    }

    // optional double wheel_radius = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double rim_radius = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double width = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional double rotation_rate = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MovingObject_VehicleAttributes_WheelData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MovingObject_VehicleAttributes_WheelData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MovingObject_VehicleAttributes_WheelData::GetClassData() const { return &_class_data_; }

void MovingObject_VehicleAttributes_WheelData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MovingObject_VehicleAttributes_WheelData *>(to)->MergeFrom(
      static_cast<const MovingObject_VehicleAttributes_WheelData &>(from));
}


void MovingObject_VehicleAttributes_WheelData::MergeFrom(const MovingObject_VehicleAttributes_WheelData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.MovingObject.VehicleAttributes.WheelData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_model_reference(from._internal_model_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_position()->::osi3::Vector3d::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_orientation()->::osi3::Orientation3d::MergeFrom(from._internal_orientation());
    }
    if (cached_has_bits & 0x00000008u) {
      axle_ = from.axle_;
    }
    if (cached_has_bits & 0x00000010u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000020u) {
      wheel_radius_ = from.wheel_radius_;
    }
    if (cached_has_bits & 0x00000040u) {
      rim_radius_ = from.rim_radius_;
    }
    if (cached_has_bits & 0x00000080u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_rotation_rate(from._internal_rotation_rate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MovingObject_VehicleAttributes_WheelData::CopyFrom(const MovingObject_VehicleAttributes_WheelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.MovingObject.VehicleAttributes.WheelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovingObject_VehicleAttributes_WheelData::IsInitialized() const {
  return true;
}

void MovingObject_VehicleAttributes_WheelData::InternalSwap(MovingObject_VehicleAttributes_WheelData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_reference_, lhs_arena,
      &other->model_reference_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MovingObject_VehicleAttributes_WheelData, rotation_rate_)
      + sizeof(MovingObject_VehicleAttributes_WheelData::rotation_rate_)
      - PROTOBUF_FIELD_OFFSET(MovingObject_VehicleAttributes_WheelData, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MovingObject_VehicleAttributes_WheelData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fobject_2eproto_getter, &descriptor_table_osi_5fobject_2eproto_once,
      file_level_metadata_osi_5fobject_2eproto[3]);
}

// ===================================================================

class MovingObject_VehicleAttributes::_Internal {
 public:
  using HasBits = decltype(std::declval<MovingObject_VehicleAttributes>()._has_bits_);
  static const ::osi3::Identifier& driver_id(const MovingObject_VehicleAttributes* msg);
  static void set_has_driver_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_radius_wheel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_number_wheels(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::osi3::Vector3d& bbcenter_to_rear(const MovingObject_VehicleAttributes* msg);
  static void set_has_bbcenter_to_rear(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::Vector3d& bbcenter_to_front(const MovingObject_VehicleAttributes* msg);
  static void set_has_bbcenter_to_front(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ground_clearance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_steering_wheel_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::osi3::Identifier&
MovingObject_VehicleAttributes::_Internal::driver_id(const MovingObject_VehicleAttributes* msg) {
  return *msg->driver_id_;
}
const ::osi3::Vector3d&
MovingObject_VehicleAttributes::_Internal::bbcenter_to_rear(const MovingObject_VehicleAttributes* msg) {
  return *msg->bbcenter_to_rear_;
}
const ::osi3::Vector3d&
MovingObject_VehicleAttributes::_Internal::bbcenter_to_front(const MovingObject_VehicleAttributes* msg) {
  return *msg->bbcenter_to_front_;
}
void MovingObject_VehicleAttributes::clear_driver_id() {
  if (driver_id_ != nullptr) driver_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MovingObject_VehicleAttributes::clear_bbcenter_to_rear() {
  if (bbcenter_to_rear_ != nullptr) bbcenter_to_rear_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void MovingObject_VehicleAttributes::clear_bbcenter_to_front() {
  if (bbcenter_to_front_ != nullptr) bbcenter_to_front_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
MovingObject_VehicleAttributes::MovingObject_VehicleAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  wheel_data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.MovingObject.VehicleAttributes)
}
MovingObject_VehicleAttributes::MovingObject_VehicleAttributes(const MovingObject_VehicleAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      wheel_data_(from.wheel_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_driver_id()) {
    driver_id_ = new ::osi3::Identifier(*from.driver_id_);
  } else {
    driver_id_ = nullptr;
  }
  if (from._internal_has_bbcenter_to_rear()) {
    bbcenter_to_rear_ = new ::osi3::Vector3d(*from.bbcenter_to_rear_);
  } else {
    bbcenter_to_rear_ = nullptr;
  }
  if (from._internal_has_bbcenter_to_front()) {
    bbcenter_to_front_ = new ::osi3::Vector3d(*from.bbcenter_to_front_);
  } else {
    bbcenter_to_front_ = nullptr;
  }
  ::memcpy(&radius_wheel_, &from.radius_wheel_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_wheels_) -
    reinterpret_cast<char*>(&radius_wheel_)) + sizeof(number_wheels_));
  // @@protoc_insertion_point(copy_constructor:osi3.MovingObject.VehicleAttributes)
}

void MovingObject_VehicleAttributes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&driver_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&number_wheels_) -
    reinterpret_cast<char*>(&driver_id_)) + sizeof(number_wheels_));
}

MovingObject_VehicleAttributes::~MovingObject_VehicleAttributes() {
  // @@protoc_insertion_point(destructor:osi3.MovingObject.VehicleAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MovingObject_VehicleAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete driver_id_;
  if (this != internal_default_instance()) delete bbcenter_to_rear_;
  if (this != internal_default_instance()) delete bbcenter_to_front_;
}

void MovingObject_VehicleAttributes::ArenaDtor(void* object) {
  MovingObject_VehicleAttributes* _this = reinterpret_cast< MovingObject_VehicleAttributes* >(object);
  (void)_this;
}
void MovingObject_VehicleAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MovingObject_VehicleAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MovingObject_VehicleAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.MovingObject.VehicleAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wheel_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(driver_id_ != nullptr);
      driver_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bbcenter_to_rear_ != nullptr);
      bbcenter_to_rear_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(bbcenter_to_front_ != nullptr);
      bbcenter_to_front_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&radius_wheel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_wheels_) -
        reinterpret_cast<char*>(&radius_wheel_)) + sizeof(number_wheels_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MovingObject_VehicleAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Identifier driver_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_driver_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double radius_wheel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_radius_wheel(&has_bits);
          radius_wheel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 number_wheels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_number_wheels(&has_bits);
          number_wheels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Vector3d bbcenter_to_rear = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bbcenter_to_rear(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Vector3d bbcenter_to_front = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bbcenter_to_front(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double ground_clearance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_ground_clearance(&has_bits);
          ground_clearance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.MovingObject.VehicleAttributes.WheelData wheel_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_wheel_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional double steering_wheel_angle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_steering_wheel_angle(&has_bits);
          steering_wheel_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MovingObject_VehicleAttributes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.MovingObject.VehicleAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.Identifier driver_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::driver_id(this), target, stream);
  }

  // optional double radius_wheel = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_radius_wheel(), target);
  }

  // optional uint32 number_wheels = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_number_wheels(), target);
  }

  // optional .osi3.Vector3d bbcenter_to_rear = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bbcenter_to_rear(this), target, stream);
  }

  // optional .osi3.Vector3d bbcenter_to_front = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::bbcenter_to_front(this), target, stream);
  }

  // optional double ground_clearance = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_ground_clearance(), target);
  }

  // repeated .osi3.MovingObject.VehicleAttributes.WheelData wheel_data = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_wheel_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_wheel_data(i), target, stream);
  }

  // optional double steering_wheel_angle = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_steering_wheel_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.MovingObject.VehicleAttributes)
  return target;
}

size_t MovingObject_VehicleAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.MovingObject.VehicleAttributes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.MovingObject.VehicleAttributes.WheelData wheel_data = 7;
  total_size += 1UL * this->_internal_wheel_data_size();
  for (const auto& msg : this->wheel_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .osi3.Identifier driver_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *driver_id_);
    }

    // optional .osi3.Vector3d bbcenter_to_rear = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bbcenter_to_rear_);
    }

    // optional .osi3.Vector3d bbcenter_to_front = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bbcenter_to_front_);
    }

    // optional double radius_wheel = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double ground_clearance = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double steering_wheel_angle = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 number_wheels = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_number_wheels());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MovingObject_VehicleAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MovingObject_VehicleAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MovingObject_VehicleAttributes::GetClassData() const { return &_class_data_; }

void MovingObject_VehicleAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MovingObject_VehicleAttributes *>(to)->MergeFrom(
      static_cast<const MovingObject_VehicleAttributes &>(from));
}


void MovingObject_VehicleAttributes::MergeFrom(const MovingObject_VehicleAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.MovingObject.VehicleAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wheel_data_.MergeFrom(from.wheel_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_driver_id()->::osi3::Identifier::MergeFrom(from._internal_driver_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bbcenter_to_rear()->::osi3::Vector3d::MergeFrom(from._internal_bbcenter_to_rear());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_bbcenter_to_front()->::osi3::Vector3d::MergeFrom(from._internal_bbcenter_to_front());
    }
    if (cached_has_bits & 0x00000008u) {
      radius_wheel_ = from.radius_wheel_;
    }
    if (cached_has_bits & 0x00000010u) {
      ground_clearance_ = from.ground_clearance_;
    }
    if (cached_has_bits & 0x00000020u) {
      steering_wheel_angle_ = from.steering_wheel_angle_;
    }
    if (cached_has_bits & 0x00000040u) {
      number_wheels_ = from.number_wheels_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MovingObject_VehicleAttributes::CopyFrom(const MovingObject_VehicleAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.MovingObject.VehicleAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovingObject_VehicleAttributes::IsInitialized() const {
  return true;
}

void MovingObject_VehicleAttributes::InternalSwap(MovingObject_VehicleAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  wheel_data_.InternalSwap(&other->wheel_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MovingObject_VehicleAttributes, number_wheels_)
      + sizeof(MovingObject_VehicleAttributes::number_wheels_)
      - PROTOBUF_FIELD_OFFSET(MovingObject_VehicleAttributes, driver_id_)>(
          reinterpret_cast<char*>(&driver_id_),
          reinterpret_cast<char*>(&other->driver_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MovingObject_VehicleAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fobject_2eproto_getter, &descriptor_table_osi_5fobject_2eproto_once,
      file_level_metadata_osi_5fobject_2eproto[4]);
}

// ===================================================================

class MovingObject_MovingObjectClassification::_Internal {
 public:
};

void MovingObject_MovingObjectClassification::clear_assigned_lane_id() {
  assigned_lane_id_.Clear();
}
MovingObject_MovingObjectClassification::MovingObject_MovingObjectClassification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  assigned_lane_id_(arena),
  assigned_lane_percentage_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.MovingObject.MovingObjectClassification)
}
MovingObject_MovingObjectClassification::MovingObject_MovingObjectClassification(const MovingObject_MovingObjectClassification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      assigned_lane_id_(from.assigned_lane_id_),
      assigned_lane_percentage_(from.assigned_lane_percentage_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:osi3.MovingObject.MovingObjectClassification)
}

void MovingObject_MovingObjectClassification::SharedCtor() {
}

MovingObject_MovingObjectClassification::~MovingObject_MovingObjectClassification() {
  // @@protoc_insertion_point(destructor:osi3.MovingObject.MovingObjectClassification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MovingObject_MovingObjectClassification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MovingObject_MovingObjectClassification::ArenaDtor(void* object) {
  MovingObject_MovingObjectClassification* _this = reinterpret_cast< MovingObject_MovingObjectClassification* >(object);
  (void)_this;
}
void MovingObject_MovingObjectClassification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MovingObject_MovingObjectClassification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MovingObject_MovingObjectClassification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.MovingObject.MovingObjectClassification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assigned_lane_id_.Clear();
  assigned_lane_percentage_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MovingObject_MovingObjectClassification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .osi3.Identifier assigned_lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assigned_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated double assigned_lane_percentage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_assigned_lane_percentage(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_assigned_lane_percentage(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MovingObject_MovingObjectClassification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.MovingObject.MovingObjectClassification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .osi3.Identifier assigned_lane_id = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_assigned_lane_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_assigned_lane_id(i), target, stream);
  }

  // repeated double assigned_lane_percentage = 2;
  for (int i = 0, n = this->_internal_assigned_lane_percentage_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_assigned_lane_percentage(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.MovingObject.MovingObjectClassification)
  return target;
}

size_t MovingObject_MovingObjectClassification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.MovingObject.MovingObjectClassification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Identifier assigned_lane_id = 1;
  total_size += 1UL * this->_internal_assigned_lane_id_size();
  for (const auto& msg : this->assigned_lane_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double assigned_lane_percentage = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_assigned_lane_percentage_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_assigned_lane_percentage_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MovingObject_MovingObjectClassification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MovingObject_MovingObjectClassification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MovingObject_MovingObjectClassification::GetClassData() const { return &_class_data_; }

void MovingObject_MovingObjectClassification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MovingObject_MovingObjectClassification *>(to)->MergeFrom(
      static_cast<const MovingObject_MovingObjectClassification &>(from));
}


void MovingObject_MovingObjectClassification::MergeFrom(const MovingObject_MovingObjectClassification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.MovingObject.MovingObjectClassification)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assigned_lane_id_.MergeFrom(from.assigned_lane_id_);
  assigned_lane_percentage_.MergeFrom(from.assigned_lane_percentage_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MovingObject_MovingObjectClassification::CopyFrom(const MovingObject_MovingObjectClassification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.MovingObject.MovingObjectClassification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovingObject_MovingObjectClassification::IsInitialized() const {
  return true;
}

void MovingObject_MovingObjectClassification::InternalSwap(MovingObject_MovingObjectClassification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  assigned_lane_id_.InternalSwap(&other->assigned_lane_id_);
  assigned_lane_percentage_.InternalSwap(&other->assigned_lane_percentage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MovingObject_MovingObjectClassification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fobject_2eproto_getter, &descriptor_table_osi_5fobject_2eproto_once,
      file_level_metadata_osi_5fobject_2eproto[5]);
}

// ===================================================================

class MovingObject_VehicleClassification_LightState::_Internal {
 public:
  using HasBits = decltype(std::declval<MovingObject_VehicleClassification_LightState>()._has_bits_);
  static void set_has_indicator_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_front_fog_light(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rear_fog_light(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_head_light(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_high_beam(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_reversing_light(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_brake_light_state(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_license_plate_illumination_rear(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_emergency_vehicle_illumination(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_service_vehicle_illumination(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

MovingObject_VehicleClassification_LightState::MovingObject_VehicleClassification_LightState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.MovingObject.VehicleClassification.LightState)
}
MovingObject_VehicleClassification_LightState::MovingObject_VehicleClassification_LightState(const MovingObject_VehicleClassification_LightState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&indicator_state_, &from.indicator_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_vehicle_illumination_) -
    reinterpret_cast<char*>(&indicator_state_)) + sizeof(service_vehicle_illumination_));
  // @@protoc_insertion_point(copy_constructor:osi3.MovingObject.VehicleClassification.LightState)
}

void MovingObject_VehicleClassification_LightState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&indicator_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&service_vehicle_illumination_) -
    reinterpret_cast<char*>(&indicator_state_)) + sizeof(service_vehicle_illumination_));
}

MovingObject_VehicleClassification_LightState::~MovingObject_VehicleClassification_LightState() {
  // @@protoc_insertion_point(destructor:osi3.MovingObject.VehicleClassification.LightState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MovingObject_VehicleClassification_LightState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MovingObject_VehicleClassification_LightState::ArenaDtor(void* object) {
  MovingObject_VehicleClassification_LightState* _this = reinterpret_cast< MovingObject_VehicleClassification_LightState* >(object);
  (void)_this;
}
void MovingObject_VehicleClassification_LightState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MovingObject_VehicleClassification_LightState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MovingObject_VehicleClassification_LightState::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.MovingObject.VehicleClassification.LightState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&indicator_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&license_plate_illumination_rear_) -
        reinterpret_cast<char*>(&indicator_state_)) + sizeof(license_plate_illumination_rear_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&emergency_vehicle_illumination_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_vehicle_illumination_) -
        reinterpret_cast<char*>(&emergency_vehicle_illumination_)) + sizeof(service_vehicle_illumination_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MovingObject_VehicleClassification_LightState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.MovingObject.VehicleClassification.LightState.IndicatorState indicator_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::MovingObject_VehicleClassification_LightState_IndicatorState_IsValid(val))) {
            _internal_set_indicator_state(static_cast<::osi3::MovingObject_VehicleClassification_LightState_IndicatorState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState front_fog_light = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(val))) {
            _internal_set_front_fog_light(static_cast<::osi3::MovingObject_VehicleClassification_LightState_GenericLightState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState rear_fog_light = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(val))) {
            _internal_set_rear_fog_light(static_cast<::osi3::MovingObject_VehicleClassification_LightState_GenericLightState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState head_light = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(val))) {
            _internal_set_head_light(static_cast<::osi3::MovingObject_VehicleClassification_LightState_GenericLightState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState high_beam = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(val))) {
            _internal_set_high_beam(static_cast<::osi3::MovingObject_VehicleClassification_LightState_GenericLightState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState reversing_light = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(val))) {
            _internal_set_reversing_light(static_cast<::osi3::MovingObject_VehicleClassification_LightState_GenericLightState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MovingObject.VehicleClassification.LightState.BrakeLightState brake_light_state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::MovingObject_VehicleClassification_LightState_BrakeLightState_IsValid(val))) {
            _internal_set_brake_light_state(static_cast<::osi3::MovingObject_VehicleClassification_LightState_BrakeLightState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState license_plate_illumination_rear = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(val))) {
            _internal_set_license_plate_illumination_rear(static_cast<::osi3::MovingObject_VehicleClassification_LightState_GenericLightState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState emergency_vehicle_illumination = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(val))) {
            _internal_set_emergency_vehicle_illumination(static_cast<::osi3::MovingObject_VehicleClassification_LightState_GenericLightState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState service_vehicle_illumination = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(val))) {
            _internal_set_service_vehicle_illumination(static_cast<::osi3::MovingObject_VehicleClassification_LightState_GenericLightState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MovingObject_VehicleClassification_LightState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.MovingObject.VehicleClassification.LightState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.MovingObject.VehicleClassification.LightState.IndicatorState indicator_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_indicator_state(), target);
  }

  // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState front_fog_light = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_front_fog_light(), target);
  }

  // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState rear_fog_light = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_rear_fog_light(), target);
  }

  // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState head_light = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_head_light(), target);
  }

  // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState high_beam = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_high_beam(), target);
  }

  // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState reversing_light = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_reversing_light(), target);
  }

  // optional .osi3.MovingObject.VehicleClassification.LightState.BrakeLightState brake_light_state = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_brake_light_state(), target);
  }

  // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState license_plate_illumination_rear = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_license_plate_illumination_rear(), target);
  }

  // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState emergency_vehicle_illumination = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_emergency_vehicle_illumination(), target);
  }

  // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState service_vehicle_illumination = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_service_vehicle_illumination(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.MovingObject.VehicleClassification.LightState)
  return target;
}

size_t MovingObject_VehicleClassification_LightState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.MovingObject.VehicleClassification.LightState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .osi3.MovingObject.VehicleClassification.LightState.IndicatorState indicator_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_indicator_state());
    }

    // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState front_fog_light = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_front_fog_light());
    }

    // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState rear_fog_light = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rear_fog_light());
    }

    // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState head_light = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_head_light());
    }

    // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState high_beam = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_high_beam());
    }

    // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState reversing_light = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reversing_light());
    }

    // optional .osi3.MovingObject.VehicleClassification.LightState.BrakeLightState brake_light_state = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_brake_light_state());
    }

    // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState license_plate_illumination_rear = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_license_plate_illumination_rear());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState emergency_vehicle_illumination = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_emergency_vehicle_illumination());
    }

    // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState service_vehicle_illumination = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_service_vehicle_illumination());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MovingObject_VehicleClassification_LightState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MovingObject_VehicleClassification_LightState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MovingObject_VehicleClassification_LightState::GetClassData() const { return &_class_data_; }

void MovingObject_VehicleClassification_LightState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MovingObject_VehicleClassification_LightState *>(to)->MergeFrom(
      static_cast<const MovingObject_VehicleClassification_LightState &>(from));
}


void MovingObject_VehicleClassification_LightState::MergeFrom(const MovingObject_VehicleClassification_LightState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.MovingObject.VehicleClassification.LightState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      indicator_state_ = from.indicator_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      front_fog_light_ = from.front_fog_light_;
    }
    if (cached_has_bits & 0x00000004u) {
      rear_fog_light_ = from.rear_fog_light_;
    }
    if (cached_has_bits & 0x00000008u) {
      head_light_ = from.head_light_;
    }
    if (cached_has_bits & 0x00000010u) {
      high_beam_ = from.high_beam_;
    }
    if (cached_has_bits & 0x00000020u) {
      reversing_light_ = from.reversing_light_;
    }
    if (cached_has_bits & 0x00000040u) {
      brake_light_state_ = from.brake_light_state_;
    }
    if (cached_has_bits & 0x00000080u) {
      license_plate_illumination_rear_ = from.license_plate_illumination_rear_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      emergency_vehicle_illumination_ = from.emergency_vehicle_illumination_;
    }
    if (cached_has_bits & 0x00000200u) {
      service_vehicle_illumination_ = from.service_vehicle_illumination_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MovingObject_VehicleClassification_LightState::CopyFrom(const MovingObject_VehicleClassification_LightState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.MovingObject.VehicleClassification.LightState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovingObject_VehicleClassification_LightState::IsInitialized() const {
  return true;
}

void MovingObject_VehicleClassification_LightState::InternalSwap(MovingObject_VehicleClassification_LightState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MovingObject_VehicleClassification_LightState, service_vehicle_illumination_)
      + sizeof(MovingObject_VehicleClassification_LightState::service_vehicle_illumination_)
      - PROTOBUF_FIELD_OFFSET(MovingObject_VehicleClassification_LightState, indicator_state_)>(
          reinterpret_cast<char*>(&indicator_state_),
          reinterpret_cast<char*>(&other->indicator_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MovingObject_VehicleClassification_LightState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fobject_2eproto_getter, &descriptor_table_osi_5fobject_2eproto_once,
      file_level_metadata_osi_5fobject_2eproto[6]);
}

// ===================================================================

class MovingObject_VehicleClassification::_Internal {
 public:
  using HasBits = decltype(std::declval<MovingObject_VehicleClassification>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::osi3::MovingObject_VehicleClassification_LightState& light_state(const MovingObject_VehicleClassification* msg);
  static void set_has_light_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_has_trailer(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::osi3::Identifier& trailer_id(const MovingObject_VehicleClassification* msg);
  static void set_has_trailer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::osi3::MovingObject_VehicleClassification_LightState&
MovingObject_VehicleClassification::_Internal::light_state(const MovingObject_VehicleClassification* msg) {
  return *msg->light_state_;
}
const ::osi3::Identifier&
MovingObject_VehicleClassification::_Internal::trailer_id(const MovingObject_VehicleClassification* msg) {
  return *msg->trailer_id_;
}
void MovingObject_VehicleClassification::clear_trailer_id() {
  if (trailer_id_ != nullptr) trailer_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
MovingObject_VehicleClassification::MovingObject_VehicleClassification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.MovingObject.VehicleClassification)
}
MovingObject_VehicleClassification::MovingObject_VehicleClassification(const MovingObject_VehicleClassification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_light_state()) {
    light_state_ = new ::osi3::MovingObject_VehicleClassification_LightState(*from.light_state_);
  } else {
    light_state_ = nullptr;
  }
  if (from._internal_has_trailer_id()) {
    trailer_id_ = new ::osi3::Identifier(*from.trailer_id_);
  } else {
    trailer_id_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_trailer_) -
    reinterpret_cast<char*>(&type_)) + sizeof(has_trailer_));
  // @@protoc_insertion_point(copy_constructor:osi3.MovingObject.VehicleClassification)
}

void MovingObject_VehicleClassification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&light_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_trailer_) -
    reinterpret_cast<char*>(&light_state_)) + sizeof(has_trailer_));
}

MovingObject_VehicleClassification::~MovingObject_VehicleClassification() {
  // @@protoc_insertion_point(destructor:osi3.MovingObject.VehicleClassification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MovingObject_VehicleClassification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete light_state_;
  if (this != internal_default_instance()) delete trailer_id_;
}

void MovingObject_VehicleClassification::ArenaDtor(void* object) {
  MovingObject_VehicleClassification* _this = reinterpret_cast< MovingObject_VehicleClassification* >(object);
  (void)_this;
}
void MovingObject_VehicleClassification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MovingObject_VehicleClassification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MovingObject_VehicleClassification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.MovingObject.VehicleClassification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(light_state_ != nullptr);
      light_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(trailer_id_ != nullptr);
      trailer_id_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_trailer_) -
        reinterpret_cast<char*>(&type_)) + sizeof(has_trailer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MovingObject_VehicleClassification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.MovingObject.VehicleClassification.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::MovingObject_VehicleClassification_Type_IsValid(val))) {
            _internal_set_type(static_cast<::osi3::MovingObject_VehicleClassification_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MovingObject.VehicleClassification.LightState light_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_light_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_trailer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_has_trailer(&has_bits);
          has_trailer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Identifier trailer_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_trailer_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MovingObject_VehicleClassification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.MovingObject.VehicleClassification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.MovingObject.VehicleClassification.Type type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .osi3.MovingObject.VehicleClassification.LightState light_state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::light_state(this), target, stream);
  }

  // optional bool has_trailer = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_has_trailer(), target);
  }

  // optional .osi3.Identifier trailer_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::trailer_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.MovingObject.VehicleClassification)
  return target;
}

size_t MovingObject_VehicleClassification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.MovingObject.VehicleClassification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .osi3.MovingObject.VehicleClassification.LightState light_state = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *light_state_);
    }

    // optional .osi3.Identifier trailer_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trailer_id_);
    }

    // optional .osi3.MovingObject.VehicleClassification.Type type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional bool has_trailer = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MovingObject_VehicleClassification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MovingObject_VehicleClassification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MovingObject_VehicleClassification::GetClassData() const { return &_class_data_; }

void MovingObject_VehicleClassification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MovingObject_VehicleClassification *>(to)->MergeFrom(
      static_cast<const MovingObject_VehicleClassification &>(from));
}


void MovingObject_VehicleClassification::MergeFrom(const MovingObject_VehicleClassification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.MovingObject.VehicleClassification)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_light_state()->::osi3::MovingObject_VehicleClassification_LightState::MergeFrom(from._internal_light_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_trailer_id()->::osi3::Identifier::MergeFrom(from._internal_trailer_id());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      has_trailer_ = from.has_trailer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MovingObject_VehicleClassification::CopyFrom(const MovingObject_VehicleClassification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.MovingObject.VehicleClassification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovingObject_VehicleClassification::IsInitialized() const {
  return true;
}

void MovingObject_VehicleClassification::InternalSwap(MovingObject_VehicleClassification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MovingObject_VehicleClassification, has_trailer_)
      + sizeof(MovingObject_VehicleClassification::has_trailer_)
      - PROTOBUF_FIELD_OFFSET(MovingObject_VehicleClassification, light_state_)>(
          reinterpret_cast<char*>(&light_state_),
          reinterpret_cast<char*>(&other->light_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MovingObject_VehicleClassification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fobject_2eproto_getter, &descriptor_table_osi_5fobject_2eproto_once,
      file_level_metadata_osi_5fobject_2eproto[7]);
}

// ===================================================================

class MovingObject::_Internal {
 public:
  using HasBits = decltype(std::declval<MovingObject>()._has_bits_);
  static const ::osi3::Identifier& id(const MovingObject* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::BaseMoving& base(const MovingObject* msg);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::osi3::MovingObject_VehicleAttributes& vehicle_attributes(const MovingObject* msg);
  static void set_has_vehicle_attributes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::osi3::MovingObject_VehicleClassification& vehicle_classification(const MovingObject* msg);
  static void set_has_vehicle_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_model_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::MovingObject_MovingObjectClassification& moving_object_classification(const MovingObject* msg);
  static void set_has_moving_object_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::osi3::ColorDescription& color_description(const MovingObject* msg);
  static void set_has_color_description(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::osi3::Identifier&
MovingObject::_Internal::id(const MovingObject* msg) {
  return *msg->id_;
}
const ::osi3::BaseMoving&
MovingObject::_Internal::base(const MovingObject* msg) {
  return *msg->base_;
}
const ::osi3::MovingObject_VehicleAttributes&
MovingObject::_Internal::vehicle_attributes(const MovingObject* msg) {
  return *msg->vehicle_attributes_;
}
const ::osi3::MovingObject_VehicleClassification&
MovingObject::_Internal::vehicle_classification(const MovingObject* msg) {
  return *msg->vehicle_classification_;
}
const ::osi3::MovingObject_MovingObjectClassification&
MovingObject::_Internal::moving_object_classification(const MovingObject* msg) {
  return *msg->moving_object_classification_;
}
const ::osi3::ColorDescription&
MovingObject::_Internal::color_description(const MovingObject* msg) {
  return *msg->color_description_;
}
void MovingObject::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void MovingObject::clear_base() {
  if (base_ != nullptr) base_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void MovingObject::clear_assigned_lane_id() {
  assigned_lane_id_.Clear();
}
void MovingObject::clear_future_trajectory() {
  future_trajectory_.Clear();
}
void MovingObject::clear_source_reference() {
  source_reference_.Clear();
}
void MovingObject::clear_color_description() {
  if (color_description_ != nullptr) color_description_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
MovingObject::MovingObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  assigned_lane_id_(arena),
  future_trajectory_(arena),
  source_reference_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.MovingObject)
}
MovingObject::MovingObject(const MovingObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      assigned_lane_id_(from.assigned_lane_id_),
      future_trajectory_(from.future_trajectory_),
      source_reference_(from.source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_model_reference()) {
    model_reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_reference(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    id_ = new ::osi3::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_base()) {
    base_ = new ::osi3::BaseMoving(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_vehicle_attributes()) {
    vehicle_attributes_ = new ::osi3::MovingObject_VehicleAttributes(*from.vehicle_attributes_);
  } else {
    vehicle_attributes_ = nullptr;
  }
  if (from._internal_has_vehicle_classification()) {
    vehicle_classification_ = new ::osi3::MovingObject_VehicleClassification(*from.vehicle_classification_);
  } else {
    vehicle_classification_ = nullptr;
  }
  if (from._internal_has_moving_object_classification()) {
    moving_object_classification_ = new ::osi3::MovingObject_MovingObjectClassification(*from.moving_object_classification_);
  } else {
    moving_object_classification_ = nullptr;
  }
  if (from._internal_has_color_description()) {
    color_description_ = new ::osi3::ColorDescription(*from.color_description_);
  } else {
    color_description_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:osi3.MovingObject)
}

void MovingObject::SharedCtor() {
model_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

MovingObject::~MovingObject() {
  // @@protoc_insertion_point(destructor:osi3.MovingObject)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MovingObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete vehicle_attributes_;
  if (this != internal_default_instance()) delete vehicle_classification_;
  if (this != internal_default_instance()) delete moving_object_classification_;
  if (this != internal_default_instance()) delete color_description_;
}

void MovingObject::ArenaDtor(void* object) {
  MovingObject* _this = reinterpret_cast< MovingObject* >(object);
  (void)_this;
}
void MovingObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MovingObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MovingObject::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.MovingObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assigned_lane_id_.Clear();
  future_trajectory_.Clear();
  source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      model_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(base_ != nullptr);
      base_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(vehicle_attributes_ != nullptr);
      vehicle_attributes_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(vehicle_classification_ != nullptr);
      vehicle_classification_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(moving_object_classification_ != nullptr);
      moving_object_classification_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(color_description_ != nullptr);
      color_description_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MovingObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Identifier id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.BaseMoving base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MovingObject.Type type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::MovingObject_Type_IsValid(val))) {
            _internal_set_type(static_cast<::osi3::MovingObject_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Identifier assigned_lane_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assigned_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MovingObject.VehicleAttributes vehicle_attributes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MovingObject.VehicleClassification vehicle_classification = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_classification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string model_reference = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_model_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "osi3.MovingObject.model_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.StatePoint future_trajectory = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_future_trajectory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MovingObject.MovingObjectClassification moving_object_classification = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_moving_object_classification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.ExternalReference source_reference = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_source_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.ColorDescription color_description = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_color_description(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MovingObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.MovingObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.Identifier id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // optional .osi3.BaseMoving base = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::base(this), target, stream);
  }

  // optional .osi3.MovingObject.Type type = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // repeated .osi3.Identifier assigned_lane_id = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_assigned_lane_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_assigned_lane_id(i), target, stream);
  }

  // optional .osi3.MovingObject.VehicleAttributes vehicle_attributes = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::vehicle_attributes(this), target, stream);
  }

  // optional .osi3.MovingObject.VehicleClassification vehicle_classification = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::vehicle_classification(this), target, stream);
  }

  // optional string model_reference = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model_reference().data(), static_cast<int>(this->_internal_model_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.MovingObject.model_reference");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_model_reference(), target);
  }

  // repeated .osi3.StatePoint future_trajectory = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_future_trajectory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_future_trajectory(i), target, stream);
  }

  // optional .osi3.MovingObject.MovingObjectClassification moving_object_classification = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::moving_object_classification(this), target, stream);
  }

  // repeated .osi3.ExternalReference source_reference = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_source_reference_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_source_reference(i), target, stream);
  }

  // optional .osi3.ColorDescription color_description = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::color_description(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.MovingObject)
  return target;
}

size_t MovingObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.MovingObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Identifier assigned_lane_id = 4;
  total_size += 1UL * this->_internal_assigned_lane_id_size();
  for (const auto& msg : this->assigned_lane_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.StatePoint future_trajectory = 8;
  total_size += 1UL * this->_internal_future_trajectory_size();
  for (const auto& msg : this->future_trajectory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.ExternalReference source_reference = 10;
  total_size += 1UL * this->_internal_source_reference_size();
  for (const auto& msg : this->source_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string model_reference = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model_reference());
    }

    // optional .osi3.Identifier id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .osi3.BaseMoving base = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *base_);
    }

    // optional .osi3.MovingObject.VehicleAttributes vehicle_attributes = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicle_attributes_);
    }

    // optional .osi3.MovingObject.VehicleClassification vehicle_classification = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicle_classification_);
    }

    // optional .osi3.MovingObject.MovingObjectClassification moving_object_classification = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *moving_object_classification_);
    }

    // optional .osi3.ColorDescription color_description = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_description_);
    }

    // optional .osi3.MovingObject.Type type = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MovingObject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MovingObject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MovingObject::GetClassData() const { return &_class_data_; }

void MovingObject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MovingObject *>(to)->MergeFrom(
      static_cast<const MovingObject &>(from));
}


void MovingObject::MergeFrom(const MovingObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.MovingObject)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assigned_lane_id_.MergeFrom(from.assigned_lane_id_);
  future_trajectory_.MergeFrom(from.future_trajectory_);
  source_reference_.MergeFrom(from.source_reference_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_model_reference(from._internal_model_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_id()->::osi3::Identifier::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_base()->::osi3::BaseMoving::MergeFrom(from._internal_base());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_vehicle_attributes()->::osi3::MovingObject_VehicleAttributes::MergeFrom(from._internal_vehicle_attributes());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_vehicle_classification()->::osi3::MovingObject_VehicleClassification::MergeFrom(from._internal_vehicle_classification());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_moving_object_classification()->::osi3::MovingObject_MovingObjectClassification::MergeFrom(from._internal_moving_object_classification());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_color_description()->::osi3::ColorDescription::MergeFrom(from._internal_color_description());
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MovingObject::CopyFrom(const MovingObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.MovingObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovingObject::IsInitialized() const {
  return true;
}

void MovingObject::InternalSwap(MovingObject* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  assigned_lane_id_.InternalSwap(&other->assigned_lane_id_);
  future_trajectory_.InternalSwap(&other->future_trajectory_);
  source_reference_.InternalSwap(&other->source_reference_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_reference_, lhs_arena,
      &other->model_reference_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MovingObject, type_)
      + sizeof(MovingObject::type_)
      - PROTOBUF_FIELD_OFFSET(MovingObject, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MovingObject::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fobject_2eproto_getter, &descriptor_table_osi_5fobject_2eproto_once,
      file_level_metadata_osi_5fobject_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::StationaryObject_Classification_EmittingStructureAttribute* Arena::CreateMaybeMessage< ::osi3::StationaryObject_Classification_EmittingStructureAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::StationaryObject_Classification_EmittingStructureAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::StationaryObject_Classification* Arena::CreateMaybeMessage< ::osi3::StationaryObject_Classification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::StationaryObject_Classification >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::StationaryObject* Arena::CreateMaybeMessage< ::osi3::StationaryObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::StationaryObject >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::MovingObject_VehicleAttributes_WheelData* Arena::CreateMaybeMessage< ::osi3::MovingObject_VehicleAttributes_WheelData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::MovingObject_VehicleAttributes_WheelData >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::MovingObject_VehicleAttributes* Arena::CreateMaybeMessage< ::osi3::MovingObject_VehicleAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::MovingObject_VehicleAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::MovingObject_MovingObjectClassification* Arena::CreateMaybeMessage< ::osi3::MovingObject_MovingObjectClassification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::MovingObject_MovingObjectClassification >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::MovingObject_VehicleClassification_LightState* Arena::CreateMaybeMessage< ::osi3::MovingObject_VehicleClassification_LightState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::MovingObject_VehicleClassification_LightState >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::MovingObject_VehicleClassification* Arena::CreateMaybeMessage< ::osi3::MovingObject_VehicleClassification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::MovingObject_VehicleClassification >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::MovingObject* Arena::CreateMaybeMessage< ::osi3::MovingObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::MovingObject >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
