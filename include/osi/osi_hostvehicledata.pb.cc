// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_hostvehicledata.proto

#include "osi_hostvehicledata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace osi3 {
constexpr HostVehicleData_VehicleBasics::HostVehicleData_VehicleBasics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : curb_weight_(0){}
struct HostVehicleData_VehicleBasicsDefaultTypeInternal {
  constexpr HostVehicleData_VehicleBasicsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HostVehicleData_VehicleBasicsDefaultTypeInternal() {}
  union {
    HostVehicleData_VehicleBasics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HostVehicleData_VehicleBasicsDefaultTypeInternal _HostVehicleData_VehicleBasics_default_instance_;
constexpr HostVehicleData_VehiclePowertrain_Motor::HostVehicleData_VehiclePowertrain_Motor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rpm_(0)
  , torque_(0)
  , type_(0)
{}
struct HostVehicleData_VehiclePowertrain_MotorDefaultTypeInternal {
  constexpr HostVehicleData_VehiclePowertrain_MotorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HostVehicleData_VehiclePowertrain_MotorDefaultTypeInternal() {}
  union {
    HostVehicleData_VehiclePowertrain_Motor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HostVehicleData_VehiclePowertrain_MotorDefaultTypeInternal _HostVehicleData_VehiclePowertrain_Motor_default_instance_;
constexpr HostVehicleData_VehiclePowertrain::HostVehicleData_VehiclePowertrain(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : motor_()
  , pedal_position_acceleration_(0)
  , pedal_position_clutch_(0)
  , gear_transmission_(0){}
struct HostVehicleData_VehiclePowertrainDefaultTypeInternal {
  constexpr HostVehicleData_VehiclePowertrainDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HostVehicleData_VehiclePowertrainDefaultTypeInternal() {}
  union {
    HostVehicleData_VehiclePowertrain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HostVehicleData_VehiclePowertrainDefaultTypeInternal _HostVehicleData_VehiclePowertrain_default_instance_;
constexpr HostVehicleData_VehicleBrakeSystem::HostVehicleData_VehicleBrakeSystem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pedal_position_brake_(0){}
struct HostVehicleData_VehicleBrakeSystemDefaultTypeInternal {
  constexpr HostVehicleData_VehicleBrakeSystemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HostVehicleData_VehicleBrakeSystemDefaultTypeInternal() {}
  union {
    HostVehicleData_VehicleBrakeSystem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HostVehicleData_VehicleBrakeSystemDefaultTypeInternal _HostVehicleData_VehicleBrakeSystem_default_instance_;
constexpr HostVehicleData_VehicleSteering::HostVehicleData_VehicleSteering(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vehicle_steering_wheel_(nullptr){}
struct HostVehicleData_VehicleSteeringDefaultTypeInternal {
  constexpr HostVehicleData_VehicleSteeringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HostVehicleData_VehicleSteeringDefaultTypeInternal() {}
  union {
    HostVehicleData_VehicleSteering _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HostVehicleData_VehicleSteeringDefaultTypeInternal _HostVehicleData_VehicleSteering_default_instance_;
constexpr HostVehicleData_VehicleWheels_WheelData::HostVehicleData_VehicleWheels_WheelData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : axle_(0u)
  , index_(0u)
  , rotation_rate_(0)
  , slip_(0){}
struct HostVehicleData_VehicleWheels_WheelDataDefaultTypeInternal {
  constexpr HostVehicleData_VehicleWheels_WheelDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HostVehicleData_VehicleWheels_WheelDataDefaultTypeInternal() {}
  union {
    HostVehicleData_VehicleWheels_WheelData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HostVehicleData_VehicleWheels_WheelDataDefaultTypeInternal _HostVehicleData_VehicleWheels_WheelData_default_instance_;
constexpr HostVehicleData_VehicleWheels::HostVehicleData_VehicleWheels(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : wheel_data_(){}
struct HostVehicleData_VehicleWheelsDefaultTypeInternal {
  constexpr HostVehicleData_VehicleWheelsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HostVehicleData_VehicleWheelsDefaultTypeInternal() {}
  union {
    HostVehicleData_VehicleWheels _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HostVehicleData_VehicleWheelsDefaultTypeInternal _HostVehicleData_VehicleWheels_default_instance_;
constexpr HostVehicleData_VehicleLocalization::HostVehicleData_VehicleLocalization(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , orientation_(nullptr)
  , geodetic_position_(nullptr){}
struct HostVehicleData_VehicleLocalizationDefaultTypeInternal {
  constexpr HostVehicleData_VehicleLocalizationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HostVehicleData_VehicleLocalizationDefaultTypeInternal() {}
  union {
    HostVehicleData_VehicleLocalization _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HostVehicleData_VehicleLocalizationDefaultTypeInternal _HostVehicleData_VehicleLocalization_default_instance_;
constexpr HostVehicleData::HostVehicleData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_(nullptr)
  , location_rmse_(nullptr)
  , vehicle_basics_(nullptr)
  , vehicle_powertrain_(nullptr)
  , vehicle_brake_system_(nullptr)
  , vehicle_steering_(nullptr)
  , vehicle_wheels_(nullptr)
  , vehicle_localization_(nullptr)
  , version_(nullptr)
  , timestamp_(nullptr)
  , host_vehicle_id_(nullptr){}
struct HostVehicleDataDefaultTypeInternal {
  constexpr HostVehicleDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HostVehicleDataDefaultTypeInternal() {}
  union {
    HostVehicleData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HostVehicleDataDefaultTypeInternal _HostVehicleData_default_instance_;
}  // namespace osi3
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5fhostvehicledata_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_osi_5fhostvehicledata_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5fhostvehicledata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5fhostvehicledata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleBasics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleBasics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleBasics, curb_weight_),
  0,
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain_Motor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain_Motor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain_Motor, type_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain_Motor, rpm_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain_Motor, torque_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain, pedal_position_acceleration_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain, pedal_position_clutch_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain, gear_transmission_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain, motor_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleBrakeSystem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleBrakeSystem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleBrakeSystem, pedal_position_brake_),
  0,
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleSteering, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleSteering, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleSteering, vehicle_steering_wheel_),
  0,
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleWheels_WheelData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleWheels_WheelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleWheels_WheelData, axle_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleWheels_WheelData, index_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleWheels_WheelData, rotation_rate_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleWheels_WheelData, slip_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleWheels, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleWheels, wheel_data_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleLocalization, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleLocalization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleLocalization, position_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleLocalization, orientation_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleLocalization, geodetic_position_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, version_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, host_vehicle_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, location_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, location_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, vehicle_basics_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, vehicle_powertrain_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, vehicle_brake_system_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, vehicle_steering_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, vehicle_wheels_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, vehicle_localization_),
  8,
  9,
  10,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::osi3::HostVehicleData_VehicleBasics)},
  { 8, 17, -1, sizeof(::osi3::HostVehicleData_VehiclePowertrain_Motor)},
  { 20, 30, -1, sizeof(::osi3::HostVehicleData_VehiclePowertrain)},
  { 34, 41, -1, sizeof(::osi3::HostVehicleData_VehicleBrakeSystem)},
  { 42, 49, -1, sizeof(::osi3::HostVehicleData_VehicleSteering)},
  { 50, 60, -1, sizeof(::osi3::HostVehicleData_VehicleWheels_WheelData)},
  { 64, -1, -1, sizeof(::osi3::HostVehicleData_VehicleWheels)},
  { 71, 80, -1, sizeof(::osi3::HostVehicleData_VehicleLocalization)},
  { 83, 100, -1, sizeof(::osi3::HostVehicleData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_HostVehicleData_VehicleBasics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_HostVehicleData_VehiclePowertrain_Motor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_HostVehicleData_VehiclePowertrain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_HostVehicleData_VehicleBrakeSystem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_HostVehicleData_VehicleSteering_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_HostVehicleData_VehicleWheels_WheelData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_HostVehicleData_VehicleWheels_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_HostVehicleData_VehicleLocalization_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_HostVehicleData_default_instance_),
};

const char descriptor_table_protodef_osi_5fhostvehicledata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031osi_hostvehicledata.proto\022\004osi3\032\021osi_v"
  "ersion.proto\032\020osi_common.proto\"\304\013\n\017HostV"
  "ehicleData\022\'\n\007version\030\t \001(\0132\026.osi3.Inter"
  "faceVersion\022\"\n\ttimestamp\030\n \001(\0132\017.osi3.Ti"
  "mestamp\022)\n\017host_vehicle_id\030\013 \001(\0132\020.osi3."
  "Identifier\022\"\n\010location\030\001 \001(\0132\020.osi3.Base"
  "Moving\022\'\n\rlocation_rmse\030\002 \001(\0132\020.osi3.Bas"
  "eMoving\022;\n\016vehicle_basics\030\003 \001(\0132#.osi3.H"
  "ostVehicleData.VehicleBasics\022C\n\022vehicle_"
  "powertrain\030\004 \001(\0132\'.osi3.HostVehicleData."
  "VehiclePowertrain\022F\n\024vehicle_brake_syste"
  "m\030\005 \001(\0132(.osi3.HostVehicleData.VehicleBr"
  "akeSystem\022\?\n\020vehicle_steering\030\006 \001(\0132%.os"
  "i3.HostVehicleData.VehicleSteering\022;\n\016ve"
  "hicle_wheels\030\007 \001(\0132#.osi3.HostVehicleDat"
  "a.VehicleWheels\022G\n\024vehicle_localization\030"
  "\010 \001(\0132).osi3.HostVehicleData.VehicleLoca"
  "lization\032$\n\rVehicleBasics\022\023\n\013curb_weight"
  "\030\001 \001(\001\032\366\002\n\021VehiclePowertrain\022#\n\033pedal_po"
  "sition_acceleration\030\001 \001(\001\022\035\n\025pedal_posit"
  "ion_clutch\030\002 \001(\001\022\031\n\021gear_transmission\030\003 "
  "\001(\005\022<\n\005motor\030\004 \003(\0132-.osi3.HostVehicleDat"
  "a.VehiclePowertrain.Motor\032\303\001\n\005Motor\022@\n\004t"
  "ype\030\001 \001(\01622.osi3.HostVehicleData.Vehicle"
  "Powertrain.Motor.Type\022\013\n\003rpm\030\002 \001(\001\022\016\n\006to"
  "rque\030\003 \001(\001\"[\n\004Type\022\020\n\014TYPE_UNKNOWN\020\000\022\016\n\n"
  "TYPE_OTHER\020\001\022\r\n\tTYPE_OTTO\020\002\022\017\n\013TYPE_DIES"
  "EL\020\003\022\021\n\rTYPE_ELECTRIC\020\004\0322\n\022VehicleBrakeS"
  "ystem\022\034\n\024pedal_position_brake\030\001 \001(\001\032M\n\017V"
  "ehicleSteering\022:\n\026vehicle_steering_wheel"
  "\030\001 \001(\0132\032.osi3.VehicleSteeringWheel\032\241\001\n\rV"
  "ehicleWheels\022A\n\nwheel_data\030\001 \003(\0132-.osi3."
  "HostVehicleData.VehicleWheels.WheelData\032"
  "M\n\tWheelData\022\014\n\004axle\030\001 \001(\r\022\r\n\005index\030\002 \001("
  "\r\022\025\n\rrotation_rate\030\003 \001(\001\022\014\n\004slip\030\004 \001(\001\032\224"
  "\001\n\023VehicleLocalization\022 \n\010position\030\001 \001(\013"
  "2\016.osi3.Vector3d\022(\n\013orientation\030\002 \001(\0132\023."
  "osi3.Orientation3d\0221\n\021geodetic_position\030"
  "\003 \001(\0132\026.osi3.GeodeticPositionB\002H\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5fhostvehicledata_2eproto_deps[2] = {
  &::descriptor_table_osi_5fcommon_2eproto,
  &::descriptor_table_osi_5fversion_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5fhostvehicledata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fhostvehicledata_2eproto = {
  false, false, 1553, descriptor_table_protodef_osi_5fhostvehicledata_2eproto, "osi_hostvehicledata.proto", 
  &descriptor_table_osi_5fhostvehicledata_2eproto_once, descriptor_table_osi_5fhostvehicledata_2eproto_deps, 2, 9,
  schemas, file_default_instances, TableStruct_osi_5fhostvehicledata_2eproto::offsets,
  file_level_metadata_osi_5fhostvehicledata_2eproto, file_level_enum_descriptors_osi_5fhostvehicledata_2eproto, file_level_service_descriptors_osi_5fhostvehicledata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_osi_5fhostvehicledata_2eproto_getter() {
  return &descriptor_table_osi_5fhostvehicledata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_osi_5fhostvehicledata_2eproto(&descriptor_table_osi_5fhostvehicledata_2eproto);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HostVehicleData_VehiclePowertrain_Motor_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fhostvehicledata_2eproto);
  return file_level_enum_descriptors_osi_5fhostvehicledata_2eproto[0];
}
bool HostVehicleData_VehiclePowertrain_Motor_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HostVehicleData_VehiclePowertrain_Motor_Type HostVehicleData_VehiclePowertrain_Motor::TYPE_UNKNOWN;
constexpr HostVehicleData_VehiclePowertrain_Motor_Type HostVehicleData_VehiclePowertrain_Motor::TYPE_OTHER;
constexpr HostVehicleData_VehiclePowertrain_Motor_Type HostVehicleData_VehiclePowertrain_Motor::TYPE_OTTO;
constexpr HostVehicleData_VehiclePowertrain_Motor_Type HostVehicleData_VehiclePowertrain_Motor::TYPE_DIESEL;
constexpr HostVehicleData_VehiclePowertrain_Motor_Type HostVehicleData_VehiclePowertrain_Motor::TYPE_ELECTRIC;
constexpr HostVehicleData_VehiclePowertrain_Motor_Type HostVehicleData_VehiclePowertrain_Motor::Type_MIN;
constexpr HostVehicleData_VehiclePowertrain_Motor_Type HostVehicleData_VehiclePowertrain_Motor::Type_MAX;
constexpr int HostVehicleData_VehiclePowertrain_Motor::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class HostVehicleData_VehicleBasics::_Internal {
 public:
  using HasBits = decltype(std::declval<HostVehicleData_VehicleBasics>()._has_bits_);
  static void set_has_curb_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HostVehicleData_VehicleBasics::HostVehicleData_VehicleBasics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.HostVehicleData.VehicleBasics)
}
HostVehicleData_VehicleBasics::HostVehicleData_VehicleBasics(const HostVehicleData_VehicleBasics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  curb_weight_ = from.curb_weight_;
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData.VehicleBasics)
}

void HostVehicleData_VehicleBasics::SharedCtor() {
curb_weight_ = 0;
}

HostVehicleData_VehicleBasics::~HostVehicleData_VehicleBasics() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData.VehicleBasics)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HostVehicleData_VehicleBasics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HostVehicleData_VehicleBasics::ArenaDtor(void* object) {
  HostVehicleData_VehicleBasics* _this = reinterpret_cast< HostVehicleData_VehicleBasics* >(object);
  (void)_this;
}
void HostVehicleData_VehicleBasics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HostVehicleData_VehicleBasics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HostVehicleData_VehicleBasics::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData.VehicleBasics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  curb_weight_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostVehicleData_VehicleBasics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double curb_weight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_curb_weight(&has_bits);
          curb_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostVehicleData_VehicleBasics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData.VehicleBasics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double curb_weight = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_curb_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData.VehicleBasics)
  return target;
}

size_t HostVehicleData_VehicleBasics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData.VehicleBasics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double curb_weight = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostVehicleData_VehicleBasics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HostVehicleData_VehicleBasics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostVehicleData_VehicleBasics::GetClassData() const { return &_class_data_; }

void HostVehicleData_VehicleBasics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HostVehicleData_VehicleBasics *>(to)->MergeFrom(
      static_cast<const HostVehicleData_VehicleBasics &>(from));
}


void HostVehicleData_VehicleBasics::MergeFrom(const HostVehicleData_VehicleBasics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData.VehicleBasics)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_curb_weight()) {
    _internal_set_curb_weight(from._internal_curb_weight());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostVehicleData_VehicleBasics::CopyFrom(const HostVehicleData_VehicleBasics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData.VehicleBasics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData_VehicleBasics::IsInitialized() const {
  return true;
}

void HostVehicleData_VehicleBasics::InternalSwap(HostVehicleData_VehicleBasics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(curb_weight_, other->curb_weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData_VehicleBasics::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fhostvehicledata_2eproto_getter, &descriptor_table_osi_5fhostvehicledata_2eproto_once,
      file_level_metadata_osi_5fhostvehicledata_2eproto[0]);
}

// ===================================================================

class HostVehicleData_VehiclePowertrain_Motor::_Internal {
 public:
  using HasBits = decltype(std::declval<HostVehicleData_VehiclePowertrain_Motor>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rpm(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_torque(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HostVehicleData_VehiclePowertrain_Motor::HostVehicleData_VehiclePowertrain_Motor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.HostVehicleData.VehiclePowertrain.Motor)
}
HostVehicleData_VehiclePowertrain_Motor::HostVehicleData_VehiclePowertrain_Motor(const HostVehicleData_VehiclePowertrain_Motor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rpm_, &from.rpm_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&rpm_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData.VehiclePowertrain.Motor)
}

void HostVehicleData_VehiclePowertrain_Motor::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rpm_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&rpm_)) + sizeof(type_));
}

HostVehicleData_VehiclePowertrain_Motor::~HostVehicleData_VehiclePowertrain_Motor() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData.VehiclePowertrain.Motor)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HostVehicleData_VehiclePowertrain_Motor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HostVehicleData_VehiclePowertrain_Motor::ArenaDtor(void* object) {
  HostVehicleData_VehiclePowertrain_Motor* _this = reinterpret_cast< HostVehicleData_VehiclePowertrain_Motor* >(object);
  (void)_this;
}
void HostVehicleData_VehiclePowertrain_Motor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HostVehicleData_VehiclePowertrain_Motor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HostVehicleData_VehiclePowertrain_Motor::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData.VehiclePowertrain.Motor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&rpm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&rpm_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostVehicleData_VehiclePowertrain_Motor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.HostVehicleData.VehiclePowertrain.Motor.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::HostVehicleData_VehiclePowertrain_Motor_Type_IsValid(val))) {
            _internal_set_type(static_cast<::osi3::HostVehicleData_VehiclePowertrain_Motor_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double rpm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_rpm(&has_bits);
          rpm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double torque = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_torque(&has_bits);
          torque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostVehicleData_VehiclePowertrain_Motor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData.VehiclePowertrain.Motor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.HostVehicleData.VehiclePowertrain.Motor.Type type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional double rpm = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_rpm(), target);
  }

  // optional double torque = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_torque(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData.VehiclePowertrain.Motor)
  return target;
}

size_t HostVehicleData_VehiclePowertrain_Motor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData.VehiclePowertrain.Motor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double rpm = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double torque = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .osi3.HostVehicleData.VehiclePowertrain.Motor.Type type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostVehicleData_VehiclePowertrain_Motor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HostVehicleData_VehiclePowertrain_Motor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostVehicleData_VehiclePowertrain_Motor::GetClassData() const { return &_class_data_; }

void HostVehicleData_VehiclePowertrain_Motor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HostVehicleData_VehiclePowertrain_Motor *>(to)->MergeFrom(
      static_cast<const HostVehicleData_VehiclePowertrain_Motor &>(from));
}


void HostVehicleData_VehiclePowertrain_Motor::MergeFrom(const HostVehicleData_VehiclePowertrain_Motor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData.VehiclePowertrain.Motor)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      rpm_ = from.rpm_;
    }
    if (cached_has_bits & 0x00000002u) {
      torque_ = from.torque_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostVehicleData_VehiclePowertrain_Motor::CopyFrom(const HostVehicleData_VehiclePowertrain_Motor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData.VehiclePowertrain.Motor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData_VehiclePowertrain_Motor::IsInitialized() const {
  return true;
}

void HostVehicleData_VehiclePowertrain_Motor::InternalSwap(HostVehicleData_VehiclePowertrain_Motor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HostVehicleData_VehiclePowertrain_Motor, type_)
      + sizeof(HostVehicleData_VehiclePowertrain_Motor::type_)
      - PROTOBUF_FIELD_OFFSET(HostVehicleData_VehiclePowertrain_Motor, rpm_)>(
          reinterpret_cast<char*>(&rpm_),
          reinterpret_cast<char*>(&other->rpm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData_VehiclePowertrain_Motor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fhostvehicledata_2eproto_getter, &descriptor_table_osi_5fhostvehicledata_2eproto_once,
      file_level_metadata_osi_5fhostvehicledata_2eproto[1]);
}

// ===================================================================

class HostVehicleData_VehiclePowertrain::_Internal {
 public:
  using HasBits = decltype(std::declval<HostVehicleData_VehiclePowertrain>()._has_bits_);
  static void set_has_pedal_position_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pedal_position_clutch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gear_transmission(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

HostVehicleData_VehiclePowertrain::HostVehicleData_VehiclePowertrain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  motor_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.HostVehicleData.VehiclePowertrain)
}
HostVehicleData_VehiclePowertrain::HostVehicleData_VehiclePowertrain(const HostVehicleData_VehiclePowertrain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      motor_(from.motor_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pedal_position_acceleration_, &from.pedal_position_acceleration_,
    static_cast<size_t>(reinterpret_cast<char*>(&gear_transmission_) -
    reinterpret_cast<char*>(&pedal_position_acceleration_)) + sizeof(gear_transmission_));
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData.VehiclePowertrain)
}

void HostVehicleData_VehiclePowertrain::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pedal_position_acceleration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gear_transmission_) -
    reinterpret_cast<char*>(&pedal_position_acceleration_)) + sizeof(gear_transmission_));
}

HostVehicleData_VehiclePowertrain::~HostVehicleData_VehiclePowertrain() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData.VehiclePowertrain)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HostVehicleData_VehiclePowertrain::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HostVehicleData_VehiclePowertrain::ArenaDtor(void* object) {
  HostVehicleData_VehiclePowertrain* _this = reinterpret_cast< HostVehicleData_VehiclePowertrain* >(object);
  (void)_this;
}
void HostVehicleData_VehiclePowertrain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HostVehicleData_VehiclePowertrain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HostVehicleData_VehiclePowertrain::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData.VehiclePowertrain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  motor_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&pedal_position_acceleration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gear_transmission_) -
        reinterpret_cast<char*>(&pedal_position_acceleration_)) + sizeof(gear_transmission_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostVehicleData_VehiclePowertrain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double pedal_position_acceleration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_pedal_position_acceleration(&has_bits);
          pedal_position_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double pedal_position_clutch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_pedal_position_clutch(&has_bits);
          pedal_position_clutch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 gear_transmission = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_gear_transmission(&has_bits);
          gear_transmission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.HostVehicleData.VehiclePowertrain.Motor motor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_motor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostVehicleData_VehiclePowertrain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData.VehiclePowertrain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double pedal_position_acceleration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_pedal_position_acceleration(), target);
  }

  // optional double pedal_position_clutch = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_pedal_position_clutch(), target);
  }

  // optional int32 gear_transmission = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_gear_transmission(), target);
  }

  // repeated .osi3.HostVehicleData.VehiclePowertrain.Motor motor = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_motor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_motor(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData.VehiclePowertrain)
  return target;
}

size_t HostVehicleData_VehiclePowertrain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData.VehiclePowertrain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.HostVehicleData.VehiclePowertrain.Motor motor = 4;
  total_size += 1UL * this->_internal_motor_size();
  for (const auto& msg : this->motor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double pedal_position_acceleration = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double pedal_position_clutch = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 gear_transmission = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_gear_transmission());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostVehicleData_VehiclePowertrain::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HostVehicleData_VehiclePowertrain::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostVehicleData_VehiclePowertrain::GetClassData() const { return &_class_data_; }

void HostVehicleData_VehiclePowertrain::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HostVehicleData_VehiclePowertrain *>(to)->MergeFrom(
      static_cast<const HostVehicleData_VehiclePowertrain &>(from));
}


void HostVehicleData_VehiclePowertrain::MergeFrom(const HostVehicleData_VehiclePowertrain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData.VehiclePowertrain)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  motor_.MergeFrom(from.motor_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      pedal_position_acceleration_ = from.pedal_position_acceleration_;
    }
    if (cached_has_bits & 0x00000002u) {
      pedal_position_clutch_ = from.pedal_position_clutch_;
    }
    if (cached_has_bits & 0x00000004u) {
      gear_transmission_ = from.gear_transmission_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostVehicleData_VehiclePowertrain::CopyFrom(const HostVehicleData_VehiclePowertrain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData.VehiclePowertrain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData_VehiclePowertrain::IsInitialized() const {
  return true;
}

void HostVehicleData_VehiclePowertrain::InternalSwap(HostVehicleData_VehiclePowertrain* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  motor_.InternalSwap(&other->motor_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HostVehicleData_VehiclePowertrain, gear_transmission_)
      + sizeof(HostVehicleData_VehiclePowertrain::gear_transmission_)
      - PROTOBUF_FIELD_OFFSET(HostVehicleData_VehiclePowertrain, pedal_position_acceleration_)>(
          reinterpret_cast<char*>(&pedal_position_acceleration_),
          reinterpret_cast<char*>(&other->pedal_position_acceleration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData_VehiclePowertrain::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fhostvehicledata_2eproto_getter, &descriptor_table_osi_5fhostvehicledata_2eproto_once,
      file_level_metadata_osi_5fhostvehicledata_2eproto[2]);
}

// ===================================================================

class HostVehicleData_VehicleBrakeSystem::_Internal {
 public:
  using HasBits = decltype(std::declval<HostVehicleData_VehicleBrakeSystem>()._has_bits_);
  static void set_has_pedal_position_brake(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HostVehicleData_VehicleBrakeSystem::HostVehicleData_VehicleBrakeSystem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.HostVehicleData.VehicleBrakeSystem)
}
HostVehicleData_VehicleBrakeSystem::HostVehicleData_VehicleBrakeSystem(const HostVehicleData_VehicleBrakeSystem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pedal_position_brake_ = from.pedal_position_brake_;
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData.VehicleBrakeSystem)
}

void HostVehicleData_VehicleBrakeSystem::SharedCtor() {
pedal_position_brake_ = 0;
}

HostVehicleData_VehicleBrakeSystem::~HostVehicleData_VehicleBrakeSystem() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData.VehicleBrakeSystem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HostVehicleData_VehicleBrakeSystem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HostVehicleData_VehicleBrakeSystem::ArenaDtor(void* object) {
  HostVehicleData_VehicleBrakeSystem* _this = reinterpret_cast< HostVehicleData_VehicleBrakeSystem* >(object);
  (void)_this;
}
void HostVehicleData_VehicleBrakeSystem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HostVehicleData_VehicleBrakeSystem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HostVehicleData_VehicleBrakeSystem::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData.VehicleBrakeSystem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pedal_position_brake_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostVehicleData_VehicleBrakeSystem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double pedal_position_brake = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_pedal_position_brake(&has_bits);
          pedal_position_brake_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostVehicleData_VehicleBrakeSystem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData.VehicleBrakeSystem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double pedal_position_brake = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_pedal_position_brake(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData.VehicleBrakeSystem)
  return target;
}

size_t HostVehicleData_VehicleBrakeSystem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData.VehicleBrakeSystem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double pedal_position_brake = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostVehicleData_VehicleBrakeSystem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HostVehicleData_VehicleBrakeSystem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostVehicleData_VehicleBrakeSystem::GetClassData() const { return &_class_data_; }

void HostVehicleData_VehicleBrakeSystem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HostVehicleData_VehicleBrakeSystem *>(to)->MergeFrom(
      static_cast<const HostVehicleData_VehicleBrakeSystem &>(from));
}


void HostVehicleData_VehicleBrakeSystem::MergeFrom(const HostVehicleData_VehicleBrakeSystem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData.VehicleBrakeSystem)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pedal_position_brake()) {
    _internal_set_pedal_position_brake(from._internal_pedal_position_brake());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostVehicleData_VehicleBrakeSystem::CopyFrom(const HostVehicleData_VehicleBrakeSystem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData.VehicleBrakeSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData_VehicleBrakeSystem::IsInitialized() const {
  return true;
}

void HostVehicleData_VehicleBrakeSystem::InternalSwap(HostVehicleData_VehicleBrakeSystem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pedal_position_brake_, other->pedal_position_brake_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData_VehicleBrakeSystem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fhostvehicledata_2eproto_getter, &descriptor_table_osi_5fhostvehicledata_2eproto_once,
      file_level_metadata_osi_5fhostvehicledata_2eproto[3]);
}

// ===================================================================

class HostVehicleData_VehicleSteering::_Internal {
 public:
  using HasBits = decltype(std::declval<HostVehicleData_VehicleSteering>()._has_bits_);
  static const ::osi3::VehicleSteeringWheel& vehicle_steering_wheel(const HostVehicleData_VehicleSteering* msg);
  static void set_has_vehicle_steering_wheel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osi3::VehicleSteeringWheel&
HostVehicleData_VehicleSteering::_Internal::vehicle_steering_wheel(const HostVehicleData_VehicleSteering* msg) {
  return *msg->vehicle_steering_wheel_;
}
void HostVehicleData_VehicleSteering::clear_vehicle_steering_wheel() {
  if (vehicle_steering_wheel_ != nullptr) vehicle_steering_wheel_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
HostVehicleData_VehicleSteering::HostVehicleData_VehicleSteering(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.HostVehicleData.VehicleSteering)
}
HostVehicleData_VehicleSteering::HostVehicleData_VehicleSteering(const HostVehicleData_VehicleSteering& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vehicle_steering_wheel()) {
    vehicle_steering_wheel_ = new ::osi3::VehicleSteeringWheel(*from.vehicle_steering_wheel_);
  } else {
    vehicle_steering_wheel_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData.VehicleSteering)
}

void HostVehicleData_VehicleSteering::SharedCtor() {
vehicle_steering_wheel_ = nullptr;
}

HostVehicleData_VehicleSteering::~HostVehicleData_VehicleSteering() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData.VehicleSteering)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HostVehicleData_VehicleSteering::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete vehicle_steering_wheel_;
}

void HostVehicleData_VehicleSteering::ArenaDtor(void* object) {
  HostVehicleData_VehicleSteering* _this = reinterpret_cast< HostVehicleData_VehicleSteering* >(object);
  (void)_this;
}
void HostVehicleData_VehicleSteering::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HostVehicleData_VehicleSteering::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HostVehicleData_VehicleSteering::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData.VehicleSteering)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(vehicle_steering_wheel_ != nullptr);
    vehicle_steering_wheel_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostVehicleData_VehicleSteering::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.VehicleSteeringWheel vehicle_steering_wheel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_steering_wheel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostVehicleData_VehicleSteering::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData.VehicleSteering)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.VehicleSteeringWheel vehicle_steering_wheel = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vehicle_steering_wheel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData.VehicleSteering)
  return target;
}

size_t HostVehicleData_VehicleSteering::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData.VehicleSteering)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .osi3.VehicleSteeringWheel vehicle_steering_wheel = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehicle_steering_wheel_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostVehicleData_VehicleSteering::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HostVehicleData_VehicleSteering::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostVehicleData_VehicleSteering::GetClassData() const { return &_class_data_; }

void HostVehicleData_VehicleSteering::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HostVehicleData_VehicleSteering *>(to)->MergeFrom(
      static_cast<const HostVehicleData_VehicleSteering &>(from));
}


void HostVehicleData_VehicleSteering::MergeFrom(const HostVehicleData_VehicleSteering& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData.VehicleSteering)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vehicle_steering_wheel()) {
    _internal_mutable_vehicle_steering_wheel()->::osi3::VehicleSteeringWheel::MergeFrom(from._internal_vehicle_steering_wheel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostVehicleData_VehicleSteering::CopyFrom(const HostVehicleData_VehicleSteering& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData.VehicleSteering)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData_VehicleSteering::IsInitialized() const {
  return true;
}

void HostVehicleData_VehicleSteering::InternalSwap(HostVehicleData_VehicleSteering* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vehicle_steering_wheel_, other->vehicle_steering_wheel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData_VehicleSteering::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fhostvehicledata_2eproto_getter, &descriptor_table_osi_5fhostvehicledata_2eproto_once,
      file_level_metadata_osi_5fhostvehicledata_2eproto[4]);
}

// ===================================================================

class HostVehicleData_VehicleWheels_WheelData::_Internal {
 public:
  using HasBits = decltype(std::declval<HostVehicleData_VehicleWheels_WheelData>()._has_bits_);
  static void set_has_axle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rotation_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_slip(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

HostVehicleData_VehicleWheels_WheelData::HostVehicleData_VehicleWheels_WheelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.HostVehicleData.VehicleWheels.WheelData)
}
HostVehicleData_VehicleWheels_WheelData::HostVehicleData_VehicleWheels_WheelData(const HostVehicleData_VehicleWheels_WheelData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&axle_, &from.axle_,
    static_cast<size_t>(reinterpret_cast<char*>(&slip_) -
    reinterpret_cast<char*>(&axle_)) + sizeof(slip_));
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData.VehicleWheels.WheelData)
}

void HostVehicleData_VehicleWheels_WheelData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&axle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slip_) -
    reinterpret_cast<char*>(&axle_)) + sizeof(slip_));
}

HostVehicleData_VehicleWheels_WheelData::~HostVehicleData_VehicleWheels_WheelData() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData.VehicleWheels.WheelData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HostVehicleData_VehicleWheels_WheelData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HostVehicleData_VehicleWheels_WheelData::ArenaDtor(void* object) {
  HostVehicleData_VehicleWheels_WheelData* _this = reinterpret_cast< HostVehicleData_VehicleWheels_WheelData* >(object);
  (void)_this;
}
void HostVehicleData_VehicleWheels_WheelData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HostVehicleData_VehicleWheels_WheelData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HostVehicleData_VehicleWheels_WheelData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData.VehicleWheels.WheelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&axle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slip_) -
        reinterpret_cast<char*>(&axle_)) + sizeof(slip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostVehicleData_VehicleWheels_WheelData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 axle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_axle(&has_bits);
          axle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double rotation_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_rotation_rate(&has_bits);
          rotation_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double slip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_slip(&has_bits);
          slip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostVehicleData_VehicleWheels_WheelData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData.VehicleWheels.WheelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 axle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_axle(), target);
  }

  // optional uint32 index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  // optional double rotation_rate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_rotation_rate(), target);
  }

  // optional double slip = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_slip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData.VehicleWheels.WheelData)
  return target;
}

size_t HostVehicleData_VehicleWheels_WheelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData.VehicleWheels.WheelData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 axle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_axle());
    }

    // optional uint32 index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
    }

    // optional double rotation_rate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double slip = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostVehicleData_VehicleWheels_WheelData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HostVehicleData_VehicleWheels_WheelData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostVehicleData_VehicleWheels_WheelData::GetClassData() const { return &_class_data_; }

void HostVehicleData_VehicleWheels_WheelData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HostVehicleData_VehicleWheels_WheelData *>(to)->MergeFrom(
      static_cast<const HostVehicleData_VehicleWheels_WheelData &>(from));
}


void HostVehicleData_VehicleWheels_WheelData::MergeFrom(const HostVehicleData_VehicleWheels_WheelData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData.VehicleWheels.WheelData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      axle_ = from.axle_;
    }
    if (cached_has_bits & 0x00000002u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000004u) {
      rotation_rate_ = from.rotation_rate_;
    }
    if (cached_has_bits & 0x00000008u) {
      slip_ = from.slip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostVehicleData_VehicleWheels_WheelData::CopyFrom(const HostVehicleData_VehicleWheels_WheelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData.VehicleWheels.WheelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData_VehicleWheels_WheelData::IsInitialized() const {
  return true;
}

void HostVehicleData_VehicleWheels_WheelData::InternalSwap(HostVehicleData_VehicleWheels_WheelData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HostVehicleData_VehicleWheels_WheelData, slip_)
      + sizeof(HostVehicleData_VehicleWheels_WheelData::slip_)
      - PROTOBUF_FIELD_OFFSET(HostVehicleData_VehicleWheels_WheelData, axle_)>(
          reinterpret_cast<char*>(&axle_),
          reinterpret_cast<char*>(&other->axle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData_VehicleWheels_WheelData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fhostvehicledata_2eproto_getter, &descriptor_table_osi_5fhostvehicledata_2eproto_once,
      file_level_metadata_osi_5fhostvehicledata_2eproto[5]);
}

// ===================================================================

class HostVehicleData_VehicleWheels::_Internal {
 public:
};

HostVehicleData_VehicleWheels::HostVehicleData_VehicleWheels(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  wheel_data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.HostVehicleData.VehicleWheels)
}
HostVehicleData_VehicleWheels::HostVehicleData_VehicleWheels(const HostVehicleData_VehicleWheels& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      wheel_data_(from.wheel_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData.VehicleWheels)
}

void HostVehicleData_VehicleWheels::SharedCtor() {
}

HostVehicleData_VehicleWheels::~HostVehicleData_VehicleWheels() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData.VehicleWheels)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HostVehicleData_VehicleWheels::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HostVehicleData_VehicleWheels::ArenaDtor(void* object) {
  HostVehicleData_VehicleWheels* _this = reinterpret_cast< HostVehicleData_VehicleWheels* >(object);
  (void)_this;
}
void HostVehicleData_VehicleWheels::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HostVehicleData_VehicleWheels::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HostVehicleData_VehicleWheels::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData.VehicleWheels)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wheel_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostVehicleData_VehicleWheels::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .osi3.HostVehicleData.VehicleWheels.WheelData wheel_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_wheel_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostVehicleData_VehicleWheels::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData.VehicleWheels)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .osi3.HostVehicleData.VehicleWheels.WheelData wheel_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_wheel_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_wheel_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData.VehicleWheels)
  return target;
}

size_t HostVehicleData_VehicleWheels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData.VehicleWheels)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.HostVehicleData.VehicleWheels.WheelData wheel_data = 1;
  total_size += 1UL * this->_internal_wheel_data_size();
  for (const auto& msg : this->wheel_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostVehicleData_VehicleWheels::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HostVehicleData_VehicleWheels::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostVehicleData_VehicleWheels::GetClassData() const { return &_class_data_; }

void HostVehicleData_VehicleWheels::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HostVehicleData_VehicleWheels *>(to)->MergeFrom(
      static_cast<const HostVehicleData_VehicleWheels &>(from));
}


void HostVehicleData_VehicleWheels::MergeFrom(const HostVehicleData_VehicleWheels& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData.VehicleWheels)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wheel_data_.MergeFrom(from.wheel_data_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostVehicleData_VehicleWheels::CopyFrom(const HostVehicleData_VehicleWheels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData.VehicleWheels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData_VehicleWheels::IsInitialized() const {
  return true;
}

void HostVehicleData_VehicleWheels::InternalSwap(HostVehicleData_VehicleWheels* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  wheel_data_.InternalSwap(&other->wheel_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData_VehicleWheels::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fhostvehicledata_2eproto_getter, &descriptor_table_osi_5fhostvehicledata_2eproto_once,
      file_level_metadata_osi_5fhostvehicledata_2eproto[6]);
}

// ===================================================================

class HostVehicleData_VehicleLocalization::_Internal {
 public:
  using HasBits = decltype(std::declval<HostVehicleData_VehicleLocalization>()._has_bits_);
  static const ::osi3::Vector3d& position(const HostVehicleData_VehicleLocalization* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::Orientation3d& orientation(const HostVehicleData_VehicleLocalization* msg);
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::GeodeticPosition& geodetic_position(const HostVehicleData_VehicleLocalization* msg);
  static void set_has_geodetic_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::osi3::Vector3d&
HostVehicleData_VehicleLocalization::_Internal::position(const HostVehicleData_VehicleLocalization* msg) {
  return *msg->position_;
}
const ::osi3::Orientation3d&
HostVehicleData_VehicleLocalization::_Internal::orientation(const HostVehicleData_VehicleLocalization* msg) {
  return *msg->orientation_;
}
const ::osi3::GeodeticPosition&
HostVehicleData_VehicleLocalization::_Internal::geodetic_position(const HostVehicleData_VehicleLocalization* msg) {
  return *msg->geodetic_position_;
}
void HostVehicleData_VehicleLocalization::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void HostVehicleData_VehicleLocalization::clear_orientation() {
  if (orientation_ != nullptr) orientation_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void HostVehicleData_VehicleLocalization::clear_geodetic_position() {
  if (geodetic_position_ != nullptr) geodetic_position_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
HostVehicleData_VehicleLocalization::HostVehicleData_VehicleLocalization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.HostVehicleData.VehicleLocalization)
}
HostVehicleData_VehicleLocalization::HostVehicleData_VehicleLocalization(const HostVehicleData_VehicleLocalization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::osi3::Vector3d(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::osi3::Orientation3d(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  if (from._internal_has_geodetic_position()) {
    geodetic_position_ = new ::osi3::GeodeticPosition(*from.geodetic_position_);
  } else {
    geodetic_position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData.VehicleLocalization)
}

void HostVehicleData_VehicleLocalization::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&geodetic_position_) -
    reinterpret_cast<char*>(&position_)) + sizeof(geodetic_position_));
}

HostVehicleData_VehicleLocalization::~HostVehicleData_VehicleLocalization() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData.VehicleLocalization)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HostVehicleData_VehicleLocalization::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
  if (this != internal_default_instance()) delete geodetic_position_;
}

void HostVehicleData_VehicleLocalization::ArenaDtor(void* object) {
  HostVehicleData_VehicleLocalization* _this = reinterpret_cast< HostVehicleData_VehicleLocalization* >(object);
  (void)_this;
}
void HostVehicleData_VehicleLocalization::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HostVehicleData_VehicleLocalization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HostVehicleData_VehicleLocalization::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData.VehicleLocalization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(orientation_ != nullptr);
      orientation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(geodetic_position_ != nullptr);
      geodetic_position_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostVehicleData_VehicleLocalization::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Vector3d position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Orientation3d orientation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.GeodeticPosition geodetic_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_geodetic_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostVehicleData_VehicleLocalization::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData.VehicleLocalization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.Vector3d position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // optional .osi3.Orientation3d orientation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::orientation(this), target, stream);
  }

  // optional .osi3.GeodeticPosition geodetic_position = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::geodetic_position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData.VehicleLocalization)
  return target;
}

size_t HostVehicleData_VehicleLocalization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData.VehicleLocalization)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .osi3.Vector3d position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .osi3.Orientation3d orientation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *orientation_);
    }

    // optional .osi3.GeodeticPosition geodetic_position = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *geodetic_position_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostVehicleData_VehicleLocalization::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HostVehicleData_VehicleLocalization::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostVehicleData_VehicleLocalization::GetClassData() const { return &_class_data_; }

void HostVehicleData_VehicleLocalization::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HostVehicleData_VehicleLocalization *>(to)->MergeFrom(
      static_cast<const HostVehicleData_VehicleLocalization &>(from));
}


void HostVehicleData_VehicleLocalization::MergeFrom(const HostVehicleData_VehicleLocalization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData.VehicleLocalization)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::osi3::Vector3d::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_orientation()->::osi3::Orientation3d::MergeFrom(from._internal_orientation());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_geodetic_position()->::osi3::GeodeticPosition::MergeFrom(from._internal_geodetic_position());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostVehicleData_VehicleLocalization::CopyFrom(const HostVehicleData_VehicleLocalization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData.VehicleLocalization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData_VehicleLocalization::IsInitialized() const {
  return true;
}

void HostVehicleData_VehicleLocalization::InternalSwap(HostVehicleData_VehicleLocalization* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HostVehicleData_VehicleLocalization, geodetic_position_)
      + sizeof(HostVehicleData_VehicleLocalization::geodetic_position_)
      - PROTOBUF_FIELD_OFFSET(HostVehicleData_VehicleLocalization, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData_VehicleLocalization::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fhostvehicledata_2eproto_getter, &descriptor_table_osi_5fhostvehicledata_2eproto_once,
      file_level_metadata_osi_5fhostvehicledata_2eproto[7]);
}

// ===================================================================

class HostVehicleData::_Internal {
 public:
  using HasBits = decltype(std::declval<HostVehicleData>()._has_bits_);
  static const ::osi3::InterfaceVersion& version(const HostVehicleData* msg);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::osi3::Timestamp& timestamp(const HostVehicleData* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::osi3::Identifier& host_vehicle_id(const HostVehicleData* msg);
  static void set_has_host_vehicle_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::osi3::BaseMoving& location(const HostVehicleData* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::BaseMoving& location_rmse(const HostVehicleData* msg);
  static void set_has_location_rmse(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::HostVehicleData_VehicleBasics& vehicle_basics(const HostVehicleData* msg);
  static void set_has_vehicle_basics(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::osi3::HostVehicleData_VehiclePowertrain& vehicle_powertrain(const HostVehicleData* msg);
  static void set_has_vehicle_powertrain(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::osi3::HostVehicleData_VehicleBrakeSystem& vehicle_brake_system(const HostVehicleData* msg);
  static void set_has_vehicle_brake_system(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::osi3::HostVehicleData_VehicleSteering& vehicle_steering(const HostVehicleData* msg);
  static void set_has_vehicle_steering(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::osi3::HostVehicleData_VehicleWheels& vehicle_wheels(const HostVehicleData* msg);
  static void set_has_vehicle_wheels(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::osi3::HostVehicleData_VehicleLocalization& vehicle_localization(const HostVehicleData* msg);
  static void set_has_vehicle_localization(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::osi3::InterfaceVersion&
HostVehicleData::_Internal::version(const HostVehicleData* msg) {
  return *msg->version_;
}
const ::osi3::Timestamp&
HostVehicleData::_Internal::timestamp(const HostVehicleData* msg) {
  return *msg->timestamp_;
}
const ::osi3::Identifier&
HostVehicleData::_Internal::host_vehicle_id(const HostVehicleData* msg) {
  return *msg->host_vehicle_id_;
}
const ::osi3::BaseMoving&
HostVehicleData::_Internal::location(const HostVehicleData* msg) {
  return *msg->location_;
}
const ::osi3::BaseMoving&
HostVehicleData::_Internal::location_rmse(const HostVehicleData* msg) {
  return *msg->location_rmse_;
}
const ::osi3::HostVehicleData_VehicleBasics&
HostVehicleData::_Internal::vehicle_basics(const HostVehicleData* msg) {
  return *msg->vehicle_basics_;
}
const ::osi3::HostVehicleData_VehiclePowertrain&
HostVehicleData::_Internal::vehicle_powertrain(const HostVehicleData* msg) {
  return *msg->vehicle_powertrain_;
}
const ::osi3::HostVehicleData_VehicleBrakeSystem&
HostVehicleData::_Internal::vehicle_brake_system(const HostVehicleData* msg) {
  return *msg->vehicle_brake_system_;
}
const ::osi3::HostVehicleData_VehicleSteering&
HostVehicleData::_Internal::vehicle_steering(const HostVehicleData* msg) {
  return *msg->vehicle_steering_;
}
const ::osi3::HostVehicleData_VehicleWheels&
HostVehicleData::_Internal::vehicle_wheels(const HostVehicleData* msg) {
  return *msg->vehicle_wheels_;
}
const ::osi3::HostVehicleData_VehicleLocalization&
HostVehicleData::_Internal::vehicle_localization(const HostVehicleData* msg) {
  return *msg->vehicle_localization_;
}
void HostVehicleData::clear_version() {
  if (version_ != nullptr) version_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void HostVehicleData::clear_timestamp() {
  if (timestamp_ != nullptr) timestamp_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void HostVehicleData::clear_host_vehicle_id() {
  if (host_vehicle_id_ != nullptr) host_vehicle_id_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void HostVehicleData::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void HostVehicleData::clear_location_rmse() {
  if (location_rmse_ != nullptr) location_rmse_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
HostVehicleData::HostVehicleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.HostVehicleData)
}
HostVehicleData::HostVehicleData(const HostVehicleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::osi3::BaseMoving(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_location_rmse()) {
    location_rmse_ = new ::osi3::BaseMoving(*from.location_rmse_);
  } else {
    location_rmse_ = nullptr;
  }
  if (from._internal_has_vehicle_basics()) {
    vehicle_basics_ = new ::osi3::HostVehicleData_VehicleBasics(*from.vehicle_basics_);
  } else {
    vehicle_basics_ = nullptr;
  }
  if (from._internal_has_vehicle_powertrain()) {
    vehicle_powertrain_ = new ::osi3::HostVehicleData_VehiclePowertrain(*from.vehicle_powertrain_);
  } else {
    vehicle_powertrain_ = nullptr;
  }
  if (from._internal_has_vehicle_brake_system()) {
    vehicle_brake_system_ = new ::osi3::HostVehicleData_VehicleBrakeSystem(*from.vehicle_brake_system_);
  } else {
    vehicle_brake_system_ = nullptr;
  }
  if (from._internal_has_vehicle_steering()) {
    vehicle_steering_ = new ::osi3::HostVehicleData_VehicleSteering(*from.vehicle_steering_);
  } else {
    vehicle_steering_ = nullptr;
  }
  if (from._internal_has_vehicle_wheels()) {
    vehicle_wheels_ = new ::osi3::HostVehicleData_VehicleWheels(*from.vehicle_wheels_);
  } else {
    vehicle_wheels_ = nullptr;
  }
  if (from._internal_has_vehicle_localization()) {
    vehicle_localization_ = new ::osi3::HostVehicleData_VehicleLocalization(*from.vehicle_localization_);
  } else {
    vehicle_localization_ = nullptr;
  }
  if (from._internal_has_version()) {
    version_ = new ::osi3::InterfaceVersion(*from.version_);
  } else {
    version_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::osi3::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from._internal_has_host_vehicle_id()) {
    host_vehicle_id_ = new ::osi3::Identifier(*from.host_vehicle_id_);
  } else {
    host_vehicle_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData)
}

void HostVehicleData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&host_vehicle_id_) -
    reinterpret_cast<char*>(&location_)) + sizeof(host_vehicle_id_));
}

HostVehicleData::~HostVehicleData() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HostVehicleData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete location_rmse_;
  if (this != internal_default_instance()) delete vehicle_basics_;
  if (this != internal_default_instance()) delete vehicle_powertrain_;
  if (this != internal_default_instance()) delete vehicle_brake_system_;
  if (this != internal_default_instance()) delete vehicle_steering_;
  if (this != internal_default_instance()) delete vehicle_wheels_;
  if (this != internal_default_instance()) delete vehicle_localization_;
  if (this != internal_default_instance()) delete version_;
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete host_vehicle_id_;
}

void HostVehicleData::ArenaDtor(void* object) {
  HostVehicleData* _this = reinterpret_cast< HostVehicleData* >(object);
  (void)_this;
}
void HostVehicleData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HostVehicleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HostVehicleData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(location_ != nullptr);
      location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(location_rmse_ != nullptr);
      location_rmse_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(vehicle_basics_ != nullptr);
      vehicle_basics_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(vehicle_powertrain_ != nullptr);
      vehicle_powertrain_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(vehicle_brake_system_ != nullptr);
      vehicle_brake_system_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(vehicle_steering_ != nullptr);
      vehicle_steering_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(vehicle_wheels_ != nullptr);
      vehicle_wheels_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(vehicle_localization_ != nullptr);
      vehicle_localization_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(version_ != nullptr);
      version_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(timestamp_ != nullptr);
      timestamp_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(host_vehicle_id_ != nullptr);
      host_vehicle_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostVehicleData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.BaseMoving location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.BaseMoving location_rmse = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location_rmse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.HostVehicleData.VehicleBasics vehicle_basics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_basics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.HostVehicleData.VehiclePowertrain vehicle_powertrain = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_powertrain(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.HostVehicleData.VehicleBrakeSystem vehicle_brake_system = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_brake_system(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.HostVehicleData.VehicleSteering vehicle_steering = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_steering(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.HostVehicleData.VehicleWheels vehicle_wheels = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_wheels(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.HostVehicleData.VehicleLocalization vehicle_localization = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_localization(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.InterfaceVersion version = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Timestamp timestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Identifier host_vehicle_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_vehicle_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostVehicleData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.BaseMoving location = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::location(this), target, stream);
  }

  // optional .osi3.BaseMoving location_rmse = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::location_rmse(this), target, stream);
  }

  // optional .osi3.HostVehicleData.VehicleBasics vehicle_basics = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::vehicle_basics(this), target, stream);
  }

  // optional .osi3.HostVehicleData.VehiclePowertrain vehicle_powertrain = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::vehicle_powertrain(this), target, stream);
  }

  // optional .osi3.HostVehicleData.VehicleBrakeSystem vehicle_brake_system = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::vehicle_brake_system(this), target, stream);
  }

  // optional .osi3.HostVehicleData.VehicleSteering vehicle_steering = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::vehicle_steering(this), target, stream);
  }

  // optional .osi3.HostVehicleData.VehicleWheels vehicle_wheels = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::vehicle_wheels(this), target, stream);
  }

  // optional .osi3.HostVehicleData.VehicleLocalization vehicle_localization = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::vehicle_localization(this), target, stream);
  }

  // optional .osi3.InterfaceVersion version = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::version(this), target, stream);
  }

  // optional .osi3.Timestamp timestamp = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::timestamp(this), target, stream);
  }

  // optional .osi3.Identifier host_vehicle_id = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::host_vehicle_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData)
  return target;
}

size_t HostVehicleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .osi3.BaseMoving location = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional .osi3.BaseMoving location_rmse = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_rmse_);
    }

    // optional .osi3.HostVehicleData.VehicleBasics vehicle_basics = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicle_basics_);
    }

    // optional .osi3.HostVehicleData.VehiclePowertrain vehicle_powertrain = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicle_powertrain_);
    }

    // optional .osi3.HostVehicleData.VehicleBrakeSystem vehicle_brake_system = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicle_brake_system_);
    }

    // optional .osi3.HostVehicleData.VehicleSteering vehicle_steering = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicle_steering_);
    }

    // optional .osi3.HostVehicleData.VehicleWheels vehicle_wheels = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicle_wheels_);
    }

    // optional .osi3.HostVehicleData.VehicleLocalization vehicle_localization = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicle_localization_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .osi3.InterfaceVersion version = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *version_);
    }

    // optional .osi3.Timestamp timestamp = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *timestamp_);
    }

    // optional .osi3.Identifier host_vehicle_id = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *host_vehicle_id_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostVehicleData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HostVehicleData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostVehicleData::GetClassData() const { return &_class_data_; }

void HostVehicleData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HostVehicleData *>(to)->MergeFrom(
      static_cast<const HostVehicleData &>(from));
}


void HostVehicleData::MergeFrom(const HostVehicleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::osi3::BaseMoving::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_location_rmse()->::osi3::BaseMoving::MergeFrom(from._internal_location_rmse());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_vehicle_basics()->::osi3::HostVehicleData_VehicleBasics::MergeFrom(from._internal_vehicle_basics());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_vehicle_powertrain()->::osi3::HostVehicleData_VehiclePowertrain::MergeFrom(from._internal_vehicle_powertrain());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_vehicle_brake_system()->::osi3::HostVehicleData_VehicleBrakeSystem::MergeFrom(from._internal_vehicle_brake_system());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_vehicle_steering()->::osi3::HostVehicleData_VehicleSteering::MergeFrom(from._internal_vehicle_steering());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_vehicle_wheels()->::osi3::HostVehicleData_VehicleWheels::MergeFrom(from._internal_vehicle_wheels());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_vehicle_localization()->::osi3::HostVehicleData_VehicleLocalization::MergeFrom(from._internal_vehicle_localization());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_version()->::osi3::InterfaceVersion::MergeFrom(from._internal_version());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_timestamp()->::osi3::Timestamp::MergeFrom(from._internal_timestamp());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_host_vehicle_id()->::osi3::Identifier::MergeFrom(from._internal_host_vehicle_id());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostVehicleData::CopyFrom(const HostVehicleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData::IsInitialized() const {
  return true;
}

void HostVehicleData::InternalSwap(HostVehicleData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HostVehicleData, host_vehicle_id_)
      + sizeof(HostVehicleData::host_vehicle_id_)
      - PROTOBUF_FIELD_OFFSET(HostVehicleData, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fhostvehicledata_2eproto_getter, &descriptor_table_osi_5fhostvehicledata_2eproto_once,
      file_level_metadata_osi_5fhostvehicledata_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData_VehicleBasics* Arena::CreateMaybeMessage< ::osi3::HostVehicleData_VehicleBasics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::HostVehicleData_VehicleBasics >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData_VehiclePowertrain_Motor* Arena::CreateMaybeMessage< ::osi3::HostVehicleData_VehiclePowertrain_Motor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::HostVehicleData_VehiclePowertrain_Motor >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData_VehiclePowertrain* Arena::CreateMaybeMessage< ::osi3::HostVehicleData_VehiclePowertrain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::HostVehicleData_VehiclePowertrain >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData_VehicleBrakeSystem* Arena::CreateMaybeMessage< ::osi3::HostVehicleData_VehicleBrakeSystem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::HostVehicleData_VehicleBrakeSystem >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData_VehicleSteering* Arena::CreateMaybeMessage< ::osi3::HostVehicleData_VehicleSteering >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::HostVehicleData_VehicleSteering >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData_VehicleWheels_WheelData* Arena::CreateMaybeMessage< ::osi3::HostVehicleData_VehicleWheels_WheelData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::HostVehicleData_VehicleWheels_WheelData >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData_VehicleWheels* Arena::CreateMaybeMessage< ::osi3::HostVehicleData_VehicleWheels >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::HostVehicleData_VehicleWheels >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData_VehicleLocalization* Arena::CreateMaybeMessage< ::osi3::HostVehicleData_VehicleLocalization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::HostVehicleData_VehicleLocalization >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData* Arena::CreateMaybeMessage< ::osi3::HostVehicleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::HostVehicleData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
