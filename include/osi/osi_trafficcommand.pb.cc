// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_trafficcommand.proto

#include "osi_trafficcommand.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace osi3 {
constexpr TrafficCommand::TrafficCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_()
  , version_(nullptr)
  , timestamp_(nullptr)
  , traffic_participant_id_(nullptr){}
struct TrafficCommandDefaultTypeInternal {
  constexpr TrafficCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficCommandDefaultTypeInternal() {}
  union {
    TrafficCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficCommandDefaultTypeInternal _TrafficCommand_default_instance_;
constexpr TrafficAction_ActionHeader::TrafficAction_ActionHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_id_(nullptr){}
struct TrafficAction_ActionHeaderDefaultTypeInternal {
  constexpr TrafficAction_ActionHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficAction_ActionHeaderDefaultTypeInternal() {}
  union {
    TrafficAction_ActionHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficAction_ActionHeaderDefaultTypeInternal _TrafficAction_ActionHeader_default_instance_;
constexpr TrafficAction_DynamicConstraints::TrafficAction_DynamicConstraints(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : max_acceleration_(0)
  , max_deceleration_(0)
  , max_speed_(0){}
struct TrafficAction_DynamicConstraintsDefaultTypeInternal {
  constexpr TrafficAction_DynamicConstraintsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficAction_DynamicConstraintsDefaultTypeInternal() {}
  union {
    TrafficAction_DynamicConstraints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficAction_DynamicConstraintsDefaultTypeInternal _TrafficAction_DynamicConstraints_default_instance_;
constexpr TrafficAction_FollowTrajectoryAction::TrafficAction_FollowTrajectoryAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trajectory_point_()
  , action_header_(nullptr)
  , constrain_orientation_(false)
  , following_mode_(0)
{}
struct TrafficAction_FollowTrajectoryActionDefaultTypeInternal {
  constexpr TrafficAction_FollowTrajectoryActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficAction_FollowTrajectoryActionDefaultTypeInternal() {}
  union {
    TrafficAction_FollowTrajectoryAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficAction_FollowTrajectoryActionDefaultTypeInternal _TrafficAction_FollowTrajectoryAction_default_instance_;
constexpr TrafficAction_FollowPathAction::TrafficAction_FollowPathAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_point_()
  , action_header_(nullptr)
  , constrain_orientation_(false)
  , following_mode_(0)
{}
struct TrafficAction_FollowPathActionDefaultTypeInternal {
  constexpr TrafficAction_FollowPathActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficAction_FollowPathActionDefaultTypeInternal() {}
  union {
    TrafficAction_FollowPathAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficAction_FollowPathActionDefaultTypeInternal _TrafficAction_FollowPathAction_default_instance_;
constexpr TrafficAction_AcquireGlobalPositionAction::TrafficAction_AcquireGlobalPositionAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_header_(nullptr)
  , position_(nullptr)
  , orientation_(nullptr){}
struct TrafficAction_AcquireGlobalPositionActionDefaultTypeInternal {
  constexpr TrafficAction_AcquireGlobalPositionActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficAction_AcquireGlobalPositionActionDefaultTypeInternal() {}
  union {
    TrafficAction_AcquireGlobalPositionAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficAction_AcquireGlobalPositionActionDefaultTypeInternal _TrafficAction_AcquireGlobalPositionAction_default_instance_;
constexpr TrafficAction_LaneChangeAction::TrafficAction_LaneChangeAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_header_(nullptr)
  , relative_target_lane_(0)
  , dynamics_shape_(0)

  , duration_(0)
  , distance_(0){}
struct TrafficAction_LaneChangeActionDefaultTypeInternal {
  constexpr TrafficAction_LaneChangeActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficAction_LaneChangeActionDefaultTypeInternal() {}
  union {
    TrafficAction_LaneChangeAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficAction_LaneChangeActionDefaultTypeInternal _TrafficAction_LaneChangeAction_default_instance_;
constexpr TrafficAction_SpeedAction::TrafficAction_SpeedAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_header_(nullptr)
  , absolute_target_speed_(0)
  , duration_(0)
  , distance_(0)
  , dynamics_shape_(0)
{}
struct TrafficAction_SpeedActionDefaultTypeInternal {
  constexpr TrafficAction_SpeedActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficAction_SpeedActionDefaultTypeInternal() {}
  union {
    TrafficAction_SpeedAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficAction_SpeedActionDefaultTypeInternal _TrafficAction_SpeedAction_default_instance_;
constexpr TrafficAction_AbortActionsAction::TrafficAction_AbortActionsAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_action_id_()
  , action_header_(nullptr){}
struct TrafficAction_AbortActionsActionDefaultTypeInternal {
  constexpr TrafficAction_AbortActionsActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficAction_AbortActionsActionDefaultTypeInternal() {}
  union {
    TrafficAction_AbortActionsAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficAction_AbortActionsActionDefaultTypeInternal _TrafficAction_AbortActionsAction_default_instance_;
constexpr TrafficAction_EndActionsAction::TrafficAction_EndActionsAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_action_id_()
  , action_header_(nullptr){}
struct TrafficAction_EndActionsActionDefaultTypeInternal {
  constexpr TrafficAction_EndActionsActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficAction_EndActionsActionDefaultTypeInternal() {}
  union {
    TrafficAction_EndActionsAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficAction_EndActionsActionDefaultTypeInternal _TrafficAction_EndActionsAction_default_instance_;
constexpr TrafficAction_CustomAction::TrafficAction_CustomAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : command_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , command_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_header_(nullptr){}
struct TrafficAction_CustomActionDefaultTypeInternal {
  constexpr TrafficAction_CustomActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficAction_CustomActionDefaultTypeInternal() {}
  union {
    TrafficAction_CustomAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficAction_CustomActionDefaultTypeInternal _TrafficAction_CustomAction_default_instance_;
constexpr TrafficAction_LongitudinalDistanceAction::TrafficAction_LongitudinalDistanceAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_header_(nullptr)
  , target_traffic_participant_id_(nullptr)
  , dynamic_constraints_(nullptr)
  , distance_(0)
  , freespace_(false)
  , follow_(false){}
struct TrafficAction_LongitudinalDistanceActionDefaultTypeInternal {
  constexpr TrafficAction_LongitudinalDistanceActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficAction_LongitudinalDistanceActionDefaultTypeInternal() {}
  union {
    TrafficAction_LongitudinalDistanceAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficAction_LongitudinalDistanceActionDefaultTypeInternal _TrafficAction_LongitudinalDistanceAction_default_instance_;
constexpr TrafficAction_LateralDistanceAction::TrafficAction_LateralDistanceAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_header_(nullptr)
  , target_traffic_participant_id_(nullptr)
  , dynamic_constraints_(nullptr)
  , distance_(0)
  , freespace_(false)
  , follow_(false){}
struct TrafficAction_LateralDistanceActionDefaultTypeInternal {
  constexpr TrafficAction_LateralDistanceActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficAction_LateralDistanceActionDefaultTypeInternal() {}
  union {
    TrafficAction_LateralDistanceAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficAction_LateralDistanceActionDefaultTypeInternal _TrafficAction_LateralDistanceAction_default_instance_;
constexpr TrafficAction_LaneOffsetAction::TrafficAction_LaneOffsetAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_header_(nullptr)
  , target_lane_offset_(0)
  , dynamics_shape_(0)
{}
struct TrafficAction_LaneOffsetActionDefaultTypeInternal {
  constexpr TrafficAction_LaneOffsetActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficAction_LaneOffsetActionDefaultTypeInternal() {}
  union {
    TrafficAction_LaneOffsetAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficAction_LaneOffsetActionDefaultTypeInternal _TrafficAction_LaneOffsetAction_default_instance_;
constexpr TrafficAction_TeleportAction::TrafficAction_TeleportAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_header_(nullptr)
  , position_(nullptr)
  , orientation_(nullptr){}
struct TrafficAction_TeleportActionDefaultTypeInternal {
  constexpr TrafficAction_TeleportActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficAction_TeleportActionDefaultTypeInternal() {}
  union {
    TrafficAction_TeleportAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficAction_TeleportActionDefaultTypeInternal _TrafficAction_TeleportAction_default_instance_;
constexpr TrafficAction::TrafficAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : follow_trajectory_action_(nullptr)
  , follow_path_action_(nullptr)
  , acquire_global_position_action_(nullptr)
  , lane_change_action_(nullptr)
  , speed_action_(nullptr)
  , abort_actions_action_(nullptr)
  , end_actions_action_(nullptr)
  , custom_action_(nullptr)
  , longitudinal_distance_action_(nullptr)
  , lane_offset_action_(nullptr)
  , lateral_distance_action_(nullptr)
  , teleport_action_(nullptr){}
struct TrafficActionDefaultTypeInternal {
  constexpr TrafficActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficActionDefaultTypeInternal() {}
  union {
    TrafficAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficActionDefaultTypeInternal _TrafficAction_default_instance_;
}  // namespace osi3
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5ftrafficcommand_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_osi_5ftrafficcommand_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5ftrafficcommand_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5ftrafficcommand_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficCommand, version_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficCommand, timestamp_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficCommand, traffic_participant_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficCommand, action_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_ActionHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_ActionHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_ActionHeader, action_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_DynamicConstraints, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_DynamicConstraints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_DynamicConstraints, max_acceleration_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_DynamicConstraints, max_deceleration_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_DynamicConstraints, max_speed_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_FollowTrajectoryAction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_FollowTrajectoryAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_FollowTrajectoryAction, action_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_FollowTrajectoryAction, trajectory_point_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_FollowTrajectoryAction, constrain_orientation_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_FollowTrajectoryAction, following_mode_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_FollowPathAction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_FollowPathAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_FollowPathAction, action_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_FollowPathAction, path_point_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_FollowPathAction, constrain_orientation_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_FollowPathAction, following_mode_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_AcquireGlobalPositionAction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_AcquireGlobalPositionAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_AcquireGlobalPositionAction, action_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_AcquireGlobalPositionAction, position_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_AcquireGlobalPositionAction, orientation_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_LaneChangeAction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_LaneChangeAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_LaneChangeAction, action_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_LaneChangeAction, relative_target_lane_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_LaneChangeAction, dynamics_shape_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_LaneChangeAction, duration_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_LaneChangeAction, distance_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_SpeedAction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_SpeedAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_SpeedAction, action_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_SpeedAction, absolute_target_speed_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_SpeedAction, dynamics_shape_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_SpeedAction, duration_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_SpeedAction, distance_),
  0,
  1,
  4,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_AbortActionsAction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_AbortActionsAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_AbortActionsAction, action_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_AbortActionsAction, target_action_id_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_EndActionsAction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_EndActionsAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_EndActionsAction, action_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_EndActionsAction, target_action_id_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_CustomAction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_CustomAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_CustomAction, action_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_CustomAction, command_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_CustomAction, command_type_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_LongitudinalDistanceAction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_LongitudinalDistanceAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_LongitudinalDistanceAction, action_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_LongitudinalDistanceAction, target_traffic_participant_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_LongitudinalDistanceAction, distance_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_LongitudinalDistanceAction, freespace_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_LongitudinalDistanceAction, follow_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_LongitudinalDistanceAction, dynamic_constraints_),
  0,
  1,
  3,
  4,
  5,
  2,
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_LateralDistanceAction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_LateralDistanceAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_LateralDistanceAction, action_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_LateralDistanceAction, target_traffic_participant_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_LateralDistanceAction, distance_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_LateralDistanceAction, freespace_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_LateralDistanceAction, follow_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_LateralDistanceAction, dynamic_constraints_),
  0,
  1,
  3,
  4,
  5,
  2,
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_LaneOffsetAction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_LaneOffsetAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_LaneOffsetAction, action_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_LaneOffsetAction, target_lane_offset_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_LaneOffsetAction, dynamics_shape_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_TeleportAction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_TeleportAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_TeleportAction, action_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_TeleportAction, position_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction_TeleportAction, orientation_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction, follow_trajectory_action_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction, follow_path_action_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction, acquire_global_position_action_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction, lane_change_action_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction, speed_action_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction, abort_actions_action_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction, end_actions_action_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction, custom_action_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction, longitudinal_distance_action_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction, lane_offset_action_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction, lateral_distance_action_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficAction, teleport_action_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::osi3::TrafficCommand)},
  { 14, 21, -1, sizeof(::osi3::TrafficAction_ActionHeader)},
  { 22, 31, -1, sizeof(::osi3::TrafficAction_DynamicConstraints)},
  { 34, 44, -1, sizeof(::osi3::TrafficAction_FollowTrajectoryAction)},
  { 48, 58, -1, sizeof(::osi3::TrafficAction_FollowPathAction)},
  { 62, 71, -1, sizeof(::osi3::TrafficAction_AcquireGlobalPositionAction)},
  { 74, 85, -1, sizeof(::osi3::TrafficAction_LaneChangeAction)},
  { 90, 101, -1, sizeof(::osi3::TrafficAction_SpeedAction)},
  { 106, 114, -1, sizeof(::osi3::TrafficAction_AbortActionsAction)},
  { 116, 124, -1, sizeof(::osi3::TrafficAction_EndActionsAction)},
  { 126, 135, -1, sizeof(::osi3::TrafficAction_CustomAction)},
  { 138, 150, -1, sizeof(::osi3::TrafficAction_LongitudinalDistanceAction)},
  { 156, 168, -1, sizeof(::osi3::TrafficAction_LateralDistanceAction)},
  { 174, 183, -1, sizeof(::osi3::TrafficAction_LaneOffsetAction)},
  { 186, 195, -1, sizeof(::osi3::TrafficAction_TeleportAction)},
  { 198, 216, -1, sizeof(::osi3::TrafficAction)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficAction_ActionHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficAction_DynamicConstraints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficAction_FollowTrajectoryAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficAction_FollowPathAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficAction_AcquireGlobalPositionAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficAction_LaneChangeAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficAction_SpeedAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficAction_AbortActionsAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficAction_EndActionsAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficAction_CustomAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficAction_LongitudinalDistanceAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficAction_LateralDistanceAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficAction_LaneOffsetAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficAction_TeleportAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficAction_default_instance_),
};

const char descriptor_table_protodef_osi_5ftrafficcommand_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030osi_trafficcommand.proto\022\004osi3\032\021osi_ve"
  "rsion.proto\032\020osi_common.proto\"\264\001\n\016Traffi"
  "cCommand\022\'\n\007version\030\001 \001(\0132\026.osi3.Interfa"
  "ceVersion\022\"\n\ttimestamp\030\002 \001(\0132\017.osi3.Time"
  "stamp\0220\n\026traffic_participant_id\030\003 \001(\0132\020."
  "osi3.Identifier\022#\n\006action\030\004 \003(\0132\023.osi3.T"
  "rafficAction\"\336\032\n\rTrafficAction\022L\n\030follow"
  "_trajectory_action\030\001 \001(\0132*.osi3.TrafficA"
  "ction.FollowTrajectoryAction\022@\n\022follow_p"
  "ath_action\030\002 \001(\0132$.osi3.TrafficAction.Fo"
  "llowPathAction\022W\n\036acquire_global_positio"
  "n_action\030\003 \001(\0132/.osi3.TrafficAction.Acqu"
  "ireGlobalPositionAction\022@\n\022lane_change_a"
  "ction\030\004 \001(\0132$.osi3.TrafficAction.LaneCha"
  "ngeAction\0225\n\014speed_action\030\005 \001(\0132\037.osi3.T"
  "rafficAction.SpeedAction\022D\n\024abort_action"
  "s_action\030\006 \001(\0132&.osi3.TrafficAction.Abor"
  "tActionsAction\022@\n\022end_actions_action\030\007 \001"
  "(\0132$.osi3.TrafficAction.EndActionsAction"
  "\0227\n\rcustom_action\030\010 \001(\0132 .osi3.TrafficAc"
  "tion.CustomAction\022T\n\034longitudinal_distan"
  "ce_action\030\t \001(\0132..osi3.TrafficAction.Lon"
  "gitudinalDistanceAction\022@\n\022lane_offset_a"
  "ction\030\n \001(\0132$.osi3.TrafficAction.LaneOff"
  "setAction\022J\n\027lateral_distance_action\030\013 \001"
  "(\0132).osi3.TrafficAction.LateralDistanceA"
  "ction\022;\n\017teleport_action\030\014 \001(\0132\".osi3.Tr"
  "afficAction.TeleportAction\0323\n\014ActionHead"
  "er\022#\n\taction_id\030\001 \001(\0132\020.osi3.Identifier\032"
  "[\n\022DynamicConstraints\022\030\n\020max_acceleratio"
  "n\030\001 \001(\001\022\030\n\020max_deceleration\030\002 \001(\001\022\021\n\tmax"
  "_speed\030\003 \001(\001\032\327\001\n\026FollowTrajectoryAction\022"
  "7\n\raction_header\030\001 \001(\0132 .osi3.TrafficAct"
  "ion.ActionHeader\022*\n\020trajectory_point\030\002 \003"
  "(\0132\020.osi3.StatePoint\022\035\n\025constrain_orient"
  "ation\030\003 \001(\010\0229\n\016following_mode\030\004 \001(\0162!.os"
  "i3.TrafficAction.FollowingMode\032\313\001\n\020Follo"
  "wPathAction\0227\n\raction_header\030\001 \001(\0132 .osi"
  "3.TrafficAction.ActionHeader\022$\n\npath_poi"
  "nt\030\002 \003(\0132\020.osi3.StatePoint\022\035\n\025constrain_"
  "orientation\030\003 \001(\010\0229\n\016following_mode\030\004 \001("
  "\0162!.osi3.TrafficAction.FollowingMode\032\242\001\n"
  "\033AcquireGlobalPositionAction\0227\n\raction_h"
  "eader\030\001 \001(\0132 .osi3.TrafficAction.ActionH"
  "eader\022 \n\010position\030\002 \001(\0132\016.osi3.Vector3d\022"
  "(\n\013orientation\030\003 \001(\0132\023.osi3.Orientation3"
  "d\032\310\001\n\020LaneChangeAction\0227\n\raction_header\030"
  "\001 \001(\0132 .osi3.TrafficAction.ActionHeader\022"
  "\034\n\024relative_target_lane\030\002 \001(\005\0229\n\016dynamic"
  "s_shape\030\003 \001(\0162!.osi3.TrafficAction.Dynam"
  "icsShape\022\020\n\010duration\030\004 \001(\001\022\020\n\010distance\030\005"
  " \001(\001\032\304\001\n\013SpeedAction\0227\n\raction_header\030\001 "
  "\001(\0132 .osi3.TrafficAction.ActionHeader\022\035\n"
  "\025absolute_target_speed\030\002 \001(\001\0229\n\016dynamics"
  "_shape\030\003 \001(\0162!.osi3.TrafficAction.Dynami"
  "csShape\022\020\n\010duration\030\004 \001(\001\022\020\n\010distance\030\005 "
  "\001(\001\032y\n\022AbortActionsAction\0227\n\raction_head"
  "er\030\001 \001(\0132 .osi3.TrafficAction.ActionHead"
  "er\022*\n\020target_action_id\030\002 \003(\0132\020.osi3.Iden"
  "tifier\032w\n\020EndActionsAction\0227\n\raction_hea"
  "der\030\001 \001(\0132 .osi3.TrafficAction.ActionHea"
  "der\022*\n\020target_action_id\030\002 \003(\0132\020.osi3.Ide"
  "ntifier\032n\n\014CustomAction\0227\n\raction_header"
  "\030\001 \001(\0132 .osi3.TrafficAction.ActionHeader"
  "\022\017\n\007command\030\002 \001(\t\022\024\n\014command_type\030\003 \001(\t\032"
  "\210\002\n\032LongitudinalDistanceAction\0227\n\raction"
  "_header\030\001 \001(\0132 .osi3.TrafficAction.Actio"
  "nHeader\0227\n\035target_traffic_participant_id"
  "\030\002 \001(\0132\020.osi3.Identifier\022\020\n\010distance\030\003 \001"
  "(\001\022\021\n\tfreespace\030\004 \001(\010\022\016\n\006follow\030\005 \001(\010\022C\n"
  "\023dynamic_constraints\030\006 \001(\0132&.osi3.Traffi"
  "cAction.DynamicConstraints\032\203\002\n\025LateralDi"
  "stanceAction\0227\n\raction_header\030\001 \001(\0132 .os"
  "i3.TrafficAction.ActionHeader\0227\n\035target_"
  "traffic_participant_id\030\002 \001(\0132\020.osi3.Iden"
  "tifier\022\020\n\010distance\030\003 \001(\001\022\021\n\tfreespace\030\004 "
  "\001(\010\022\016\n\006follow\030\005 \001(\010\022C\n\023dynamic_constrain"
  "ts\030\006 \001(\0132&.osi3.TrafficAction.DynamicCon"
  "straints\032\242\001\n\020LaneOffsetAction\0227\n\raction_"
  "header\030\001 \001(\0132 .osi3.TrafficAction.Action"
  "Header\022\032\n\022target_lane_offset\030\002 \001(\001\0229\n\016dy"
  "namics_shape\030\003 \001(\0162!.osi3.TrafficAction."
  "DynamicsShape\032\225\001\n\016TeleportAction\0227\n\racti"
  "on_header\030\001 \001(\0132 .osi3.TrafficAction.Act"
  "ionHeader\022 \n\010position\030\002 \001(\0132\016.osi3.Vecto"
  "r3d\022(\n\013orientation\030\003 \001(\0132\023.osi3.Orientat"
  "ion3d\"G\n\rFollowingMode\022\033\n\027FOLLOWING_MODE"
  "_POSITION\020\000\022\031\n\025FOLLOWING_MODE_FOLLOW\020\001\"\234"
  "\001\n\rDynamicsShape\022\036\n\032DYNAMICS_SHAPE_UNSPE"
  "CIFIED\020\000\022\031\n\025DYNAMICS_SHAPE_LINEAR\020\001\022\030\n\024D"
  "YNAMICS_SHAPE_CUBIC\020\002\022\035\n\031DYNAMICS_SHAPE_"
  "SINUSOIDAL\020\003\022\027\n\023DYNAMICS_SHAPE_STEP\020\004B\002H"
  "\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5ftrafficcommand_2eproto_deps[2] = {
  &::descriptor_table_osi_5fcommon_2eproto,
  &::descriptor_table_osi_5fversion_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5ftrafficcommand_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5ftrafficcommand_2eproto = {
  false, false, 3681, descriptor_table_protodef_osi_5ftrafficcommand_2eproto, "osi_trafficcommand.proto", 
  &descriptor_table_osi_5ftrafficcommand_2eproto_once, descriptor_table_osi_5ftrafficcommand_2eproto_deps, 2, 16,
  schemas, file_default_instances, TableStruct_osi_5ftrafficcommand_2eproto::offsets,
  file_level_metadata_osi_5ftrafficcommand_2eproto, file_level_enum_descriptors_osi_5ftrafficcommand_2eproto, file_level_service_descriptors_osi_5ftrafficcommand_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_osi_5ftrafficcommand_2eproto_getter() {
  return &descriptor_table_osi_5ftrafficcommand_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_osi_5ftrafficcommand_2eproto(&descriptor_table_osi_5ftrafficcommand_2eproto);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficAction_FollowingMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficcommand_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficcommand_2eproto[0];
}
bool TrafficAction_FollowingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficAction_FollowingMode TrafficAction::FOLLOWING_MODE_POSITION;
constexpr TrafficAction_FollowingMode TrafficAction::FOLLOWING_MODE_FOLLOW;
constexpr TrafficAction_FollowingMode TrafficAction::FollowingMode_MIN;
constexpr TrafficAction_FollowingMode TrafficAction::FollowingMode_MAX;
constexpr int TrafficAction::FollowingMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficAction_DynamicsShape_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficcommand_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficcommand_2eproto[1];
}
bool TrafficAction_DynamicsShape_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficAction_DynamicsShape TrafficAction::DYNAMICS_SHAPE_UNSPECIFIED;
constexpr TrafficAction_DynamicsShape TrafficAction::DYNAMICS_SHAPE_LINEAR;
constexpr TrafficAction_DynamicsShape TrafficAction::DYNAMICS_SHAPE_CUBIC;
constexpr TrafficAction_DynamicsShape TrafficAction::DYNAMICS_SHAPE_SINUSOIDAL;
constexpr TrafficAction_DynamicsShape TrafficAction::DYNAMICS_SHAPE_STEP;
constexpr TrafficAction_DynamicsShape TrafficAction::DynamicsShape_MIN;
constexpr TrafficAction_DynamicsShape TrafficAction::DynamicsShape_MAX;
constexpr int TrafficAction::DynamicsShape_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class TrafficCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficCommand>()._has_bits_);
  static const ::osi3::InterfaceVersion& version(const TrafficCommand* msg);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::Timestamp& timestamp(const TrafficCommand* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::Identifier& traffic_participant_id(const TrafficCommand* msg);
  static void set_has_traffic_participant_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::osi3::InterfaceVersion&
TrafficCommand::_Internal::version(const TrafficCommand* msg) {
  return *msg->version_;
}
const ::osi3::Timestamp&
TrafficCommand::_Internal::timestamp(const TrafficCommand* msg) {
  return *msg->timestamp_;
}
const ::osi3::Identifier&
TrafficCommand::_Internal::traffic_participant_id(const TrafficCommand* msg) {
  return *msg->traffic_participant_id_;
}
void TrafficCommand::clear_version() {
  if (version_ != nullptr) version_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TrafficCommand::clear_timestamp() {
  if (timestamp_ != nullptr) timestamp_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void TrafficCommand::clear_traffic_participant_id() {
  if (traffic_participant_id_ != nullptr) traffic_participant_id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
TrafficCommand::TrafficCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  action_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficCommand)
}
TrafficCommand::TrafficCommand(const TrafficCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      action_(from.action_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_version()) {
    version_ = new ::osi3::InterfaceVersion(*from.version_);
  } else {
    version_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::osi3::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from._internal_has_traffic_participant_id()) {
    traffic_participant_id_ = new ::osi3::Identifier(*from.traffic_participant_id_);
  } else {
    traffic_participant_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficCommand)
}

void TrafficCommand::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&traffic_participant_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(traffic_participant_id_));
}

TrafficCommand::~TrafficCommand() {
  // @@protoc_insertion_point(destructor:osi3.TrafficCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete version_;
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete traffic_participant_id_;
}

void TrafficCommand::ArenaDtor(void* object) {
  TrafficCommand* _this = reinterpret_cast< TrafficCommand* >(object);
  (void)_this;
}
void TrafficCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(version_ != nullptr);
      version_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(timestamp_ != nullptr);
      timestamp_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(traffic_participant_id_ != nullptr);
      traffic_participant_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.InterfaceVersion version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Identifier traffic_participant_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_participant_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.TrafficAction action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_action(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.InterfaceVersion version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::version(this), target, stream);
  }

  // optional .osi3.Timestamp timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timestamp(this), target, stream);
  }

  // optional .osi3.Identifier traffic_participant_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::traffic_participant_id(this), target, stream);
  }

  // repeated .osi3.TrafficAction action = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_action_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_action(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficCommand)
  return target;
}

size_t TrafficCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.TrafficAction action = 4;
  total_size += 1UL * this->_internal_action_size();
  for (const auto& msg : this->action_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .osi3.InterfaceVersion version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *version_);
    }

    // optional .osi3.Timestamp timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *timestamp_);
    }

    // optional .osi3.Identifier traffic_participant_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *traffic_participant_id_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficCommand::GetClassData() const { return &_class_data_; }

void TrafficCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficCommand *>(to)->MergeFrom(
      static_cast<const TrafficCommand &>(from));
}


void TrafficCommand::MergeFrom(const TrafficCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  action_.MergeFrom(from.action_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_version()->::osi3::InterfaceVersion::MergeFrom(from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_timestamp()->::osi3::Timestamp::MergeFrom(from._internal_timestamp());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_traffic_participant_id()->::osi3::Identifier::MergeFrom(from._internal_traffic_participant_id());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficCommand::CopyFrom(const TrafficCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficCommand::IsInitialized() const {
  return true;
}

void TrafficCommand::InternalSwap(TrafficCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  action_.InternalSwap(&other->action_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficCommand, traffic_participant_id_)
      + sizeof(TrafficCommand::traffic_participant_id_)
      - PROTOBUF_FIELD_OFFSET(TrafficCommand, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5ftrafficcommand_2eproto_getter, &descriptor_table_osi_5ftrafficcommand_2eproto_once,
      file_level_metadata_osi_5ftrafficcommand_2eproto[0]);
}

// ===================================================================

class TrafficAction_ActionHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficAction_ActionHeader>()._has_bits_);
  static const ::osi3::Identifier& action_id(const TrafficAction_ActionHeader* msg);
  static void set_has_action_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osi3::Identifier&
TrafficAction_ActionHeader::_Internal::action_id(const TrafficAction_ActionHeader* msg) {
  return *msg->action_id_;
}
void TrafficAction_ActionHeader::clear_action_id() {
  if (action_id_ != nullptr) action_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TrafficAction_ActionHeader::TrafficAction_ActionHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficAction.ActionHeader)
}
TrafficAction_ActionHeader::TrafficAction_ActionHeader(const TrafficAction_ActionHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_id()) {
    action_id_ = new ::osi3::Identifier(*from.action_id_);
  } else {
    action_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficAction.ActionHeader)
}

void TrafficAction_ActionHeader::SharedCtor() {
action_id_ = nullptr;
}

TrafficAction_ActionHeader::~TrafficAction_ActionHeader() {
  // @@protoc_insertion_point(destructor:osi3.TrafficAction.ActionHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficAction_ActionHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_id_;
}

void TrafficAction_ActionHeader::ArenaDtor(void* object) {
  TrafficAction_ActionHeader* _this = reinterpret_cast< TrafficAction_ActionHeader* >(object);
  (void)_this;
}
void TrafficAction_ActionHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficAction_ActionHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficAction_ActionHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficAction.ActionHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(action_id_ != nullptr);
    action_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficAction_ActionHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Identifier action_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficAction_ActionHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficAction.ActionHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.Identifier action_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::action_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficAction.ActionHeader)
  return target;
}

size_t TrafficAction_ActionHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficAction.ActionHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .osi3.Identifier action_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficAction_ActionHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficAction_ActionHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficAction_ActionHeader::GetClassData() const { return &_class_data_; }

void TrafficAction_ActionHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficAction_ActionHeader *>(to)->MergeFrom(
      static_cast<const TrafficAction_ActionHeader &>(from));
}


void TrafficAction_ActionHeader::MergeFrom(const TrafficAction_ActionHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficAction.ActionHeader)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_action_id()) {
    _internal_mutable_action_id()->::osi3::Identifier::MergeFrom(from._internal_action_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficAction_ActionHeader::CopyFrom(const TrafficAction_ActionHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficAction.ActionHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficAction_ActionHeader::IsInitialized() const {
  return true;
}

void TrafficAction_ActionHeader::InternalSwap(TrafficAction_ActionHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(action_id_, other->action_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficAction_ActionHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5ftrafficcommand_2eproto_getter, &descriptor_table_osi_5ftrafficcommand_2eproto_once,
      file_level_metadata_osi_5ftrafficcommand_2eproto[1]);
}

// ===================================================================

class TrafficAction_DynamicConstraints::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficAction_DynamicConstraints>()._has_bits_);
  static void set_has_max_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_deceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TrafficAction_DynamicConstraints::TrafficAction_DynamicConstraints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficAction.DynamicConstraints)
}
TrafficAction_DynamicConstraints::TrafficAction_DynamicConstraints(const TrafficAction_DynamicConstraints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_acceleration_, &from.max_acceleration_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_speed_) -
    reinterpret_cast<char*>(&max_acceleration_)) + sizeof(max_speed_));
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficAction.DynamicConstraints)
}

void TrafficAction_DynamicConstraints::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_acceleration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_speed_) -
    reinterpret_cast<char*>(&max_acceleration_)) + sizeof(max_speed_));
}

TrafficAction_DynamicConstraints::~TrafficAction_DynamicConstraints() {
  // @@protoc_insertion_point(destructor:osi3.TrafficAction.DynamicConstraints)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficAction_DynamicConstraints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrafficAction_DynamicConstraints::ArenaDtor(void* object) {
  TrafficAction_DynamicConstraints* _this = reinterpret_cast< TrafficAction_DynamicConstraints* >(object);
  (void)_this;
}
void TrafficAction_DynamicConstraints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficAction_DynamicConstraints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficAction_DynamicConstraints::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficAction.DynamicConstraints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&max_acceleration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_speed_) -
        reinterpret_cast<char*>(&max_acceleration_)) + sizeof(max_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficAction_DynamicConstraints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double max_acceleration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_max_acceleration(&has_bits);
          max_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_deceleration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_max_deceleration(&has_bits);
          max_deceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_max_speed(&has_bits);
          max_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficAction_DynamicConstraints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficAction.DynamicConstraints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max_acceleration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_max_acceleration(), target);
  }

  // optional double max_deceleration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_deceleration(), target);
  }

  // optional double max_speed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficAction.DynamicConstraints)
  return target;
}

size_t TrafficAction_DynamicConstraints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficAction.DynamicConstraints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double max_acceleration = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double max_deceleration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double max_speed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficAction_DynamicConstraints::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficAction_DynamicConstraints::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficAction_DynamicConstraints::GetClassData() const { return &_class_data_; }

void TrafficAction_DynamicConstraints::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficAction_DynamicConstraints *>(to)->MergeFrom(
      static_cast<const TrafficAction_DynamicConstraints &>(from));
}


void TrafficAction_DynamicConstraints::MergeFrom(const TrafficAction_DynamicConstraints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficAction.DynamicConstraints)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      max_acceleration_ = from.max_acceleration_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_deceleration_ = from.max_deceleration_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_speed_ = from.max_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficAction_DynamicConstraints::CopyFrom(const TrafficAction_DynamicConstraints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficAction.DynamicConstraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficAction_DynamicConstraints::IsInitialized() const {
  return true;
}

void TrafficAction_DynamicConstraints::InternalSwap(TrafficAction_DynamicConstraints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficAction_DynamicConstraints, max_speed_)
      + sizeof(TrafficAction_DynamicConstraints::max_speed_)
      - PROTOBUF_FIELD_OFFSET(TrafficAction_DynamicConstraints, max_acceleration_)>(
          reinterpret_cast<char*>(&max_acceleration_),
          reinterpret_cast<char*>(&other->max_acceleration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficAction_DynamicConstraints::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5ftrafficcommand_2eproto_getter, &descriptor_table_osi_5ftrafficcommand_2eproto_once,
      file_level_metadata_osi_5ftrafficcommand_2eproto[2]);
}

// ===================================================================

class TrafficAction_FollowTrajectoryAction::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficAction_FollowTrajectoryAction>()._has_bits_);
  static const ::osi3::TrafficAction_ActionHeader& action_header(const TrafficAction_FollowTrajectoryAction* msg);
  static void set_has_action_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_constrain_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_following_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::osi3::TrafficAction_ActionHeader&
TrafficAction_FollowTrajectoryAction::_Internal::action_header(const TrafficAction_FollowTrajectoryAction* msg) {
  return *msg->action_header_;
}
void TrafficAction_FollowTrajectoryAction::clear_trajectory_point() {
  trajectory_point_.Clear();
}
TrafficAction_FollowTrajectoryAction::TrafficAction_FollowTrajectoryAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  trajectory_point_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficAction.FollowTrajectoryAction)
}
TrafficAction_FollowTrajectoryAction::TrafficAction_FollowTrajectoryAction(const TrafficAction_FollowTrajectoryAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      trajectory_point_(from.trajectory_point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_header()) {
    action_header_ = new ::osi3::TrafficAction_ActionHeader(*from.action_header_);
  } else {
    action_header_ = nullptr;
  }
  ::memcpy(&constrain_orientation_, &from.constrain_orientation_,
    static_cast<size_t>(reinterpret_cast<char*>(&following_mode_) -
    reinterpret_cast<char*>(&constrain_orientation_)) + sizeof(following_mode_));
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficAction.FollowTrajectoryAction)
}

void TrafficAction_FollowTrajectoryAction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&following_mode_) -
    reinterpret_cast<char*>(&action_header_)) + sizeof(following_mode_));
}

TrafficAction_FollowTrajectoryAction::~TrafficAction_FollowTrajectoryAction() {
  // @@protoc_insertion_point(destructor:osi3.TrafficAction.FollowTrajectoryAction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficAction_FollowTrajectoryAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_header_;
}

void TrafficAction_FollowTrajectoryAction::ArenaDtor(void* object) {
  TrafficAction_FollowTrajectoryAction* _this = reinterpret_cast< TrafficAction_FollowTrajectoryAction* >(object);
  (void)_this;
}
void TrafficAction_FollowTrajectoryAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficAction_FollowTrajectoryAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficAction_FollowTrajectoryAction::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficAction.FollowTrajectoryAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_point_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(action_header_ != nullptr);
    action_header_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&constrain_orientation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&following_mode_) -
        reinterpret_cast<char*>(&constrain_orientation_)) + sizeof(following_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficAction_FollowTrajectoryAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.TrafficAction.ActionHeader action_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.StatePoint trajectory_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectory_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool constrain_orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_constrain_orientation(&has_bits);
          constrain_orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficAction.FollowingMode following_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::TrafficAction_FollowingMode_IsValid(val))) {
            _internal_set_following_mode(static_cast<::osi3::TrafficAction_FollowingMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficAction_FollowTrajectoryAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficAction.FollowTrajectoryAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.TrafficAction.ActionHeader action_header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::action_header(this), target, stream);
  }

  // repeated .osi3.StatePoint trajectory_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trajectory_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_trajectory_point(i), target, stream);
  }

  // optional bool constrain_orientation = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_constrain_orientation(), target);
  }

  // optional .osi3.TrafficAction.FollowingMode following_mode = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_following_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficAction.FollowTrajectoryAction)
  return target;
}

size_t TrafficAction_FollowTrajectoryAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficAction.FollowTrajectoryAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.StatePoint trajectory_point = 2;
  total_size += 1UL * this->_internal_trajectory_point_size();
  for (const auto& msg : this->trajectory_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .osi3.TrafficAction.ActionHeader action_header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_header_);
    }

    // optional bool constrain_orientation = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional .osi3.TrafficAction.FollowingMode following_mode = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_following_mode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficAction_FollowTrajectoryAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficAction_FollowTrajectoryAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficAction_FollowTrajectoryAction::GetClassData() const { return &_class_data_; }

void TrafficAction_FollowTrajectoryAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficAction_FollowTrajectoryAction *>(to)->MergeFrom(
      static_cast<const TrafficAction_FollowTrajectoryAction &>(from));
}


void TrafficAction_FollowTrajectoryAction::MergeFrom(const TrafficAction_FollowTrajectoryAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficAction.FollowTrajectoryAction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_point_.MergeFrom(from.trajectory_point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_action_header()->::osi3::TrafficAction_ActionHeader::MergeFrom(from._internal_action_header());
    }
    if (cached_has_bits & 0x00000002u) {
      constrain_orientation_ = from.constrain_orientation_;
    }
    if (cached_has_bits & 0x00000004u) {
      following_mode_ = from.following_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficAction_FollowTrajectoryAction::CopyFrom(const TrafficAction_FollowTrajectoryAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficAction.FollowTrajectoryAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficAction_FollowTrajectoryAction::IsInitialized() const {
  return true;
}

void TrafficAction_FollowTrajectoryAction::InternalSwap(TrafficAction_FollowTrajectoryAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trajectory_point_.InternalSwap(&other->trajectory_point_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficAction_FollowTrajectoryAction, following_mode_)
      + sizeof(TrafficAction_FollowTrajectoryAction::following_mode_)
      - PROTOBUF_FIELD_OFFSET(TrafficAction_FollowTrajectoryAction, action_header_)>(
          reinterpret_cast<char*>(&action_header_),
          reinterpret_cast<char*>(&other->action_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficAction_FollowTrajectoryAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5ftrafficcommand_2eproto_getter, &descriptor_table_osi_5ftrafficcommand_2eproto_once,
      file_level_metadata_osi_5ftrafficcommand_2eproto[3]);
}

// ===================================================================

class TrafficAction_FollowPathAction::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficAction_FollowPathAction>()._has_bits_);
  static const ::osi3::TrafficAction_ActionHeader& action_header(const TrafficAction_FollowPathAction* msg);
  static void set_has_action_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_constrain_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_following_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::osi3::TrafficAction_ActionHeader&
TrafficAction_FollowPathAction::_Internal::action_header(const TrafficAction_FollowPathAction* msg) {
  return *msg->action_header_;
}
void TrafficAction_FollowPathAction::clear_path_point() {
  path_point_.Clear();
}
TrafficAction_FollowPathAction::TrafficAction_FollowPathAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  path_point_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficAction.FollowPathAction)
}
TrafficAction_FollowPathAction::TrafficAction_FollowPathAction(const TrafficAction_FollowPathAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      path_point_(from.path_point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_header()) {
    action_header_ = new ::osi3::TrafficAction_ActionHeader(*from.action_header_);
  } else {
    action_header_ = nullptr;
  }
  ::memcpy(&constrain_orientation_, &from.constrain_orientation_,
    static_cast<size_t>(reinterpret_cast<char*>(&following_mode_) -
    reinterpret_cast<char*>(&constrain_orientation_)) + sizeof(following_mode_));
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficAction.FollowPathAction)
}

void TrafficAction_FollowPathAction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&following_mode_) -
    reinterpret_cast<char*>(&action_header_)) + sizeof(following_mode_));
}

TrafficAction_FollowPathAction::~TrafficAction_FollowPathAction() {
  // @@protoc_insertion_point(destructor:osi3.TrafficAction.FollowPathAction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficAction_FollowPathAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_header_;
}

void TrafficAction_FollowPathAction::ArenaDtor(void* object) {
  TrafficAction_FollowPathAction* _this = reinterpret_cast< TrafficAction_FollowPathAction* >(object);
  (void)_this;
}
void TrafficAction_FollowPathAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficAction_FollowPathAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficAction_FollowPathAction::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficAction.FollowPathAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_point_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(action_header_ != nullptr);
    action_header_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&constrain_orientation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&following_mode_) -
        reinterpret_cast<char*>(&constrain_orientation_)) + sizeof(following_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficAction_FollowPathAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.TrafficAction.ActionHeader action_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.StatePoint path_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool constrain_orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_constrain_orientation(&has_bits);
          constrain_orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficAction.FollowingMode following_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::TrafficAction_FollowingMode_IsValid(val))) {
            _internal_set_following_mode(static_cast<::osi3::TrafficAction_FollowingMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficAction_FollowPathAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficAction.FollowPathAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.TrafficAction.ActionHeader action_header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::action_header(this), target, stream);
  }

  // repeated .osi3.StatePoint path_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_path_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_path_point(i), target, stream);
  }

  // optional bool constrain_orientation = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_constrain_orientation(), target);
  }

  // optional .osi3.TrafficAction.FollowingMode following_mode = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_following_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficAction.FollowPathAction)
  return target;
}

size_t TrafficAction_FollowPathAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficAction.FollowPathAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.StatePoint path_point = 2;
  total_size += 1UL * this->_internal_path_point_size();
  for (const auto& msg : this->path_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .osi3.TrafficAction.ActionHeader action_header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_header_);
    }

    // optional bool constrain_orientation = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional .osi3.TrafficAction.FollowingMode following_mode = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_following_mode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficAction_FollowPathAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficAction_FollowPathAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficAction_FollowPathAction::GetClassData() const { return &_class_data_; }

void TrafficAction_FollowPathAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficAction_FollowPathAction *>(to)->MergeFrom(
      static_cast<const TrafficAction_FollowPathAction &>(from));
}


void TrafficAction_FollowPathAction::MergeFrom(const TrafficAction_FollowPathAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficAction.FollowPathAction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_point_.MergeFrom(from.path_point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_action_header()->::osi3::TrafficAction_ActionHeader::MergeFrom(from._internal_action_header());
    }
    if (cached_has_bits & 0x00000002u) {
      constrain_orientation_ = from.constrain_orientation_;
    }
    if (cached_has_bits & 0x00000004u) {
      following_mode_ = from.following_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficAction_FollowPathAction::CopyFrom(const TrafficAction_FollowPathAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficAction.FollowPathAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficAction_FollowPathAction::IsInitialized() const {
  return true;
}

void TrafficAction_FollowPathAction::InternalSwap(TrafficAction_FollowPathAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  path_point_.InternalSwap(&other->path_point_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficAction_FollowPathAction, following_mode_)
      + sizeof(TrafficAction_FollowPathAction::following_mode_)
      - PROTOBUF_FIELD_OFFSET(TrafficAction_FollowPathAction, action_header_)>(
          reinterpret_cast<char*>(&action_header_),
          reinterpret_cast<char*>(&other->action_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficAction_FollowPathAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5ftrafficcommand_2eproto_getter, &descriptor_table_osi_5ftrafficcommand_2eproto_once,
      file_level_metadata_osi_5ftrafficcommand_2eproto[4]);
}

// ===================================================================

class TrafficAction_AcquireGlobalPositionAction::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficAction_AcquireGlobalPositionAction>()._has_bits_);
  static const ::osi3::TrafficAction_ActionHeader& action_header(const TrafficAction_AcquireGlobalPositionAction* msg);
  static void set_has_action_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::Vector3d& position(const TrafficAction_AcquireGlobalPositionAction* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::Orientation3d& orientation(const TrafficAction_AcquireGlobalPositionAction* msg);
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::osi3::TrafficAction_ActionHeader&
TrafficAction_AcquireGlobalPositionAction::_Internal::action_header(const TrafficAction_AcquireGlobalPositionAction* msg) {
  return *msg->action_header_;
}
const ::osi3::Vector3d&
TrafficAction_AcquireGlobalPositionAction::_Internal::position(const TrafficAction_AcquireGlobalPositionAction* msg) {
  return *msg->position_;
}
const ::osi3::Orientation3d&
TrafficAction_AcquireGlobalPositionAction::_Internal::orientation(const TrafficAction_AcquireGlobalPositionAction* msg) {
  return *msg->orientation_;
}
void TrafficAction_AcquireGlobalPositionAction::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void TrafficAction_AcquireGlobalPositionAction::clear_orientation() {
  if (orientation_ != nullptr) orientation_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
TrafficAction_AcquireGlobalPositionAction::TrafficAction_AcquireGlobalPositionAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficAction.AcquireGlobalPositionAction)
}
TrafficAction_AcquireGlobalPositionAction::TrafficAction_AcquireGlobalPositionAction(const TrafficAction_AcquireGlobalPositionAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_header()) {
    action_header_ = new ::osi3::TrafficAction_ActionHeader(*from.action_header_);
  } else {
    action_header_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::osi3::Vector3d(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::osi3::Orientation3d(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficAction.AcquireGlobalPositionAction)
}

void TrafficAction_AcquireGlobalPositionAction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&orientation_) -
    reinterpret_cast<char*>(&action_header_)) + sizeof(orientation_));
}

TrafficAction_AcquireGlobalPositionAction::~TrafficAction_AcquireGlobalPositionAction() {
  // @@protoc_insertion_point(destructor:osi3.TrafficAction.AcquireGlobalPositionAction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficAction_AcquireGlobalPositionAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_header_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
}

void TrafficAction_AcquireGlobalPositionAction::ArenaDtor(void* object) {
  TrafficAction_AcquireGlobalPositionAction* _this = reinterpret_cast< TrafficAction_AcquireGlobalPositionAction* >(object);
  (void)_this;
}
void TrafficAction_AcquireGlobalPositionAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficAction_AcquireGlobalPositionAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficAction_AcquireGlobalPositionAction::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficAction.AcquireGlobalPositionAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(action_header_ != nullptr);
      action_header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(orientation_ != nullptr);
      orientation_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficAction_AcquireGlobalPositionAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.TrafficAction.ActionHeader action_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Vector3d position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Orientation3d orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficAction_AcquireGlobalPositionAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficAction.AcquireGlobalPositionAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.TrafficAction.ActionHeader action_header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::action_header(this), target, stream);
  }

  // optional .osi3.Vector3d position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // optional .osi3.Orientation3d orientation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::orientation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficAction.AcquireGlobalPositionAction)
  return target;
}

size_t TrafficAction_AcquireGlobalPositionAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficAction.AcquireGlobalPositionAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .osi3.TrafficAction.ActionHeader action_header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_header_);
    }

    // optional .osi3.Vector3d position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .osi3.Orientation3d orientation = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *orientation_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficAction_AcquireGlobalPositionAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficAction_AcquireGlobalPositionAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficAction_AcquireGlobalPositionAction::GetClassData() const { return &_class_data_; }

void TrafficAction_AcquireGlobalPositionAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficAction_AcquireGlobalPositionAction *>(to)->MergeFrom(
      static_cast<const TrafficAction_AcquireGlobalPositionAction &>(from));
}


void TrafficAction_AcquireGlobalPositionAction::MergeFrom(const TrafficAction_AcquireGlobalPositionAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficAction.AcquireGlobalPositionAction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_action_header()->::osi3::TrafficAction_ActionHeader::MergeFrom(from._internal_action_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_position()->::osi3::Vector3d::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_orientation()->::osi3::Orientation3d::MergeFrom(from._internal_orientation());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficAction_AcquireGlobalPositionAction::CopyFrom(const TrafficAction_AcquireGlobalPositionAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficAction.AcquireGlobalPositionAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficAction_AcquireGlobalPositionAction::IsInitialized() const {
  return true;
}

void TrafficAction_AcquireGlobalPositionAction::InternalSwap(TrafficAction_AcquireGlobalPositionAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficAction_AcquireGlobalPositionAction, orientation_)
      + sizeof(TrafficAction_AcquireGlobalPositionAction::orientation_)
      - PROTOBUF_FIELD_OFFSET(TrafficAction_AcquireGlobalPositionAction, action_header_)>(
          reinterpret_cast<char*>(&action_header_),
          reinterpret_cast<char*>(&other->action_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficAction_AcquireGlobalPositionAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5ftrafficcommand_2eproto_getter, &descriptor_table_osi_5ftrafficcommand_2eproto_once,
      file_level_metadata_osi_5ftrafficcommand_2eproto[5]);
}

// ===================================================================

class TrafficAction_LaneChangeAction::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficAction_LaneChangeAction>()._has_bits_);
  static const ::osi3::TrafficAction_ActionHeader& action_header(const TrafficAction_LaneChangeAction* msg);
  static void set_has_action_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_relative_target_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dynamics_shape(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::osi3::TrafficAction_ActionHeader&
TrafficAction_LaneChangeAction::_Internal::action_header(const TrafficAction_LaneChangeAction* msg) {
  return *msg->action_header_;
}
TrafficAction_LaneChangeAction::TrafficAction_LaneChangeAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficAction.LaneChangeAction)
}
TrafficAction_LaneChangeAction::TrafficAction_LaneChangeAction(const TrafficAction_LaneChangeAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_header()) {
    action_header_ = new ::osi3::TrafficAction_ActionHeader(*from.action_header_);
  } else {
    action_header_ = nullptr;
  }
  ::memcpy(&relative_target_lane_, &from.relative_target_lane_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&relative_target_lane_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficAction.LaneChangeAction)
}

void TrafficAction_LaneChangeAction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&action_header_)) + sizeof(distance_));
}

TrafficAction_LaneChangeAction::~TrafficAction_LaneChangeAction() {
  // @@protoc_insertion_point(destructor:osi3.TrafficAction.LaneChangeAction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficAction_LaneChangeAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_header_;
}

void TrafficAction_LaneChangeAction::ArenaDtor(void* object) {
  TrafficAction_LaneChangeAction* _this = reinterpret_cast< TrafficAction_LaneChangeAction* >(object);
  (void)_this;
}
void TrafficAction_LaneChangeAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficAction_LaneChangeAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficAction_LaneChangeAction::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficAction.LaneChangeAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(action_header_ != nullptr);
    action_header_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&relative_target_lane_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&distance_) -
        reinterpret_cast<char*>(&relative_target_lane_)) + sizeof(distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficAction_LaneChangeAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.TrafficAction.ActionHeader action_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 relative_target_lane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_relative_target_lane(&has_bits);
          relative_target_lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficAction.DynamicsShape dynamics_shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::TrafficAction_DynamicsShape_IsValid(val))) {
            _internal_set_dynamics_shape(static_cast<::osi3::TrafficAction_DynamicsShape>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double distance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficAction_LaneChangeAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficAction.LaneChangeAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.TrafficAction.ActionHeader action_header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::action_header(this), target, stream);
  }

  // optional int32 relative_target_lane = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_relative_target_lane(), target);
  }

  // optional .osi3.TrafficAction.DynamicsShape dynamics_shape = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_dynamics_shape(), target);
  }

  // optional double duration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_duration(), target);
  }

  // optional double distance = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficAction.LaneChangeAction)
  return target;
}

size_t TrafficAction_LaneChangeAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficAction.LaneChangeAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .osi3.TrafficAction.ActionHeader action_header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_header_);
    }

    // optional int32 relative_target_lane = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_relative_target_lane());
    }

    // optional .osi3.TrafficAction.DynamicsShape dynamics_shape = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dynamics_shape());
    }

    // optional double duration = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double distance = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficAction_LaneChangeAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficAction_LaneChangeAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficAction_LaneChangeAction::GetClassData() const { return &_class_data_; }

void TrafficAction_LaneChangeAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficAction_LaneChangeAction *>(to)->MergeFrom(
      static_cast<const TrafficAction_LaneChangeAction &>(from));
}


void TrafficAction_LaneChangeAction::MergeFrom(const TrafficAction_LaneChangeAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficAction.LaneChangeAction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_action_header()->::osi3::TrafficAction_ActionHeader::MergeFrom(from._internal_action_header());
    }
    if (cached_has_bits & 0x00000002u) {
      relative_target_lane_ = from.relative_target_lane_;
    }
    if (cached_has_bits & 0x00000004u) {
      dynamics_shape_ = from.dynamics_shape_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000010u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficAction_LaneChangeAction::CopyFrom(const TrafficAction_LaneChangeAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficAction.LaneChangeAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficAction_LaneChangeAction::IsInitialized() const {
  return true;
}

void TrafficAction_LaneChangeAction::InternalSwap(TrafficAction_LaneChangeAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficAction_LaneChangeAction, distance_)
      + sizeof(TrafficAction_LaneChangeAction::distance_)
      - PROTOBUF_FIELD_OFFSET(TrafficAction_LaneChangeAction, action_header_)>(
          reinterpret_cast<char*>(&action_header_),
          reinterpret_cast<char*>(&other->action_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficAction_LaneChangeAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5ftrafficcommand_2eproto_getter, &descriptor_table_osi_5ftrafficcommand_2eproto_once,
      file_level_metadata_osi_5ftrafficcommand_2eproto[6]);
}

// ===================================================================

class TrafficAction_SpeedAction::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficAction_SpeedAction>()._has_bits_);
  static const ::osi3::TrafficAction_ActionHeader& action_header(const TrafficAction_SpeedAction* msg);
  static void set_has_action_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_absolute_target_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dynamics_shape(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::osi3::TrafficAction_ActionHeader&
TrafficAction_SpeedAction::_Internal::action_header(const TrafficAction_SpeedAction* msg) {
  return *msg->action_header_;
}
TrafficAction_SpeedAction::TrafficAction_SpeedAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficAction.SpeedAction)
}
TrafficAction_SpeedAction::TrafficAction_SpeedAction(const TrafficAction_SpeedAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_header()) {
    action_header_ = new ::osi3::TrafficAction_ActionHeader(*from.action_header_);
  } else {
    action_header_ = nullptr;
  }
  ::memcpy(&absolute_target_speed_, &from.absolute_target_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&dynamics_shape_) -
    reinterpret_cast<char*>(&absolute_target_speed_)) + sizeof(dynamics_shape_));
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficAction.SpeedAction)
}

void TrafficAction_SpeedAction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dynamics_shape_) -
    reinterpret_cast<char*>(&action_header_)) + sizeof(dynamics_shape_));
}

TrafficAction_SpeedAction::~TrafficAction_SpeedAction() {
  // @@protoc_insertion_point(destructor:osi3.TrafficAction.SpeedAction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficAction_SpeedAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_header_;
}

void TrafficAction_SpeedAction::ArenaDtor(void* object) {
  TrafficAction_SpeedAction* _this = reinterpret_cast< TrafficAction_SpeedAction* >(object);
  (void)_this;
}
void TrafficAction_SpeedAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficAction_SpeedAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficAction_SpeedAction::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficAction.SpeedAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(action_header_ != nullptr);
    action_header_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&absolute_target_speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dynamics_shape_) -
        reinterpret_cast<char*>(&absolute_target_speed_)) + sizeof(dynamics_shape_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficAction_SpeedAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.TrafficAction.ActionHeader action_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double absolute_target_speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_absolute_target_speed(&has_bits);
          absolute_target_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficAction.DynamicsShape dynamics_shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::TrafficAction_DynamicsShape_IsValid(val))) {
            _internal_set_dynamics_shape(static_cast<::osi3::TrafficAction_DynamicsShape>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double distance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficAction_SpeedAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficAction.SpeedAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.TrafficAction.ActionHeader action_header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::action_header(this), target, stream);
  }

  // optional double absolute_target_speed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_absolute_target_speed(), target);
  }

  // optional .osi3.TrafficAction.DynamicsShape dynamics_shape = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_dynamics_shape(), target);
  }

  // optional double duration = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_duration(), target);
  }

  // optional double distance = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficAction.SpeedAction)
  return target;
}

size_t TrafficAction_SpeedAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficAction.SpeedAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .osi3.TrafficAction.ActionHeader action_header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_header_);
    }

    // optional double absolute_target_speed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double duration = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double distance = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional .osi3.TrafficAction.DynamicsShape dynamics_shape = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dynamics_shape());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficAction_SpeedAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficAction_SpeedAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficAction_SpeedAction::GetClassData() const { return &_class_data_; }

void TrafficAction_SpeedAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficAction_SpeedAction *>(to)->MergeFrom(
      static_cast<const TrafficAction_SpeedAction &>(from));
}


void TrafficAction_SpeedAction::MergeFrom(const TrafficAction_SpeedAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficAction.SpeedAction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_action_header()->::osi3::TrafficAction_ActionHeader::MergeFrom(from._internal_action_header());
    }
    if (cached_has_bits & 0x00000002u) {
      absolute_target_speed_ = from.absolute_target_speed_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      dynamics_shape_ = from.dynamics_shape_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficAction_SpeedAction::CopyFrom(const TrafficAction_SpeedAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficAction.SpeedAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficAction_SpeedAction::IsInitialized() const {
  return true;
}

void TrafficAction_SpeedAction::InternalSwap(TrafficAction_SpeedAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficAction_SpeedAction, dynamics_shape_)
      + sizeof(TrafficAction_SpeedAction::dynamics_shape_)
      - PROTOBUF_FIELD_OFFSET(TrafficAction_SpeedAction, action_header_)>(
          reinterpret_cast<char*>(&action_header_),
          reinterpret_cast<char*>(&other->action_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficAction_SpeedAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5ftrafficcommand_2eproto_getter, &descriptor_table_osi_5ftrafficcommand_2eproto_once,
      file_level_metadata_osi_5ftrafficcommand_2eproto[7]);
}

// ===================================================================

class TrafficAction_AbortActionsAction::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficAction_AbortActionsAction>()._has_bits_);
  static const ::osi3::TrafficAction_ActionHeader& action_header(const TrafficAction_AbortActionsAction* msg);
  static void set_has_action_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osi3::TrafficAction_ActionHeader&
TrafficAction_AbortActionsAction::_Internal::action_header(const TrafficAction_AbortActionsAction* msg) {
  return *msg->action_header_;
}
void TrafficAction_AbortActionsAction::clear_target_action_id() {
  target_action_id_.Clear();
}
TrafficAction_AbortActionsAction::TrafficAction_AbortActionsAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  target_action_id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficAction.AbortActionsAction)
}
TrafficAction_AbortActionsAction::TrafficAction_AbortActionsAction(const TrafficAction_AbortActionsAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      target_action_id_(from.target_action_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_header()) {
    action_header_ = new ::osi3::TrafficAction_ActionHeader(*from.action_header_);
  } else {
    action_header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficAction.AbortActionsAction)
}

void TrafficAction_AbortActionsAction::SharedCtor() {
action_header_ = nullptr;
}

TrafficAction_AbortActionsAction::~TrafficAction_AbortActionsAction() {
  // @@protoc_insertion_point(destructor:osi3.TrafficAction.AbortActionsAction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficAction_AbortActionsAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_header_;
}

void TrafficAction_AbortActionsAction::ArenaDtor(void* object) {
  TrafficAction_AbortActionsAction* _this = reinterpret_cast< TrafficAction_AbortActionsAction* >(object);
  (void)_this;
}
void TrafficAction_AbortActionsAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficAction_AbortActionsAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficAction_AbortActionsAction::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficAction.AbortActionsAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_action_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(action_header_ != nullptr);
    action_header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficAction_AbortActionsAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.TrafficAction.ActionHeader action_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Identifier target_action_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_target_action_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficAction_AbortActionsAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficAction.AbortActionsAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.TrafficAction.ActionHeader action_header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::action_header(this), target, stream);
  }

  // repeated .osi3.Identifier target_action_id = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_target_action_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_target_action_id(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficAction.AbortActionsAction)
  return target;
}

size_t TrafficAction_AbortActionsAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficAction.AbortActionsAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Identifier target_action_id = 2;
  total_size += 1UL * this->_internal_target_action_id_size();
  for (const auto& msg : this->target_action_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .osi3.TrafficAction.ActionHeader action_header = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficAction_AbortActionsAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficAction_AbortActionsAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficAction_AbortActionsAction::GetClassData() const { return &_class_data_; }

void TrafficAction_AbortActionsAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficAction_AbortActionsAction *>(to)->MergeFrom(
      static_cast<const TrafficAction_AbortActionsAction &>(from));
}


void TrafficAction_AbortActionsAction::MergeFrom(const TrafficAction_AbortActionsAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficAction.AbortActionsAction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_action_id_.MergeFrom(from.target_action_id_);
  if (from._internal_has_action_header()) {
    _internal_mutable_action_header()->::osi3::TrafficAction_ActionHeader::MergeFrom(from._internal_action_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficAction_AbortActionsAction::CopyFrom(const TrafficAction_AbortActionsAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficAction.AbortActionsAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficAction_AbortActionsAction::IsInitialized() const {
  return true;
}

void TrafficAction_AbortActionsAction::InternalSwap(TrafficAction_AbortActionsAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  target_action_id_.InternalSwap(&other->target_action_id_);
  swap(action_header_, other->action_header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficAction_AbortActionsAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5ftrafficcommand_2eproto_getter, &descriptor_table_osi_5ftrafficcommand_2eproto_once,
      file_level_metadata_osi_5ftrafficcommand_2eproto[8]);
}

// ===================================================================

class TrafficAction_EndActionsAction::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficAction_EndActionsAction>()._has_bits_);
  static const ::osi3::TrafficAction_ActionHeader& action_header(const TrafficAction_EndActionsAction* msg);
  static void set_has_action_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osi3::TrafficAction_ActionHeader&
TrafficAction_EndActionsAction::_Internal::action_header(const TrafficAction_EndActionsAction* msg) {
  return *msg->action_header_;
}
void TrafficAction_EndActionsAction::clear_target_action_id() {
  target_action_id_.Clear();
}
TrafficAction_EndActionsAction::TrafficAction_EndActionsAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  target_action_id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficAction.EndActionsAction)
}
TrafficAction_EndActionsAction::TrafficAction_EndActionsAction(const TrafficAction_EndActionsAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      target_action_id_(from.target_action_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_header()) {
    action_header_ = new ::osi3::TrafficAction_ActionHeader(*from.action_header_);
  } else {
    action_header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficAction.EndActionsAction)
}

void TrafficAction_EndActionsAction::SharedCtor() {
action_header_ = nullptr;
}

TrafficAction_EndActionsAction::~TrafficAction_EndActionsAction() {
  // @@protoc_insertion_point(destructor:osi3.TrafficAction.EndActionsAction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficAction_EndActionsAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_header_;
}

void TrafficAction_EndActionsAction::ArenaDtor(void* object) {
  TrafficAction_EndActionsAction* _this = reinterpret_cast< TrafficAction_EndActionsAction* >(object);
  (void)_this;
}
void TrafficAction_EndActionsAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficAction_EndActionsAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficAction_EndActionsAction::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficAction.EndActionsAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_action_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(action_header_ != nullptr);
    action_header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficAction_EndActionsAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.TrafficAction.ActionHeader action_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Identifier target_action_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_target_action_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficAction_EndActionsAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficAction.EndActionsAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.TrafficAction.ActionHeader action_header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::action_header(this), target, stream);
  }

  // repeated .osi3.Identifier target_action_id = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_target_action_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_target_action_id(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficAction.EndActionsAction)
  return target;
}

size_t TrafficAction_EndActionsAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficAction.EndActionsAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Identifier target_action_id = 2;
  total_size += 1UL * this->_internal_target_action_id_size();
  for (const auto& msg : this->target_action_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .osi3.TrafficAction.ActionHeader action_header = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficAction_EndActionsAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficAction_EndActionsAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficAction_EndActionsAction::GetClassData() const { return &_class_data_; }

void TrafficAction_EndActionsAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficAction_EndActionsAction *>(to)->MergeFrom(
      static_cast<const TrafficAction_EndActionsAction &>(from));
}


void TrafficAction_EndActionsAction::MergeFrom(const TrafficAction_EndActionsAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficAction.EndActionsAction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_action_id_.MergeFrom(from.target_action_id_);
  if (from._internal_has_action_header()) {
    _internal_mutable_action_header()->::osi3::TrafficAction_ActionHeader::MergeFrom(from._internal_action_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficAction_EndActionsAction::CopyFrom(const TrafficAction_EndActionsAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficAction.EndActionsAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficAction_EndActionsAction::IsInitialized() const {
  return true;
}

void TrafficAction_EndActionsAction::InternalSwap(TrafficAction_EndActionsAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  target_action_id_.InternalSwap(&other->target_action_id_);
  swap(action_header_, other->action_header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficAction_EndActionsAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5ftrafficcommand_2eproto_getter, &descriptor_table_osi_5ftrafficcommand_2eproto_once,
      file_level_metadata_osi_5ftrafficcommand_2eproto[9]);
}

// ===================================================================

class TrafficAction_CustomAction::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficAction_CustomAction>()._has_bits_);
  static const ::osi3::TrafficAction_ActionHeader& action_header(const TrafficAction_CustomAction* msg);
  static void set_has_action_header(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_command_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::osi3::TrafficAction_ActionHeader&
TrafficAction_CustomAction::_Internal::action_header(const TrafficAction_CustomAction* msg) {
  return *msg->action_header_;
}
TrafficAction_CustomAction::TrafficAction_CustomAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficAction.CustomAction)
}
TrafficAction_CustomAction::TrafficAction_CustomAction(const TrafficAction_CustomAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_command()) {
    command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_command(), 
      GetArenaForAllocation());
  }
  command_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_command_type()) {
    command_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_command_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_action_header()) {
    action_header_ = new ::osi3::TrafficAction_ActionHeader(*from.action_header_);
  } else {
    action_header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficAction.CustomAction)
}

void TrafficAction_CustomAction::SharedCtor() {
command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
command_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
action_header_ = nullptr;
}

TrafficAction_CustomAction::~TrafficAction_CustomAction() {
  // @@protoc_insertion_point(destructor:osi3.TrafficAction.CustomAction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficAction_CustomAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete action_header_;
}

void TrafficAction_CustomAction::ArenaDtor(void* object) {
  TrafficAction_CustomAction* _this = reinterpret_cast< TrafficAction_CustomAction* >(object);
  (void)_this;
}
void TrafficAction_CustomAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficAction_CustomAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficAction_CustomAction::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficAction.CustomAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      command_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      command_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(action_header_ != nullptr);
      action_header_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficAction_CustomAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.TrafficAction.ActionHeader action_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "osi3.TrafficAction.CustomAction.command");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string command_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_command_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "osi3.TrafficAction.CustomAction.command_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficAction_CustomAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficAction.CustomAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.TrafficAction.ActionHeader action_header = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::action_header(this), target, stream);
  }

  // optional string command = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.TrafficAction.CustomAction.command");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_command(), target);
  }

  // optional string command_type = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_command_type().data(), static_cast<int>(this->_internal_command_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.TrafficAction.CustomAction.command_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_command_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficAction.CustomAction)
  return target;
}

size_t TrafficAction_CustomAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficAction.CustomAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string command = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_command());
    }

    // optional string command_type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_command_type());
    }

    // optional .osi3.TrafficAction.ActionHeader action_header = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_header_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficAction_CustomAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficAction_CustomAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficAction_CustomAction::GetClassData() const { return &_class_data_; }

void TrafficAction_CustomAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficAction_CustomAction *>(to)->MergeFrom(
      static_cast<const TrafficAction_CustomAction &>(from));
}


void TrafficAction_CustomAction::MergeFrom(const TrafficAction_CustomAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficAction.CustomAction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_command(from._internal_command());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_command_type(from._internal_command_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_action_header()->::osi3::TrafficAction_ActionHeader::MergeFrom(from._internal_action_header());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficAction_CustomAction::CopyFrom(const TrafficAction_CustomAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficAction.CustomAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficAction_CustomAction::IsInitialized() const {
  return true;
}

void TrafficAction_CustomAction::InternalSwap(TrafficAction_CustomAction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &command_, lhs_arena,
      &other->command_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &command_type_, lhs_arena,
      &other->command_type_, rhs_arena
  );
  swap(action_header_, other->action_header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficAction_CustomAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5ftrafficcommand_2eproto_getter, &descriptor_table_osi_5ftrafficcommand_2eproto_once,
      file_level_metadata_osi_5ftrafficcommand_2eproto[10]);
}

// ===================================================================

class TrafficAction_LongitudinalDistanceAction::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficAction_LongitudinalDistanceAction>()._has_bits_);
  static const ::osi3::TrafficAction_ActionHeader& action_header(const TrafficAction_LongitudinalDistanceAction* msg);
  static void set_has_action_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::Identifier& target_traffic_participant_id(const TrafficAction_LongitudinalDistanceAction* msg);
  static void set_has_target_traffic_participant_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_freespace(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_follow(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::osi3::TrafficAction_DynamicConstraints& dynamic_constraints(const TrafficAction_LongitudinalDistanceAction* msg);
  static void set_has_dynamic_constraints(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::osi3::TrafficAction_ActionHeader&
TrafficAction_LongitudinalDistanceAction::_Internal::action_header(const TrafficAction_LongitudinalDistanceAction* msg) {
  return *msg->action_header_;
}
const ::osi3::Identifier&
TrafficAction_LongitudinalDistanceAction::_Internal::target_traffic_participant_id(const TrafficAction_LongitudinalDistanceAction* msg) {
  return *msg->target_traffic_participant_id_;
}
const ::osi3::TrafficAction_DynamicConstraints&
TrafficAction_LongitudinalDistanceAction::_Internal::dynamic_constraints(const TrafficAction_LongitudinalDistanceAction* msg) {
  return *msg->dynamic_constraints_;
}
void TrafficAction_LongitudinalDistanceAction::clear_target_traffic_participant_id() {
  if (target_traffic_participant_id_ != nullptr) target_traffic_participant_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
TrafficAction_LongitudinalDistanceAction::TrafficAction_LongitudinalDistanceAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficAction.LongitudinalDistanceAction)
}
TrafficAction_LongitudinalDistanceAction::TrafficAction_LongitudinalDistanceAction(const TrafficAction_LongitudinalDistanceAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_header()) {
    action_header_ = new ::osi3::TrafficAction_ActionHeader(*from.action_header_);
  } else {
    action_header_ = nullptr;
  }
  if (from._internal_has_target_traffic_participant_id()) {
    target_traffic_participant_id_ = new ::osi3::Identifier(*from.target_traffic_participant_id_);
  } else {
    target_traffic_participant_id_ = nullptr;
  }
  if (from._internal_has_dynamic_constraints()) {
    dynamic_constraints_ = new ::osi3::TrafficAction_DynamicConstraints(*from.dynamic_constraints_);
  } else {
    dynamic_constraints_ = nullptr;
  }
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&follow_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(follow_));
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficAction.LongitudinalDistanceAction)
}

void TrafficAction_LongitudinalDistanceAction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&follow_) -
    reinterpret_cast<char*>(&action_header_)) + sizeof(follow_));
}

TrafficAction_LongitudinalDistanceAction::~TrafficAction_LongitudinalDistanceAction() {
  // @@protoc_insertion_point(destructor:osi3.TrafficAction.LongitudinalDistanceAction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficAction_LongitudinalDistanceAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_header_;
  if (this != internal_default_instance()) delete target_traffic_participant_id_;
  if (this != internal_default_instance()) delete dynamic_constraints_;
}

void TrafficAction_LongitudinalDistanceAction::ArenaDtor(void* object) {
  TrafficAction_LongitudinalDistanceAction* _this = reinterpret_cast< TrafficAction_LongitudinalDistanceAction* >(object);
  (void)_this;
}
void TrafficAction_LongitudinalDistanceAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficAction_LongitudinalDistanceAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficAction_LongitudinalDistanceAction::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficAction.LongitudinalDistanceAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(action_header_ != nullptr);
      action_header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(target_traffic_participant_id_ != nullptr);
      target_traffic_participant_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(dynamic_constraints_ != nullptr);
      dynamic_constraints_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&follow_) -
        reinterpret_cast<char*>(&distance_)) + sizeof(follow_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficAction_LongitudinalDistanceAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.TrafficAction.ActionHeader action_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Identifier target_traffic_participant_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_traffic_participant_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool freespace = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_freespace(&has_bits);
          freespace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool follow = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_follow(&has_bits);
          follow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficAction.DynamicConstraints dynamic_constraints = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_dynamic_constraints(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficAction_LongitudinalDistanceAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficAction.LongitudinalDistanceAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.TrafficAction.ActionHeader action_header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::action_header(this), target, stream);
  }

  // optional .osi3.Identifier target_traffic_participant_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target_traffic_participant_id(this), target, stream);
  }

  // optional double distance = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_distance(), target);
  }

  // optional bool freespace = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_freespace(), target);
  }

  // optional bool follow = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_follow(), target);
  }

  // optional .osi3.TrafficAction.DynamicConstraints dynamic_constraints = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::dynamic_constraints(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficAction.LongitudinalDistanceAction)
  return target;
}

size_t TrafficAction_LongitudinalDistanceAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficAction.LongitudinalDistanceAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .osi3.TrafficAction.ActionHeader action_header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_header_);
    }

    // optional .osi3.Identifier target_traffic_participant_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_traffic_participant_id_);
    }

    // optional .osi3.TrafficAction.DynamicConstraints dynamic_constraints = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dynamic_constraints_);
    }

    // optional double distance = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional bool freespace = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool follow = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficAction_LongitudinalDistanceAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficAction_LongitudinalDistanceAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficAction_LongitudinalDistanceAction::GetClassData() const { return &_class_data_; }

void TrafficAction_LongitudinalDistanceAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficAction_LongitudinalDistanceAction *>(to)->MergeFrom(
      static_cast<const TrafficAction_LongitudinalDistanceAction &>(from));
}


void TrafficAction_LongitudinalDistanceAction::MergeFrom(const TrafficAction_LongitudinalDistanceAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficAction.LongitudinalDistanceAction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_action_header()->::osi3::TrafficAction_ActionHeader::MergeFrom(from._internal_action_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_target_traffic_participant_id()->::osi3::Identifier::MergeFrom(from._internal_target_traffic_participant_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_dynamic_constraints()->::osi3::TrafficAction_DynamicConstraints::MergeFrom(from._internal_dynamic_constraints());
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      freespace_ = from.freespace_;
    }
    if (cached_has_bits & 0x00000020u) {
      follow_ = from.follow_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficAction_LongitudinalDistanceAction::CopyFrom(const TrafficAction_LongitudinalDistanceAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficAction.LongitudinalDistanceAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficAction_LongitudinalDistanceAction::IsInitialized() const {
  return true;
}

void TrafficAction_LongitudinalDistanceAction::InternalSwap(TrafficAction_LongitudinalDistanceAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficAction_LongitudinalDistanceAction, follow_)
      + sizeof(TrafficAction_LongitudinalDistanceAction::follow_)
      - PROTOBUF_FIELD_OFFSET(TrafficAction_LongitudinalDistanceAction, action_header_)>(
          reinterpret_cast<char*>(&action_header_),
          reinterpret_cast<char*>(&other->action_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficAction_LongitudinalDistanceAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5ftrafficcommand_2eproto_getter, &descriptor_table_osi_5ftrafficcommand_2eproto_once,
      file_level_metadata_osi_5ftrafficcommand_2eproto[11]);
}

// ===================================================================

class TrafficAction_LateralDistanceAction::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficAction_LateralDistanceAction>()._has_bits_);
  static const ::osi3::TrafficAction_ActionHeader& action_header(const TrafficAction_LateralDistanceAction* msg);
  static void set_has_action_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::Identifier& target_traffic_participant_id(const TrafficAction_LateralDistanceAction* msg);
  static void set_has_target_traffic_participant_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_freespace(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_follow(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::osi3::TrafficAction_DynamicConstraints& dynamic_constraints(const TrafficAction_LateralDistanceAction* msg);
  static void set_has_dynamic_constraints(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::osi3::TrafficAction_ActionHeader&
TrafficAction_LateralDistanceAction::_Internal::action_header(const TrafficAction_LateralDistanceAction* msg) {
  return *msg->action_header_;
}
const ::osi3::Identifier&
TrafficAction_LateralDistanceAction::_Internal::target_traffic_participant_id(const TrafficAction_LateralDistanceAction* msg) {
  return *msg->target_traffic_participant_id_;
}
const ::osi3::TrafficAction_DynamicConstraints&
TrafficAction_LateralDistanceAction::_Internal::dynamic_constraints(const TrafficAction_LateralDistanceAction* msg) {
  return *msg->dynamic_constraints_;
}
void TrafficAction_LateralDistanceAction::clear_target_traffic_participant_id() {
  if (target_traffic_participant_id_ != nullptr) target_traffic_participant_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
TrafficAction_LateralDistanceAction::TrafficAction_LateralDistanceAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficAction.LateralDistanceAction)
}
TrafficAction_LateralDistanceAction::TrafficAction_LateralDistanceAction(const TrafficAction_LateralDistanceAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_header()) {
    action_header_ = new ::osi3::TrafficAction_ActionHeader(*from.action_header_);
  } else {
    action_header_ = nullptr;
  }
  if (from._internal_has_target_traffic_participant_id()) {
    target_traffic_participant_id_ = new ::osi3::Identifier(*from.target_traffic_participant_id_);
  } else {
    target_traffic_participant_id_ = nullptr;
  }
  if (from._internal_has_dynamic_constraints()) {
    dynamic_constraints_ = new ::osi3::TrafficAction_DynamicConstraints(*from.dynamic_constraints_);
  } else {
    dynamic_constraints_ = nullptr;
  }
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&follow_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(follow_));
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficAction.LateralDistanceAction)
}

void TrafficAction_LateralDistanceAction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&follow_) -
    reinterpret_cast<char*>(&action_header_)) + sizeof(follow_));
}

TrafficAction_LateralDistanceAction::~TrafficAction_LateralDistanceAction() {
  // @@protoc_insertion_point(destructor:osi3.TrafficAction.LateralDistanceAction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficAction_LateralDistanceAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_header_;
  if (this != internal_default_instance()) delete target_traffic_participant_id_;
  if (this != internal_default_instance()) delete dynamic_constraints_;
}

void TrafficAction_LateralDistanceAction::ArenaDtor(void* object) {
  TrafficAction_LateralDistanceAction* _this = reinterpret_cast< TrafficAction_LateralDistanceAction* >(object);
  (void)_this;
}
void TrafficAction_LateralDistanceAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficAction_LateralDistanceAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficAction_LateralDistanceAction::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficAction.LateralDistanceAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(action_header_ != nullptr);
      action_header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(target_traffic_participant_id_ != nullptr);
      target_traffic_participant_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(dynamic_constraints_ != nullptr);
      dynamic_constraints_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&follow_) -
        reinterpret_cast<char*>(&distance_)) + sizeof(follow_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficAction_LateralDistanceAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.TrafficAction.ActionHeader action_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Identifier target_traffic_participant_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_traffic_participant_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool freespace = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_freespace(&has_bits);
          freespace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool follow = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_follow(&has_bits);
          follow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficAction.DynamicConstraints dynamic_constraints = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_dynamic_constraints(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficAction_LateralDistanceAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficAction.LateralDistanceAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.TrafficAction.ActionHeader action_header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::action_header(this), target, stream);
  }

  // optional .osi3.Identifier target_traffic_participant_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target_traffic_participant_id(this), target, stream);
  }

  // optional double distance = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_distance(), target);
  }

  // optional bool freespace = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_freespace(), target);
  }

  // optional bool follow = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_follow(), target);
  }

  // optional .osi3.TrafficAction.DynamicConstraints dynamic_constraints = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::dynamic_constraints(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficAction.LateralDistanceAction)
  return target;
}

size_t TrafficAction_LateralDistanceAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficAction.LateralDistanceAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .osi3.TrafficAction.ActionHeader action_header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_header_);
    }

    // optional .osi3.Identifier target_traffic_participant_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_traffic_participant_id_);
    }

    // optional .osi3.TrafficAction.DynamicConstraints dynamic_constraints = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dynamic_constraints_);
    }

    // optional double distance = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional bool freespace = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool follow = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficAction_LateralDistanceAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficAction_LateralDistanceAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficAction_LateralDistanceAction::GetClassData() const { return &_class_data_; }

void TrafficAction_LateralDistanceAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficAction_LateralDistanceAction *>(to)->MergeFrom(
      static_cast<const TrafficAction_LateralDistanceAction &>(from));
}


void TrafficAction_LateralDistanceAction::MergeFrom(const TrafficAction_LateralDistanceAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficAction.LateralDistanceAction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_action_header()->::osi3::TrafficAction_ActionHeader::MergeFrom(from._internal_action_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_target_traffic_participant_id()->::osi3::Identifier::MergeFrom(from._internal_target_traffic_participant_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_dynamic_constraints()->::osi3::TrafficAction_DynamicConstraints::MergeFrom(from._internal_dynamic_constraints());
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      freespace_ = from.freespace_;
    }
    if (cached_has_bits & 0x00000020u) {
      follow_ = from.follow_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficAction_LateralDistanceAction::CopyFrom(const TrafficAction_LateralDistanceAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficAction.LateralDistanceAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficAction_LateralDistanceAction::IsInitialized() const {
  return true;
}

void TrafficAction_LateralDistanceAction::InternalSwap(TrafficAction_LateralDistanceAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficAction_LateralDistanceAction, follow_)
      + sizeof(TrafficAction_LateralDistanceAction::follow_)
      - PROTOBUF_FIELD_OFFSET(TrafficAction_LateralDistanceAction, action_header_)>(
          reinterpret_cast<char*>(&action_header_),
          reinterpret_cast<char*>(&other->action_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficAction_LateralDistanceAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5ftrafficcommand_2eproto_getter, &descriptor_table_osi_5ftrafficcommand_2eproto_once,
      file_level_metadata_osi_5ftrafficcommand_2eproto[12]);
}

// ===================================================================

class TrafficAction_LaneOffsetAction::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficAction_LaneOffsetAction>()._has_bits_);
  static const ::osi3::TrafficAction_ActionHeader& action_header(const TrafficAction_LaneOffsetAction* msg);
  static void set_has_action_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_lane_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dynamics_shape(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::osi3::TrafficAction_ActionHeader&
TrafficAction_LaneOffsetAction::_Internal::action_header(const TrafficAction_LaneOffsetAction* msg) {
  return *msg->action_header_;
}
TrafficAction_LaneOffsetAction::TrafficAction_LaneOffsetAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficAction.LaneOffsetAction)
}
TrafficAction_LaneOffsetAction::TrafficAction_LaneOffsetAction(const TrafficAction_LaneOffsetAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_header()) {
    action_header_ = new ::osi3::TrafficAction_ActionHeader(*from.action_header_);
  } else {
    action_header_ = nullptr;
  }
  ::memcpy(&target_lane_offset_, &from.target_lane_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&dynamics_shape_) -
    reinterpret_cast<char*>(&target_lane_offset_)) + sizeof(dynamics_shape_));
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficAction.LaneOffsetAction)
}

void TrafficAction_LaneOffsetAction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dynamics_shape_) -
    reinterpret_cast<char*>(&action_header_)) + sizeof(dynamics_shape_));
}

TrafficAction_LaneOffsetAction::~TrafficAction_LaneOffsetAction() {
  // @@protoc_insertion_point(destructor:osi3.TrafficAction.LaneOffsetAction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficAction_LaneOffsetAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_header_;
}

void TrafficAction_LaneOffsetAction::ArenaDtor(void* object) {
  TrafficAction_LaneOffsetAction* _this = reinterpret_cast< TrafficAction_LaneOffsetAction* >(object);
  (void)_this;
}
void TrafficAction_LaneOffsetAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficAction_LaneOffsetAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficAction_LaneOffsetAction::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficAction.LaneOffsetAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(action_header_ != nullptr);
    action_header_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&target_lane_offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dynamics_shape_) -
        reinterpret_cast<char*>(&target_lane_offset_)) + sizeof(dynamics_shape_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficAction_LaneOffsetAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.TrafficAction.ActionHeader action_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double target_lane_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_target_lane_offset(&has_bits);
          target_lane_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficAction.DynamicsShape dynamics_shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::TrafficAction_DynamicsShape_IsValid(val))) {
            _internal_set_dynamics_shape(static_cast<::osi3::TrafficAction_DynamicsShape>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficAction_LaneOffsetAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficAction.LaneOffsetAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.TrafficAction.ActionHeader action_header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::action_header(this), target, stream);
  }

  // optional double target_lane_offset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_target_lane_offset(), target);
  }

  // optional .osi3.TrafficAction.DynamicsShape dynamics_shape = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_dynamics_shape(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficAction.LaneOffsetAction)
  return target;
}

size_t TrafficAction_LaneOffsetAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficAction.LaneOffsetAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .osi3.TrafficAction.ActionHeader action_header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_header_);
    }

    // optional double target_lane_offset = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .osi3.TrafficAction.DynamicsShape dynamics_shape = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dynamics_shape());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficAction_LaneOffsetAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficAction_LaneOffsetAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficAction_LaneOffsetAction::GetClassData() const { return &_class_data_; }

void TrafficAction_LaneOffsetAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficAction_LaneOffsetAction *>(to)->MergeFrom(
      static_cast<const TrafficAction_LaneOffsetAction &>(from));
}


void TrafficAction_LaneOffsetAction::MergeFrom(const TrafficAction_LaneOffsetAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficAction.LaneOffsetAction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_action_header()->::osi3::TrafficAction_ActionHeader::MergeFrom(from._internal_action_header());
    }
    if (cached_has_bits & 0x00000002u) {
      target_lane_offset_ = from.target_lane_offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      dynamics_shape_ = from.dynamics_shape_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficAction_LaneOffsetAction::CopyFrom(const TrafficAction_LaneOffsetAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficAction.LaneOffsetAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficAction_LaneOffsetAction::IsInitialized() const {
  return true;
}

void TrafficAction_LaneOffsetAction::InternalSwap(TrafficAction_LaneOffsetAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficAction_LaneOffsetAction, dynamics_shape_)
      + sizeof(TrafficAction_LaneOffsetAction::dynamics_shape_)
      - PROTOBUF_FIELD_OFFSET(TrafficAction_LaneOffsetAction, action_header_)>(
          reinterpret_cast<char*>(&action_header_),
          reinterpret_cast<char*>(&other->action_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficAction_LaneOffsetAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5ftrafficcommand_2eproto_getter, &descriptor_table_osi_5ftrafficcommand_2eproto_once,
      file_level_metadata_osi_5ftrafficcommand_2eproto[13]);
}

// ===================================================================

class TrafficAction_TeleportAction::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficAction_TeleportAction>()._has_bits_);
  static const ::osi3::TrafficAction_ActionHeader& action_header(const TrafficAction_TeleportAction* msg);
  static void set_has_action_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::Vector3d& position(const TrafficAction_TeleportAction* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::Orientation3d& orientation(const TrafficAction_TeleportAction* msg);
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::osi3::TrafficAction_ActionHeader&
TrafficAction_TeleportAction::_Internal::action_header(const TrafficAction_TeleportAction* msg) {
  return *msg->action_header_;
}
const ::osi3::Vector3d&
TrafficAction_TeleportAction::_Internal::position(const TrafficAction_TeleportAction* msg) {
  return *msg->position_;
}
const ::osi3::Orientation3d&
TrafficAction_TeleportAction::_Internal::orientation(const TrafficAction_TeleportAction* msg) {
  return *msg->orientation_;
}
void TrafficAction_TeleportAction::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void TrafficAction_TeleportAction::clear_orientation() {
  if (orientation_ != nullptr) orientation_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
TrafficAction_TeleportAction::TrafficAction_TeleportAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficAction.TeleportAction)
}
TrafficAction_TeleportAction::TrafficAction_TeleportAction(const TrafficAction_TeleportAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_header()) {
    action_header_ = new ::osi3::TrafficAction_ActionHeader(*from.action_header_);
  } else {
    action_header_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::osi3::Vector3d(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::osi3::Orientation3d(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficAction.TeleportAction)
}

void TrafficAction_TeleportAction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&orientation_) -
    reinterpret_cast<char*>(&action_header_)) + sizeof(orientation_));
}

TrafficAction_TeleportAction::~TrafficAction_TeleportAction() {
  // @@protoc_insertion_point(destructor:osi3.TrafficAction.TeleportAction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficAction_TeleportAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_header_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
}

void TrafficAction_TeleportAction::ArenaDtor(void* object) {
  TrafficAction_TeleportAction* _this = reinterpret_cast< TrafficAction_TeleportAction* >(object);
  (void)_this;
}
void TrafficAction_TeleportAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficAction_TeleportAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficAction_TeleportAction::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficAction.TeleportAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(action_header_ != nullptr);
      action_header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(orientation_ != nullptr);
      orientation_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficAction_TeleportAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.TrafficAction.ActionHeader action_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Vector3d position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Orientation3d orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficAction_TeleportAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficAction.TeleportAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.TrafficAction.ActionHeader action_header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::action_header(this), target, stream);
  }

  // optional .osi3.Vector3d position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // optional .osi3.Orientation3d orientation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::orientation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficAction.TeleportAction)
  return target;
}

size_t TrafficAction_TeleportAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficAction.TeleportAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .osi3.TrafficAction.ActionHeader action_header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_header_);
    }

    // optional .osi3.Vector3d position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .osi3.Orientation3d orientation = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *orientation_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficAction_TeleportAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficAction_TeleportAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficAction_TeleportAction::GetClassData() const { return &_class_data_; }

void TrafficAction_TeleportAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficAction_TeleportAction *>(to)->MergeFrom(
      static_cast<const TrafficAction_TeleportAction &>(from));
}


void TrafficAction_TeleportAction::MergeFrom(const TrafficAction_TeleportAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficAction.TeleportAction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_action_header()->::osi3::TrafficAction_ActionHeader::MergeFrom(from._internal_action_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_position()->::osi3::Vector3d::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_orientation()->::osi3::Orientation3d::MergeFrom(from._internal_orientation());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficAction_TeleportAction::CopyFrom(const TrafficAction_TeleportAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficAction.TeleportAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficAction_TeleportAction::IsInitialized() const {
  return true;
}

void TrafficAction_TeleportAction::InternalSwap(TrafficAction_TeleportAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficAction_TeleportAction, orientation_)
      + sizeof(TrafficAction_TeleportAction::orientation_)
      - PROTOBUF_FIELD_OFFSET(TrafficAction_TeleportAction, action_header_)>(
          reinterpret_cast<char*>(&action_header_),
          reinterpret_cast<char*>(&other->action_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficAction_TeleportAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5ftrafficcommand_2eproto_getter, &descriptor_table_osi_5ftrafficcommand_2eproto_once,
      file_level_metadata_osi_5ftrafficcommand_2eproto[14]);
}

// ===================================================================

class TrafficAction::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficAction>()._has_bits_);
  static const ::osi3::TrafficAction_FollowTrajectoryAction& follow_trajectory_action(const TrafficAction* msg);
  static void set_has_follow_trajectory_action(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::TrafficAction_FollowPathAction& follow_path_action(const TrafficAction* msg);
  static void set_has_follow_path_action(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::TrafficAction_AcquireGlobalPositionAction& acquire_global_position_action(const TrafficAction* msg);
  static void set_has_acquire_global_position_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::osi3::TrafficAction_LaneChangeAction& lane_change_action(const TrafficAction* msg);
  static void set_has_lane_change_action(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::osi3::TrafficAction_SpeedAction& speed_action(const TrafficAction* msg);
  static void set_has_speed_action(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::osi3::TrafficAction_AbortActionsAction& abort_actions_action(const TrafficAction* msg);
  static void set_has_abort_actions_action(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::osi3::TrafficAction_EndActionsAction& end_actions_action(const TrafficAction* msg);
  static void set_has_end_actions_action(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::osi3::TrafficAction_CustomAction& custom_action(const TrafficAction* msg);
  static void set_has_custom_action(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::osi3::TrafficAction_LongitudinalDistanceAction& longitudinal_distance_action(const TrafficAction* msg);
  static void set_has_longitudinal_distance_action(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::osi3::TrafficAction_LaneOffsetAction& lane_offset_action(const TrafficAction* msg);
  static void set_has_lane_offset_action(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::osi3::TrafficAction_LateralDistanceAction& lateral_distance_action(const TrafficAction* msg);
  static void set_has_lateral_distance_action(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::osi3::TrafficAction_TeleportAction& teleport_action(const TrafficAction* msg);
  static void set_has_teleport_action(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::osi3::TrafficAction_FollowTrajectoryAction&
TrafficAction::_Internal::follow_trajectory_action(const TrafficAction* msg) {
  return *msg->follow_trajectory_action_;
}
const ::osi3::TrafficAction_FollowPathAction&
TrafficAction::_Internal::follow_path_action(const TrafficAction* msg) {
  return *msg->follow_path_action_;
}
const ::osi3::TrafficAction_AcquireGlobalPositionAction&
TrafficAction::_Internal::acquire_global_position_action(const TrafficAction* msg) {
  return *msg->acquire_global_position_action_;
}
const ::osi3::TrafficAction_LaneChangeAction&
TrafficAction::_Internal::lane_change_action(const TrafficAction* msg) {
  return *msg->lane_change_action_;
}
const ::osi3::TrafficAction_SpeedAction&
TrafficAction::_Internal::speed_action(const TrafficAction* msg) {
  return *msg->speed_action_;
}
const ::osi3::TrafficAction_AbortActionsAction&
TrafficAction::_Internal::abort_actions_action(const TrafficAction* msg) {
  return *msg->abort_actions_action_;
}
const ::osi3::TrafficAction_EndActionsAction&
TrafficAction::_Internal::end_actions_action(const TrafficAction* msg) {
  return *msg->end_actions_action_;
}
const ::osi3::TrafficAction_CustomAction&
TrafficAction::_Internal::custom_action(const TrafficAction* msg) {
  return *msg->custom_action_;
}
const ::osi3::TrafficAction_LongitudinalDistanceAction&
TrafficAction::_Internal::longitudinal_distance_action(const TrafficAction* msg) {
  return *msg->longitudinal_distance_action_;
}
const ::osi3::TrafficAction_LaneOffsetAction&
TrafficAction::_Internal::lane_offset_action(const TrafficAction* msg) {
  return *msg->lane_offset_action_;
}
const ::osi3::TrafficAction_LateralDistanceAction&
TrafficAction::_Internal::lateral_distance_action(const TrafficAction* msg) {
  return *msg->lateral_distance_action_;
}
const ::osi3::TrafficAction_TeleportAction&
TrafficAction::_Internal::teleport_action(const TrafficAction* msg) {
  return *msg->teleport_action_;
}
TrafficAction::TrafficAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficAction)
}
TrafficAction::TrafficAction(const TrafficAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_follow_trajectory_action()) {
    follow_trajectory_action_ = new ::osi3::TrafficAction_FollowTrajectoryAction(*from.follow_trajectory_action_);
  } else {
    follow_trajectory_action_ = nullptr;
  }
  if (from._internal_has_follow_path_action()) {
    follow_path_action_ = new ::osi3::TrafficAction_FollowPathAction(*from.follow_path_action_);
  } else {
    follow_path_action_ = nullptr;
  }
  if (from._internal_has_acquire_global_position_action()) {
    acquire_global_position_action_ = new ::osi3::TrafficAction_AcquireGlobalPositionAction(*from.acquire_global_position_action_);
  } else {
    acquire_global_position_action_ = nullptr;
  }
  if (from._internal_has_lane_change_action()) {
    lane_change_action_ = new ::osi3::TrafficAction_LaneChangeAction(*from.lane_change_action_);
  } else {
    lane_change_action_ = nullptr;
  }
  if (from._internal_has_speed_action()) {
    speed_action_ = new ::osi3::TrafficAction_SpeedAction(*from.speed_action_);
  } else {
    speed_action_ = nullptr;
  }
  if (from._internal_has_abort_actions_action()) {
    abort_actions_action_ = new ::osi3::TrafficAction_AbortActionsAction(*from.abort_actions_action_);
  } else {
    abort_actions_action_ = nullptr;
  }
  if (from._internal_has_end_actions_action()) {
    end_actions_action_ = new ::osi3::TrafficAction_EndActionsAction(*from.end_actions_action_);
  } else {
    end_actions_action_ = nullptr;
  }
  if (from._internal_has_custom_action()) {
    custom_action_ = new ::osi3::TrafficAction_CustomAction(*from.custom_action_);
  } else {
    custom_action_ = nullptr;
  }
  if (from._internal_has_longitudinal_distance_action()) {
    longitudinal_distance_action_ = new ::osi3::TrafficAction_LongitudinalDistanceAction(*from.longitudinal_distance_action_);
  } else {
    longitudinal_distance_action_ = nullptr;
  }
  if (from._internal_has_lane_offset_action()) {
    lane_offset_action_ = new ::osi3::TrafficAction_LaneOffsetAction(*from.lane_offset_action_);
  } else {
    lane_offset_action_ = nullptr;
  }
  if (from._internal_has_lateral_distance_action()) {
    lateral_distance_action_ = new ::osi3::TrafficAction_LateralDistanceAction(*from.lateral_distance_action_);
  } else {
    lateral_distance_action_ = nullptr;
  }
  if (from._internal_has_teleport_action()) {
    teleport_action_ = new ::osi3::TrafficAction_TeleportAction(*from.teleport_action_);
  } else {
    teleport_action_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficAction)
}

void TrafficAction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&follow_trajectory_action_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&teleport_action_) -
    reinterpret_cast<char*>(&follow_trajectory_action_)) + sizeof(teleport_action_));
}

TrafficAction::~TrafficAction() {
  // @@protoc_insertion_point(destructor:osi3.TrafficAction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete follow_trajectory_action_;
  if (this != internal_default_instance()) delete follow_path_action_;
  if (this != internal_default_instance()) delete acquire_global_position_action_;
  if (this != internal_default_instance()) delete lane_change_action_;
  if (this != internal_default_instance()) delete speed_action_;
  if (this != internal_default_instance()) delete abort_actions_action_;
  if (this != internal_default_instance()) delete end_actions_action_;
  if (this != internal_default_instance()) delete custom_action_;
  if (this != internal_default_instance()) delete longitudinal_distance_action_;
  if (this != internal_default_instance()) delete lane_offset_action_;
  if (this != internal_default_instance()) delete lateral_distance_action_;
  if (this != internal_default_instance()) delete teleport_action_;
}

void TrafficAction::ArenaDtor(void* object) {
  TrafficAction* _this = reinterpret_cast< TrafficAction* >(object);
  (void)_this;
}
void TrafficAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficAction::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(follow_trajectory_action_ != nullptr);
      follow_trajectory_action_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(follow_path_action_ != nullptr);
      follow_path_action_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(acquire_global_position_action_ != nullptr);
      acquire_global_position_action_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(lane_change_action_ != nullptr);
      lane_change_action_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(speed_action_ != nullptr);
      speed_action_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(abort_actions_action_ != nullptr);
      abort_actions_action_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(end_actions_action_ != nullptr);
      end_actions_action_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(custom_action_ != nullptr);
      custom_action_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(longitudinal_distance_action_ != nullptr);
      longitudinal_distance_action_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(lane_offset_action_ != nullptr);
      lane_offset_action_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(lateral_distance_action_ != nullptr);
      lateral_distance_action_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(teleport_action_ != nullptr);
      teleport_action_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.TrafficAction.FollowTrajectoryAction follow_trajectory_action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_follow_trajectory_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficAction.FollowPathAction follow_path_action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_follow_path_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficAction.AcquireGlobalPositionAction acquire_global_position_action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_acquire_global_position_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficAction.LaneChangeAction lane_change_action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_change_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficAction.SpeedAction speed_action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficAction.AbortActionsAction abort_actions_action = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_abort_actions_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficAction.EndActionsAction end_actions_action = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_actions_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficAction.CustomAction custom_action = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficAction.LongitudinalDistanceAction longitudinal_distance_action = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_longitudinal_distance_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficAction.LaneOffsetAction lane_offset_action = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_offset_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficAction.LateralDistanceAction lateral_distance_action = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_lateral_distance_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficAction.TeleportAction teleport_action = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_teleport_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.TrafficAction.FollowTrajectoryAction follow_trajectory_action = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::follow_trajectory_action(this), target, stream);
  }

  // optional .osi3.TrafficAction.FollowPathAction follow_path_action = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::follow_path_action(this), target, stream);
  }

  // optional .osi3.TrafficAction.AcquireGlobalPositionAction acquire_global_position_action = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::acquire_global_position_action(this), target, stream);
  }

  // optional .osi3.TrafficAction.LaneChangeAction lane_change_action = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::lane_change_action(this), target, stream);
  }

  // optional .osi3.TrafficAction.SpeedAction speed_action = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::speed_action(this), target, stream);
  }

  // optional .osi3.TrafficAction.AbortActionsAction abort_actions_action = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::abort_actions_action(this), target, stream);
  }

  // optional .osi3.TrafficAction.EndActionsAction end_actions_action = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::end_actions_action(this), target, stream);
  }

  // optional .osi3.TrafficAction.CustomAction custom_action = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::custom_action(this), target, stream);
  }

  // optional .osi3.TrafficAction.LongitudinalDistanceAction longitudinal_distance_action = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::longitudinal_distance_action(this), target, stream);
  }

  // optional .osi3.TrafficAction.LaneOffsetAction lane_offset_action = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::lane_offset_action(this), target, stream);
  }

  // optional .osi3.TrafficAction.LateralDistanceAction lateral_distance_action = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::lateral_distance_action(this), target, stream);
  }

  // optional .osi3.TrafficAction.TeleportAction teleport_action = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::teleport_action(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficAction)
  return target;
}

size_t TrafficAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .osi3.TrafficAction.FollowTrajectoryAction follow_trajectory_action = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *follow_trajectory_action_);
    }

    // optional .osi3.TrafficAction.FollowPathAction follow_path_action = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *follow_path_action_);
    }

    // optional .osi3.TrafficAction.AcquireGlobalPositionAction acquire_global_position_action = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *acquire_global_position_action_);
    }

    // optional .osi3.TrafficAction.LaneChangeAction lane_change_action = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lane_change_action_);
    }

    // optional .osi3.TrafficAction.SpeedAction speed_action = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *speed_action_);
    }

    // optional .osi3.TrafficAction.AbortActionsAction abort_actions_action = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *abort_actions_action_);
    }

    // optional .osi3.TrafficAction.EndActionsAction end_actions_action = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *end_actions_action_);
    }

    // optional .osi3.TrafficAction.CustomAction custom_action = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *custom_action_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .osi3.TrafficAction.LongitudinalDistanceAction longitudinal_distance_action = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *longitudinal_distance_action_);
    }

    // optional .osi3.TrafficAction.LaneOffsetAction lane_offset_action = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lane_offset_action_);
    }

    // optional .osi3.TrafficAction.LateralDistanceAction lateral_distance_action = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lateral_distance_action_);
    }

    // optional .osi3.TrafficAction.TeleportAction teleport_action = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *teleport_action_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficAction::GetClassData() const { return &_class_data_; }

void TrafficAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficAction *>(to)->MergeFrom(
      static_cast<const TrafficAction &>(from));
}


void TrafficAction::MergeFrom(const TrafficAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficAction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_follow_trajectory_action()->::osi3::TrafficAction_FollowTrajectoryAction::MergeFrom(from._internal_follow_trajectory_action());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_follow_path_action()->::osi3::TrafficAction_FollowPathAction::MergeFrom(from._internal_follow_path_action());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_acquire_global_position_action()->::osi3::TrafficAction_AcquireGlobalPositionAction::MergeFrom(from._internal_acquire_global_position_action());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_lane_change_action()->::osi3::TrafficAction_LaneChangeAction::MergeFrom(from._internal_lane_change_action());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_speed_action()->::osi3::TrafficAction_SpeedAction::MergeFrom(from._internal_speed_action());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_abort_actions_action()->::osi3::TrafficAction_AbortActionsAction::MergeFrom(from._internal_abort_actions_action());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_end_actions_action()->::osi3::TrafficAction_EndActionsAction::MergeFrom(from._internal_end_actions_action());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_custom_action()->::osi3::TrafficAction_CustomAction::MergeFrom(from._internal_custom_action());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_longitudinal_distance_action()->::osi3::TrafficAction_LongitudinalDistanceAction::MergeFrom(from._internal_longitudinal_distance_action());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_lane_offset_action()->::osi3::TrafficAction_LaneOffsetAction::MergeFrom(from._internal_lane_offset_action());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_lateral_distance_action()->::osi3::TrafficAction_LateralDistanceAction::MergeFrom(from._internal_lateral_distance_action());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_teleport_action()->::osi3::TrafficAction_TeleportAction::MergeFrom(from._internal_teleport_action());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficAction::CopyFrom(const TrafficAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficAction::IsInitialized() const {
  return true;
}

void TrafficAction::InternalSwap(TrafficAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficAction, teleport_action_)
      + sizeof(TrafficAction::teleport_action_)
      - PROTOBUF_FIELD_OFFSET(TrafficAction, follow_trajectory_action_)>(
          reinterpret_cast<char*>(&follow_trajectory_action_),
          reinterpret_cast<char*>(&other->follow_trajectory_action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5ftrafficcommand_2eproto_getter, &descriptor_table_osi_5ftrafficcommand_2eproto_once,
      file_level_metadata_osi_5ftrafficcommand_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::TrafficCommand* Arena::CreateMaybeMessage< ::osi3::TrafficCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficAction_ActionHeader* Arena::CreateMaybeMessage< ::osi3::TrafficAction_ActionHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficAction_ActionHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficAction_DynamicConstraints* Arena::CreateMaybeMessage< ::osi3::TrafficAction_DynamicConstraints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficAction_DynamicConstraints >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficAction_FollowTrajectoryAction* Arena::CreateMaybeMessage< ::osi3::TrafficAction_FollowTrajectoryAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficAction_FollowTrajectoryAction >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficAction_FollowPathAction* Arena::CreateMaybeMessage< ::osi3::TrafficAction_FollowPathAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficAction_FollowPathAction >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficAction_AcquireGlobalPositionAction* Arena::CreateMaybeMessage< ::osi3::TrafficAction_AcquireGlobalPositionAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficAction_AcquireGlobalPositionAction >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficAction_LaneChangeAction* Arena::CreateMaybeMessage< ::osi3::TrafficAction_LaneChangeAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficAction_LaneChangeAction >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficAction_SpeedAction* Arena::CreateMaybeMessage< ::osi3::TrafficAction_SpeedAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficAction_SpeedAction >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficAction_AbortActionsAction* Arena::CreateMaybeMessage< ::osi3::TrafficAction_AbortActionsAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficAction_AbortActionsAction >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficAction_EndActionsAction* Arena::CreateMaybeMessage< ::osi3::TrafficAction_EndActionsAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficAction_EndActionsAction >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficAction_CustomAction* Arena::CreateMaybeMessage< ::osi3::TrafficAction_CustomAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficAction_CustomAction >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficAction_LongitudinalDistanceAction* Arena::CreateMaybeMessage< ::osi3::TrafficAction_LongitudinalDistanceAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficAction_LongitudinalDistanceAction >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficAction_LateralDistanceAction* Arena::CreateMaybeMessage< ::osi3::TrafficAction_LateralDistanceAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficAction_LateralDistanceAction >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficAction_LaneOffsetAction* Arena::CreateMaybeMessage< ::osi3::TrafficAction_LaneOffsetAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficAction_LaneOffsetAction >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficAction_TeleportAction* Arena::CreateMaybeMessage< ::osi3::TrafficAction_TeleportAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficAction_TeleportAction >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficAction* Arena::CreateMaybeMessage< ::osi3::TrafficAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficAction >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
