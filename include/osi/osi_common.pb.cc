// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_common.proto

#include "osi_common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace osi3 {
constexpr Vector3d::Vector3d(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct Vector3dDefaultTypeInternal {
  constexpr Vector3dDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vector3dDefaultTypeInternal() {}
  union {
    Vector3d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vector3dDefaultTypeInternal _Vector3d_default_instance_;
constexpr Vector2d::Vector2d(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct Vector2dDefaultTypeInternal {
  constexpr Vector2dDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vector2dDefaultTypeInternal() {}
  union {
    Vector2d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vector2dDefaultTypeInternal _Vector2d_default_instance_;
constexpr Timestamp::Timestamp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seconds_(int64_t{0})
  , nanos_(0u){}
struct TimestampDefaultTypeInternal {
  constexpr TimestampDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimestampDefaultTypeInternal() {}
  union {
    Timestamp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimestampDefaultTypeInternal _Timestamp_default_instance_;
constexpr Dimension3d::Dimension3d(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : length_(0)
  , width_(0)
  , height_(0){}
struct Dimension3dDefaultTypeInternal {
  constexpr Dimension3dDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Dimension3dDefaultTypeInternal() {}
  union {
    Dimension3d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Dimension3dDefaultTypeInternal _Dimension3d_default_instance_;
constexpr Orientation3d::Orientation3d(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roll_(0)
  , pitch_(0)
  , yaw_(0){}
struct Orientation3dDefaultTypeInternal {
  constexpr Orientation3dDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Orientation3dDefaultTypeInternal() {}
  union {
    Orientation3d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Orientation3dDefaultTypeInternal _Orientation3d_default_instance_;
constexpr Identifier::Identifier(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(uint64_t{0u}){}
struct IdentifierDefaultTypeInternal {
  constexpr IdentifierDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IdentifierDefaultTypeInternal() {}
  union {
    Identifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IdentifierDefaultTypeInternal _Identifier_default_instance_;
constexpr ExternalReference::ExternalReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifier_()
  , reference_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ExternalReferenceDefaultTypeInternal {
  constexpr ExternalReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExternalReferenceDefaultTypeInternal() {}
  union {
    ExternalReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExternalReferenceDefaultTypeInternal _ExternalReference_default_instance_;
constexpr MountingPosition::MountingPosition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , orientation_(nullptr){}
struct MountingPositionDefaultTypeInternal {
  constexpr MountingPositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MountingPositionDefaultTypeInternal() {}
  union {
    MountingPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MountingPositionDefaultTypeInternal _MountingPosition_default_instance_;
constexpr Spherical3d::Spherical3d(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : distance_(0)
  , azimuth_(0)
  , elevation_(0){}
struct Spherical3dDefaultTypeInternal {
  constexpr Spherical3dDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Spherical3dDefaultTypeInternal() {}
  union {
    Spherical3d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Spherical3dDefaultTypeInternal _Spherical3d_default_instance_;
constexpr BaseStationary::BaseStationary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : base_polygon_()
  , dimension_(nullptr)
  , position_(nullptr)
  , orientation_(nullptr){}
struct BaseStationaryDefaultTypeInternal {
  constexpr BaseStationaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BaseStationaryDefaultTypeInternal() {}
  union {
    BaseStationary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BaseStationaryDefaultTypeInternal _BaseStationary_default_instance_;
constexpr BaseMoving::BaseMoving(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : base_polygon_()
  , dimension_(nullptr)
  , position_(nullptr)
  , orientation_(nullptr)
  , velocity_(nullptr)
  , acceleration_(nullptr)
  , orientation_rate_(nullptr)
  , orientation_acceleration_(nullptr){}
struct BaseMovingDefaultTypeInternal {
  constexpr BaseMovingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BaseMovingDefaultTypeInternal() {}
  union {
    BaseMoving _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BaseMovingDefaultTypeInternal _BaseMoving_default_instance_;
constexpr StatePoint::StatePoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(nullptr)
  , position_(nullptr)
  , orientation_(nullptr){}
struct StatePointDefaultTypeInternal {
  constexpr StatePointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatePointDefaultTypeInternal() {}
  union {
    StatePoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatePointDefaultTypeInternal _StatePoint_default_instance_;
constexpr WavelengthData::WavelengthData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(0)
  , end_(0)
  , samples_number_(0){}
struct WavelengthDataDefaultTypeInternal {
  constexpr WavelengthDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WavelengthDataDefaultTypeInternal() {}
  union {
    WavelengthData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WavelengthDataDefaultTypeInternal _WavelengthData_default_instance_;
constexpr SpatialSignalStrength::SpatialSignalStrength(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : horizontal_angle_(0)
  , vertical_angle_(0)
  , signal_strength_(0){}
struct SpatialSignalStrengthDefaultTypeInternal {
  constexpr SpatialSignalStrengthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpatialSignalStrengthDefaultTypeInternal() {}
  union {
    SpatialSignalStrength _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpatialSignalStrengthDefaultTypeInternal _SpatialSignalStrength_default_instance_;
constexpr ColorDescription::ColorDescription(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : grey_(nullptr)
  , rgb_(nullptr)
  , rgbir_(nullptr)
  , hsv_(nullptr)
  , luv_(nullptr)
  , cmyk_(nullptr){}
struct ColorDescriptionDefaultTypeInternal {
  constexpr ColorDescriptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColorDescriptionDefaultTypeInternal() {}
  union {
    ColorDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColorDescriptionDefaultTypeInternal _ColorDescription_default_instance_;
constexpr ColorGrey::ColorGrey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : grey_(0){}
struct ColorGreyDefaultTypeInternal {
  constexpr ColorGreyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColorGreyDefaultTypeInternal() {}
  union {
    ColorGrey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColorGreyDefaultTypeInternal _ColorGrey_default_instance_;
constexpr ColorRGB::ColorRGB(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : red_(0)
  , green_(0)
  , blue_(0){}
struct ColorRGBDefaultTypeInternal {
  constexpr ColorRGBDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColorRGBDefaultTypeInternal() {}
  union {
    ColorRGB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColorRGBDefaultTypeInternal _ColorRGB_default_instance_;
constexpr ColorRGBIR::ColorRGBIR(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : red_(0)
  , green_(0)
  , blue_(0)
  , infrared_(0){}
struct ColorRGBIRDefaultTypeInternal {
  constexpr ColorRGBIRDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColorRGBIRDefaultTypeInternal() {}
  union {
    ColorRGBIR _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColorRGBIRDefaultTypeInternal _ColorRGBIR_default_instance_;
constexpr ColorHSV::ColorHSV(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hue_(0)
  , saturation_(0)
  , value_(0){}
struct ColorHSVDefaultTypeInternal {
  constexpr ColorHSVDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColorHSVDefaultTypeInternal() {}
  union {
    ColorHSV _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColorHSVDefaultTypeInternal _ColorHSV_default_instance_;
constexpr ColorLUV::ColorLUV(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : luminance_(0)
  , u_(0)
  , v_(0){}
struct ColorLUVDefaultTypeInternal {
  constexpr ColorLUVDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColorLUVDefaultTypeInternal() {}
  union {
    ColorLUV _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColorLUVDefaultTypeInternal _ColorLUV_default_instance_;
constexpr ColorCMYK::ColorCMYK(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cyan_(0)
  , magenta_(0)
  , yellow_(0)
  , key_(0){}
struct ColorCMYKDefaultTypeInternal {
  constexpr ColorCMYKDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColorCMYKDefaultTypeInternal() {}
  union {
    ColorCMYK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColorCMYKDefaultTypeInternal _ColorCMYK_default_instance_;
constexpr Pedalry::Pedalry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pedal_position_acceleration_(0)
  , pedal_position_brake_(0)
  , pedal_position_clutch_(0){}
struct PedalryDefaultTypeInternal {
  constexpr PedalryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PedalryDefaultTypeInternal() {}
  union {
    Pedalry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PedalryDefaultTypeInternal _Pedalry_default_instance_;
constexpr VehicleSteeringWheel::VehicleSteeringWheel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : angle_(0)
  , angular_speed_(0)
  , torque_(0){}
struct VehicleSteeringWheelDefaultTypeInternal {
  constexpr VehicleSteeringWheelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VehicleSteeringWheelDefaultTypeInternal() {}
  union {
    VehicleSteeringWheel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VehicleSteeringWheelDefaultTypeInternal _VehicleSteeringWheel_default_instance_;
constexpr GeodeticPosition::GeodeticPosition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : longitude_(0)
  , latitude_(0)
  , altitude_(0){}
struct GeodeticPositionDefaultTypeInternal {
  constexpr GeodeticPositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GeodeticPositionDefaultTypeInternal() {}
  union {
    GeodeticPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GeodeticPositionDefaultTypeInternal _GeodeticPosition_default_instance_;
}  // namespace osi3
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5fcommon_2eproto[24];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_osi_5fcommon_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5fcommon_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::osi3::Vector3d, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::Vector3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::Vector3d, x_),
  PROTOBUF_FIELD_OFFSET(::osi3::Vector3d, y_),
  PROTOBUF_FIELD_OFFSET(::osi3::Vector3d, z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::osi3::Vector2d, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::Vector2d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::Vector2d, x_),
  PROTOBUF_FIELD_OFFSET(::osi3::Vector2d, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::osi3::Timestamp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::Timestamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::Timestamp, seconds_),
  PROTOBUF_FIELD_OFFSET(::osi3::Timestamp, nanos_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::osi3::Dimension3d, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::Dimension3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::Dimension3d, length_),
  PROTOBUF_FIELD_OFFSET(::osi3::Dimension3d, width_),
  PROTOBUF_FIELD_OFFSET(::osi3::Dimension3d, height_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::osi3::Orientation3d, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::Orientation3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::Orientation3d, roll_),
  PROTOBUF_FIELD_OFFSET(::osi3::Orientation3d, pitch_),
  PROTOBUF_FIELD_OFFSET(::osi3::Orientation3d, yaw_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::osi3::Identifier, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::Identifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::Identifier, value_),
  0,
  PROTOBUF_FIELD_OFFSET(::osi3::ExternalReference, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::ExternalReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::ExternalReference, reference_),
  PROTOBUF_FIELD_OFFSET(::osi3::ExternalReference, type_),
  PROTOBUF_FIELD_OFFSET(::osi3::ExternalReference, identifier_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::MountingPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::MountingPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::MountingPosition, position_),
  PROTOBUF_FIELD_OFFSET(::osi3::MountingPosition, orientation_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::osi3::Spherical3d, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::Spherical3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::Spherical3d, distance_),
  PROTOBUF_FIELD_OFFSET(::osi3::Spherical3d, azimuth_),
  PROTOBUF_FIELD_OFFSET(::osi3::Spherical3d, elevation_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::osi3::BaseStationary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::BaseStationary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::BaseStationary, dimension_),
  PROTOBUF_FIELD_OFFSET(::osi3::BaseStationary, position_),
  PROTOBUF_FIELD_OFFSET(::osi3::BaseStationary, orientation_),
  PROTOBUF_FIELD_OFFSET(::osi3::BaseStationary, base_polygon_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::BaseMoving, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::BaseMoving, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::BaseMoving, dimension_),
  PROTOBUF_FIELD_OFFSET(::osi3::BaseMoving, position_),
  PROTOBUF_FIELD_OFFSET(::osi3::BaseMoving, orientation_),
  PROTOBUF_FIELD_OFFSET(::osi3::BaseMoving, velocity_),
  PROTOBUF_FIELD_OFFSET(::osi3::BaseMoving, acceleration_),
  PROTOBUF_FIELD_OFFSET(::osi3::BaseMoving, orientation_rate_),
  PROTOBUF_FIELD_OFFSET(::osi3::BaseMoving, orientation_acceleration_),
  PROTOBUF_FIELD_OFFSET(::osi3::BaseMoving, base_polygon_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::StatePoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::StatePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::StatePoint, timestamp_),
  PROTOBUF_FIELD_OFFSET(::osi3::StatePoint, position_),
  PROTOBUF_FIELD_OFFSET(::osi3::StatePoint, orientation_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::osi3::WavelengthData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::WavelengthData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::WavelengthData, start_),
  PROTOBUF_FIELD_OFFSET(::osi3::WavelengthData, end_),
  PROTOBUF_FIELD_OFFSET(::osi3::WavelengthData, samples_number_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::osi3::SpatialSignalStrength, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::SpatialSignalStrength, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::SpatialSignalStrength, horizontal_angle_),
  PROTOBUF_FIELD_OFFSET(::osi3::SpatialSignalStrength, vertical_angle_),
  PROTOBUF_FIELD_OFFSET(::osi3::SpatialSignalStrength, signal_strength_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::osi3::ColorDescription, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::ColorDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::ColorDescription, grey_),
  PROTOBUF_FIELD_OFFSET(::osi3::ColorDescription, rgb_),
  PROTOBUF_FIELD_OFFSET(::osi3::ColorDescription, rgbir_),
  PROTOBUF_FIELD_OFFSET(::osi3::ColorDescription, hsv_),
  PROTOBUF_FIELD_OFFSET(::osi3::ColorDescription, luv_),
  PROTOBUF_FIELD_OFFSET(::osi3::ColorDescription, cmyk_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::osi3::ColorGrey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::ColorGrey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::ColorGrey, grey_),
  0,
  PROTOBUF_FIELD_OFFSET(::osi3::ColorRGB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::ColorRGB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::ColorRGB, red_),
  PROTOBUF_FIELD_OFFSET(::osi3::ColorRGB, green_),
  PROTOBUF_FIELD_OFFSET(::osi3::ColorRGB, blue_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::osi3::ColorRGBIR, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::ColorRGBIR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::ColorRGBIR, red_),
  PROTOBUF_FIELD_OFFSET(::osi3::ColorRGBIR, green_),
  PROTOBUF_FIELD_OFFSET(::osi3::ColorRGBIR, blue_),
  PROTOBUF_FIELD_OFFSET(::osi3::ColorRGBIR, infrared_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::osi3::ColorHSV, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::ColorHSV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::ColorHSV, hue_),
  PROTOBUF_FIELD_OFFSET(::osi3::ColorHSV, saturation_),
  PROTOBUF_FIELD_OFFSET(::osi3::ColorHSV, value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::osi3::ColorLUV, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::ColorLUV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::ColorLUV, luminance_),
  PROTOBUF_FIELD_OFFSET(::osi3::ColorLUV, u_),
  PROTOBUF_FIELD_OFFSET(::osi3::ColorLUV, v_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::osi3::ColorCMYK, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::ColorCMYK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::ColorCMYK, cyan_),
  PROTOBUF_FIELD_OFFSET(::osi3::ColorCMYK, magenta_),
  PROTOBUF_FIELD_OFFSET(::osi3::ColorCMYK, yellow_),
  PROTOBUF_FIELD_OFFSET(::osi3::ColorCMYK, key_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::osi3::Pedalry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::Pedalry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::Pedalry, pedal_position_acceleration_),
  PROTOBUF_FIELD_OFFSET(::osi3::Pedalry, pedal_position_brake_),
  PROTOBUF_FIELD_OFFSET(::osi3::Pedalry, pedal_position_clutch_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::osi3::VehicleSteeringWheel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::VehicleSteeringWheel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::VehicleSteeringWheel, angle_),
  PROTOBUF_FIELD_OFFSET(::osi3::VehicleSteeringWheel, angular_speed_),
  PROTOBUF_FIELD_OFFSET(::osi3::VehicleSteeringWheel, torque_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::osi3::GeodeticPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::GeodeticPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::GeodeticPosition, longitude_),
  PROTOBUF_FIELD_OFFSET(::osi3::GeodeticPosition, latitude_),
  PROTOBUF_FIELD_OFFSET(::osi3::GeodeticPosition, altitude_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::osi3::Vector3d)},
  { 12, 20, -1, sizeof(::osi3::Vector2d)},
  { 22, 30, -1, sizeof(::osi3::Timestamp)},
  { 32, 41, -1, sizeof(::osi3::Dimension3d)},
  { 44, 53, -1, sizeof(::osi3::Orientation3d)},
  { 56, 63, -1, sizeof(::osi3::Identifier)},
  { 64, 73, -1, sizeof(::osi3::ExternalReference)},
  { 76, 84, -1, sizeof(::osi3::MountingPosition)},
  { 86, 95, -1, sizeof(::osi3::Spherical3d)},
  { 98, 108, -1, sizeof(::osi3::BaseStationary)},
  { 112, 126, -1, sizeof(::osi3::BaseMoving)},
  { 134, 143, -1, sizeof(::osi3::StatePoint)},
  { 146, 155, -1, sizeof(::osi3::WavelengthData)},
  { 158, 167, -1, sizeof(::osi3::SpatialSignalStrength)},
  { 170, 182, -1, sizeof(::osi3::ColorDescription)},
  { 188, 195, -1, sizeof(::osi3::ColorGrey)},
  { 196, 205, -1, sizeof(::osi3::ColorRGB)},
  { 208, 218, -1, sizeof(::osi3::ColorRGBIR)},
  { 222, 231, -1, sizeof(::osi3::ColorHSV)},
  { 234, 243, -1, sizeof(::osi3::ColorLUV)},
  { 246, 256, -1, sizeof(::osi3::ColorCMYK)},
  { 260, 269, -1, sizeof(::osi3::Pedalry)},
  { 272, 281, -1, sizeof(::osi3::VehicleSteeringWheel)},
  { 284, 293, -1, sizeof(::osi3::GeodeticPosition)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_Vector3d_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_Vector2d_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_Timestamp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_Dimension3d_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_Orientation3d_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_Identifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_ExternalReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_MountingPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_Spherical3d_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_BaseStationary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_BaseMoving_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_StatePoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_WavelengthData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_SpatialSignalStrength_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_ColorDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_ColorGrey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_ColorRGB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_ColorRGBIR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_ColorHSV_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_ColorLUV_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_ColorCMYK_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_Pedalry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_VehicleSteeringWheel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_GeodeticPosition_default_instance_),
};

const char descriptor_table_protodef_osi_5fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020osi_common.proto\022\004osi3\"+\n\010Vector3d\022\t\n\001"
  "x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\" \n\010Vector2"
  "d\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\"+\n\tTimestamp\022\017\n\007"
  "seconds\030\001 \001(\003\022\r\n\005nanos\030\002 \001(\r\"<\n\013Dimensio"
  "n3d\022\016\n\006length\030\001 \001(\001\022\r\n\005width\030\002 \001(\001\022\016\n\006he"
  "ight\030\003 \001(\001\"9\n\rOrientation3d\022\014\n\004roll\030\001 \001("
  "\001\022\r\n\005pitch\030\002 \001(\001\022\013\n\003yaw\030\003 \001(\001\"\033\n\nIdentif"
  "ier\022\r\n\005value\030\001 \001(\004\"H\n\021ExternalReference\022"
  "\021\n\treference\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\022\n\niden"
  "tifier\030\003 \003(\t\"^\n\020MountingPosition\022 \n\010posi"
  "tion\030\001 \001(\0132\016.osi3.Vector3d\022(\n\013orientatio"
  "n\030\002 \001(\0132\023.osi3.Orientation3d\"C\n\013Spherica"
  "l3d\022\020\n\010distance\030\001 \001(\001\022\017\n\007azimuth\030\002 \001(\001\022\021"
  "\n\televation\030\003 \001(\001\"\250\001\n\016BaseStationary\022$\n\t"
  "dimension\030\001 \001(\0132\021.osi3.Dimension3d\022 \n\010po"
  "sition\030\002 \001(\0132\016.osi3.Vector3d\022(\n\013orientat"
  "ion\030\003 \001(\0132\023.osi3.Orientation3d\022$\n\014base_p"
  "olygon\030\004 \003(\0132\016.osi3.Vector2d\"\322\002\n\nBaseMov"
  "ing\022$\n\tdimension\030\001 \001(\0132\021.osi3.Dimension3"
  "d\022 \n\010position\030\002 \001(\0132\016.osi3.Vector3d\022(\n\013o"
  "rientation\030\003 \001(\0132\023.osi3.Orientation3d\022 \n"
  "\010velocity\030\004 \001(\0132\016.osi3.Vector3d\022$\n\014accel"
  "eration\030\005 \001(\0132\016.osi3.Vector3d\022-\n\020orienta"
  "tion_rate\030\006 \001(\0132\023.osi3.Orientation3d\0225\n\030"
  "orientation_acceleration\030\010 \001(\0132\023.osi3.Or"
  "ientation3d\022$\n\014base_polygon\030\007 \003(\0132\016.osi3"
  ".Vector2d\"|\n\nStatePoint\022\"\n\ttimestamp\030\001 \001"
  "(\0132\017.osi3.Timestamp\022 \n\010position\030\002 \001(\0132\016."
  "osi3.Vector3d\022(\n\013orientation\030\003 \001(\0132\023.osi"
  "3.Orientation3d\"D\n\016WavelengthData\022\r\n\005sta"
  "rt\030\001 \001(\001\022\013\n\003end\030\002 \001(\001\022\026\n\016samples_number\030"
  "\003 \001(\001\"b\n\025SpatialSignalStrength\022\030\n\020horizo"
  "ntal_angle\030\001 \001(\001\022\026\n\016vertical_angle\030\002 \001(\001"
  "\022\027\n\017signal_strength\030\003 \001(\001\"\310\001\n\020ColorDescr"
  "iption\022\035\n\004grey\030\001 \001(\0132\017.osi3.ColorGrey\022\033\n"
  "\003rgb\030\002 \001(\0132\016.osi3.ColorRGB\022\037\n\005rgbir\030\003 \001("
  "\0132\020.osi3.ColorRGBIR\022\033\n\003hsv\030\004 \001(\0132\016.osi3."
  "ColorHSV\022\033\n\003luv\030\005 \001(\0132\016.osi3.ColorLUV\022\035\n"
  "\004cmyk\030\006 \001(\0132\017.osi3.ColorCMYK\"\031\n\tColorGre"
  "y\022\014\n\004grey\030\001 \001(\001\"4\n\010ColorRGB\022\013\n\003red\030\001 \001(\001"
  "\022\r\n\005green\030\002 \001(\001\022\014\n\004blue\030\003 \001(\001\"H\n\nColorRG"
  "BIR\022\013\n\003red\030\001 \001(\001\022\r\n\005green\030\002 \001(\001\022\014\n\004blue\030"
  "\003 \001(\001\022\020\n\010infrared\030\004 \001(\001\":\n\010ColorHSV\022\013\n\003h"
  "ue\030\001 \001(\001\022\022\n\nsaturation\030\002 \001(\001\022\r\n\005value\030\003 "
  "\001(\001\"3\n\010ColorLUV\022\021\n\tluminance\030\001 \001(\001\022\t\n\001u\030"
  "\002 \001(\001\022\t\n\001v\030\003 \001(\001\"G\n\tColorCMYK\022\014\n\004cyan\030\001 "
  "\001(\001\022\017\n\007magenta\030\002 \001(\001\022\016\n\006yellow\030\003 \001(\001\022\013\n\003"
  "key\030\004 \001(\001\"k\n\007Pedalry\022#\n\033pedal_position_a"
  "cceleration\030\001 \001(\001\022\034\n\024pedal_position_brak"
  "e\030\002 \001(\001\022\035\n\025pedal_position_clutch\030\003 \001(\001\"L"
  "\n\024VehicleSteeringWheel\022\r\n\005angle\030\001 \001(\001\022\025\n"
  "\rangular_speed\030\002 \001(\001\022\016\n\006torque\030\003 \001(\001\"I\n\020"
  "GeodeticPosition\022\021\n\tlongitude\030\001 \001(\001\022\020\n\010l"
  "atitude\030\002 \001(\001\022\020\n\010altitude\030\003 \001(\001B\002H\001"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5fcommon_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fcommon_2eproto = {
  false, false, 2155, descriptor_table_protodef_osi_5fcommon_2eproto, "osi_common.proto", 
  &descriptor_table_osi_5fcommon_2eproto_once, nullptr, 0, 24,
  schemas, file_default_instances, TableStruct_osi_5fcommon_2eproto::offsets,
  file_level_metadata_osi_5fcommon_2eproto, file_level_enum_descriptors_osi_5fcommon_2eproto, file_level_service_descriptors_osi_5fcommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_osi_5fcommon_2eproto_getter() {
  return &descriptor_table_osi_5fcommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_osi_5fcommon_2eproto(&descriptor_table_osi_5fcommon_2eproto);
namespace osi3 {

// ===================================================================

class Vector3d::_Internal {
 public:
  using HasBits = decltype(std::declval<Vector3d>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Vector3d::Vector3d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.Vector3d)
}
Vector3d::Vector3d(const Vector3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:osi3.Vector3d)
}

void Vector3d::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector3d::~Vector3d() {
  // @@protoc_insertion_point(destructor:osi3.Vector3d)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vector3d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3d::ArenaDtor(void* object) {
  Vector3d* _this = reinterpret_cast< Vector3d* >(object);
  (void)_this;
}
void Vector3d::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector3d::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector3d::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.Vector3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3d::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector3d::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.Vector3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.Vector3d)
  return target;
}

size_t Vector3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.Vector3d)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector3d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vector3d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector3d::GetClassData() const { return &_class_data_; }

void Vector3d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vector3d *>(to)->MergeFrom(
      static_cast<const Vector3d &>(from));
}


void Vector3d::MergeFrom(const Vector3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.Vector3d)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3d::CopyFrom(const Vector3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.Vector3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3d::IsInitialized() const {
  return true;
}

void Vector3d::InternalSwap(Vector3d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3d, z_)
      + sizeof(Vector3d::z_)
      - PROTOBUF_FIELD_OFFSET(Vector3d, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3d::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fcommon_2eproto_getter, &descriptor_table_osi_5fcommon_2eproto_once,
      file_level_metadata_osi_5fcommon_2eproto[0]);
}

// ===================================================================

class Vector2d::_Internal {
 public:
  using HasBits = decltype(std::declval<Vector2d>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Vector2d::Vector2d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.Vector2d)
}
Vector2d::Vector2d(const Vector2d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:osi3.Vector2d)
}

void Vector2d::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vector2d::~Vector2d() {
  // @@protoc_insertion_point(destructor:osi3.Vector2d)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vector2d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector2d::ArenaDtor(void* object) {
  Vector2d* _this = reinterpret_cast< Vector2d* >(object);
  (void)_this;
}
void Vector2d::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector2d::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector2d::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.Vector2d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector2d::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector2d::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.Vector2d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.Vector2d)
  return target;
}

size_t Vector2d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.Vector2d)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector2d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vector2d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector2d::GetClassData() const { return &_class_data_; }

void Vector2d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vector2d *>(to)->MergeFrom(
      static_cast<const Vector2d &>(from));
}


void Vector2d::MergeFrom(const Vector2d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.Vector2d)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector2d::CopyFrom(const Vector2d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.Vector2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2d::IsInitialized() const {
  return true;
}

void Vector2d::InternalSwap(Vector2d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector2d, y_)
      + sizeof(Vector2d::y_)
      - PROTOBUF_FIELD_OFFSET(Vector2d, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector2d::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fcommon_2eproto_getter, &descriptor_table_osi_5fcommon_2eproto_once,
      file_level_metadata_osi_5fcommon_2eproto[1]);
}

// ===================================================================

class Timestamp::_Internal {
 public:
  using HasBits = decltype(std::declval<Timestamp>()._has_bits_);
  static void set_has_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nanos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Timestamp::Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.Timestamp)
}
Timestamp::Timestamp(const Timestamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seconds_, &from.seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&nanos_) -
    reinterpret_cast<char*>(&seconds_)) + sizeof(nanos_));
  // @@protoc_insertion_point(copy_constructor:osi3.Timestamp)
}

void Timestamp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seconds_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nanos_) -
    reinterpret_cast<char*>(&seconds_)) + sizeof(nanos_));
}

Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:osi3.Timestamp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Timestamp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Timestamp::ArenaDtor(void* object) {
  Timestamp* _this = reinterpret_cast< Timestamp* >(object);
  (void)_this;
}
void Timestamp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Timestamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.Timestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&seconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nanos_) -
        reinterpret_cast<char*>(&seconds_)) + sizeof(nanos_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Timestamp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_seconds(&has_bits);
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 nanos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nanos(&has_bits);
          nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Timestamp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.Timestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 seconds = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seconds(), target);
  }

  // optional uint32 nanos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nanos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.Timestamp)
  return target;
}

size_t Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.Timestamp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 seconds = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seconds());
    }

    // optional uint32 nanos = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_nanos());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Timestamp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Timestamp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Timestamp::GetClassData() const { return &_class_data_; }

void Timestamp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Timestamp *>(to)->MergeFrom(
      static_cast<const Timestamp &>(from));
}


void Timestamp::MergeFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      seconds_ = from.seconds_;
    }
    if (cached_has_bits & 0x00000002u) {
      nanos_ = from.nanos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Timestamp::CopyFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamp::IsInitialized() const {
  return true;
}

void Timestamp::InternalSwap(Timestamp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Timestamp, nanos_)
      + sizeof(Timestamp::nanos_)
      - PROTOBUF_FIELD_OFFSET(Timestamp, seconds_)>(
          reinterpret_cast<char*>(&seconds_),
          reinterpret_cast<char*>(&other->seconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Timestamp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fcommon_2eproto_getter, &descriptor_table_osi_5fcommon_2eproto_once,
      file_level_metadata_osi_5fcommon_2eproto[2]);
}

// ===================================================================

class Dimension3d::_Internal {
 public:
  using HasBits = decltype(std::declval<Dimension3d>()._has_bits_);
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Dimension3d::Dimension3d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.Dimension3d)
}
Dimension3d::Dimension3d(const Dimension3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&length_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:osi3.Dimension3d)
}

void Dimension3d::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&length_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&length_)) + sizeof(height_));
}

Dimension3d::~Dimension3d() {
  // @@protoc_insertion_point(destructor:osi3.Dimension3d)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Dimension3d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Dimension3d::ArenaDtor(void* object) {
  Dimension3d* _this = reinterpret_cast< Dimension3d* >(object);
  (void)_this;
}
void Dimension3d::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Dimension3d::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Dimension3d::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.Dimension3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&length_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dimension3d::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dimension3d::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.Dimension3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double length = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_length(), target);
  }

  // optional double width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_width(), target);
  }

  // optional double height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.Dimension3d)
  return target;
}

size_t Dimension3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.Dimension3d)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double length = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double width = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double height = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dimension3d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Dimension3d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dimension3d::GetClassData() const { return &_class_data_; }

void Dimension3d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Dimension3d *>(to)->MergeFrom(
      static_cast<const Dimension3d &>(from));
}


void Dimension3d::MergeFrom(const Dimension3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.Dimension3d)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dimension3d::CopyFrom(const Dimension3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.Dimension3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dimension3d::IsInitialized() const {
  return true;
}

void Dimension3d::InternalSwap(Dimension3d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Dimension3d, height_)
      + sizeof(Dimension3d::height_)
      - PROTOBUF_FIELD_OFFSET(Dimension3d, length_)>(
          reinterpret_cast<char*>(&length_),
          reinterpret_cast<char*>(&other->length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Dimension3d::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fcommon_2eproto_getter, &descriptor_table_osi_5fcommon_2eproto_once,
      file_level_metadata_osi_5fcommon_2eproto[3]);
}

// ===================================================================

class Orientation3d::_Internal {
 public:
  using HasBits = decltype(std::declval<Orientation3d>()._has_bits_);
  static void set_has_roll(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_yaw(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Orientation3d::Orientation3d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.Orientation3d)
}
Orientation3d::Orientation3d(const Orientation3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roll_, &from.roll_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&roll_)) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:osi3.Orientation3d)
}

void Orientation3d::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roll_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&roll_)) + sizeof(yaw_));
}

Orientation3d::~Orientation3d() {
  // @@protoc_insertion_point(destructor:osi3.Orientation3d)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Orientation3d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Orientation3d::ArenaDtor(void* object) {
  Orientation3d* _this = reinterpret_cast< Orientation3d* >(object);
  (void)_this;
}
void Orientation3d::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Orientation3d::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Orientation3d::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.Orientation3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&roll_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yaw_) -
        reinterpret_cast<char*>(&roll_)) + sizeof(yaw_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Orientation3d::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double roll = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_roll(&has_bits);
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double pitch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_pitch(&has_bits);
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double yaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_yaw(&has_bits);
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Orientation3d::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.Orientation3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double roll = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_roll(), target);
  }

  // optional double pitch = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_pitch(), target);
  }

  // optional double yaw = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.Orientation3d)
  return target;
}

size_t Orientation3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.Orientation3d)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double roll = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double pitch = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double yaw = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Orientation3d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Orientation3d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Orientation3d::GetClassData() const { return &_class_data_; }

void Orientation3d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Orientation3d *>(to)->MergeFrom(
      static_cast<const Orientation3d &>(from));
}


void Orientation3d::MergeFrom(const Orientation3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.Orientation3d)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      roll_ = from.roll_;
    }
    if (cached_has_bits & 0x00000002u) {
      pitch_ = from.pitch_;
    }
    if (cached_has_bits & 0x00000004u) {
      yaw_ = from.yaw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Orientation3d::CopyFrom(const Orientation3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.Orientation3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Orientation3d::IsInitialized() const {
  return true;
}

void Orientation3d::InternalSwap(Orientation3d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Orientation3d, yaw_)
      + sizeof(Orientation3d::yaw_)
      - PROTOBUF_FIELD_OFFSET(Orientation3d, roll_)>(
          reinterpret_cast<char*>(&roll_),
          reinterpret_cast<char*>(&other->roll_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Orientation3d::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fcommon_2eproto_getter, &descriptor_table_osi_5fcommon_2eproto_once,
      file_level_metadata_osi_5fcommon_2eproto[4]);
}

// ===================================================================

class Identifier::_Internal {
 public:
  using HasBits = decltype(std::declval<Identifier>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Identifier::Identifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.Identifier)
}
Identifier::Identifier(const Identifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:osi3.Identifier)
}

void Identifier::SharedCtor() {
value_ = uint64_t{0u};
}

Identifier::~Identifier() {
  // @@protoc_insertion_point(destructor:osi3.Identifier)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Identifier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Identifier::ArenaDtor(void* object) {
  Identifier* _this = reinterpret_cast< Identifier* >(object);
  (void)_this;
}
void Identifier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Identifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Identifier::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.Identifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Identifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Identifier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.Identifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.Identifier)
  return target;
}

size_t Identifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.Identifier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Identifier::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Identifier::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Identifier::GetClassData() const { return &_class_data_; }

void Identifier::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Identifier *>(to)->MergeFrom(
      static_cast<const Identifier &>(from));
}


void Identifier::MergeFrom(const Identifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.Identifier)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Identifier::CopyFrom(const Identifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.Identifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Identifier::IsInitialized() const {
  return true;
}

void Identifier::InternalSwap(Identifier* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Identifier::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fcommon_2eproto_getter, &descriptor_table_osi_5fcommon_2eproto_once,
      file_level_metadata_osi_5fcommon_2eproto[5]);
}

// ===================================================================

class ExternalReference::_Internal {
 public:
  using HasBits = decltype(std::declval<ExternalReference>()._has_bits_);
  static void set_has_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ExternalReference::ExternalReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  identifier_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.ExternalReference)
}
ExternalReference::ExternalReference(const ExternalReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      identifier_(from.identifier_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reference()) {
    reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference(), 
      GetArenaForAllocation());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:osi3.ExternalReference)
}

void ExternalReference::SharedCtor() {
reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExternalReference::~ExternalReference() {
  // @@protoc_insertion_point(destructor:osi3.ExternalReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExternalReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExternalReference::ArenaDtor(void* object) {
  ExternalReference* _this = reinterpret_cast< ExternalReference* >(object);
  (void)_this;
}
void ExternalReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExternalReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExternalReference::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.ExternalReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  identifier_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      type_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExternalReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "osi3.ExternalReference.reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "osi3.ExternalReference.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string identifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_identifier();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "osi3.ExternalReference.identifier");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExternalReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.ExternalReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string reference = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.ExternalReference.reference");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reference(), target);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.ExternalReference.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // repeated string identifier = 3;
  for (int i = 0, n = this->_internal_identifier_size(); i < n; i++) {
    const auto& s = this->_internal_identifier(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.ExternalReference.identifier");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.ExternalReference)
  return target;
}

size_t ExternalReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.ExternalReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string identifier = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(identifier_.size());
  for (int i = 0, n = identifier_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      identifier_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string reference = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reference());
    }

    // optional string type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExternalReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExternalReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExternalReference::GetClassData() const { return &_class_data_; }

void ExternalReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExternalReference *>(to)->MergeFrom(
      static_cast<const ExternalReference &>(from));
}


void ExternalReference::MergeFrom(const ExternalReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.ExternalReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  identifier_.MergeFrom(from.identifier_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_reference(from._internal_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_type(from._internal_type());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExternalReference::CopyFrom(const ExternalReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.ExternalReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalReference::IsInitialized() const {
  return true;
}

void ExternalReference::InternalSwap(ExternalReference* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  identifier_.InternalSwap(&other->identifier_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reference_, lhs_arena,
      &other->reference_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ExternalReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fcommon_2eproto_getter, &descriptor_table_osi_5fcommon_2eproto_once,
      file_level_metadata_osi_5fcommon_2eproto[6]);
}

// ===================================================================

class MountingPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<MountingPosition>()._has_bits_);
  static const ::osi3::Vector3d& position(const MountingPosition* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::Orientation3d& orientation(const MountingPosition* msg);
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::osi3::Vector3d&
MountingPosition::_Internal::position(const MountingPosition* msg) {
  return *msg->position_;
}
const ::osi3::Orientation3d&
MountingPosition::_Internal::orientation(const MountingPosition* msg) {
  return *msg->orientation_;
}
MountingPosition::MountingPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.MountingPosition)
}
MountingPosition::MountingPosition(const MountingPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::osi3::Vector3d(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::osi3::Orientation3d(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.MountingPosition)
}

void MountingPosition::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&orientation_) -
    reinterpret_cast<char*>(&position_)) + sizeof(orientation_));
}

MountingPosition::~MountingPosition() {
  // @@protoc_insertion_point(destructor:osi3.MountingPosition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MountingPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
}

void MountingPosition::ArenaDtor(void* object) {
  MountingPosition* _this = reinterpret_cast< MountingPosition* >(object);
  (void)_this;
}
void MountingPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MountingPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MountingPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.MountingPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(orientation_ != nullptr);
      orientation_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MountingPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Vector3d position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Orientation3d orientation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MountingPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.MountingPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.Vector3d position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // optional .osi3.Orientation3d orientation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::orientation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.MountingPosition)
  return target;
}

size_t MountingPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.MountingPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .osi3.Vector3d position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .osi3.Orientation3d orientation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *orientation_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MountingPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MountingPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MountingPosition::GetClassData() const { return &_class_data_; }

void MountingPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MountingPosition *>(to)->MergeFrom(
      static_cast<const MountingPosition &>(from));
}


void MountingPosition::MergeFrom(const MountingPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.MountingPosition)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::osi3::Vector3d::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_orientation()->::osi3::Orientation3d::MergeFrom(from._internal_orientation());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MountingPosition::CopyFrom(const MountingPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.MountingPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountingPosition::IsInitialized() const {
  return true;
}

void MountingPosition::InternalSwap(MountingPosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MountingPosition, orientation_)
      + sizeof(MountingPosition::orientation_)
      - PROTOBUF_FIELD_OFFSET(MountingPosition, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MountingPosition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fcommon_2eproto_getter, &descriptor_table_osi_5fcommon_2eproto_once,
      file_level_metadata_osi_5fcommon_2eproto[7]);
}

// ===================================================================

class Spherical3d::_Internal {
 public:
  using HasBits = decltype(std::declval<Spherical3d>()._has_bits_);
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_azimuth(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_elevation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Spherical3d::Spherical3d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.Spherical3d)
}
Spherical3d::Spherical3d(const Spherical3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&elevation_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(elevation_));
  // @@protoc_insertion_point(copy_constructor:osi3.Spherical3d)
}

void Spherical3d::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&distance_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&elevation_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(elevation_));
}

Spherical3d::~Spherical3d() {
  // @@protoc_insertion_point(destructor:osi3.Spherical3d)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Spherical3d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Spherical3d::ArenaDtor(void* object) {
  Spherical3d* _this = reinterpret_cast< Spherical3d* >(object);
  (void)_this;
}
void Spherical3d::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Spherical3d::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Spherical3d::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.Spherical3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&elevation_) -
        reinterpret_cast<char*>(&distance_)) + sizeof(elevation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Spherical3d::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double azimuth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_azimuth(&has_bits);
          azimuth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double elevation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_elevation(&has_bits);
          elevation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Spherical3d::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.Spherical3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double distance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_distance(), target);
  }

  // optional double azimuth = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_azimuth(), target);
  }

  // optional double elevation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_elevation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.Spherical3d)
  return target;
}

size_t Spherical3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.Spherical3d)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double distance = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double azimuth = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double elevation = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Spherical3d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Spherical3d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Spherical3d::GetClassData() const { return &_class_data_; }

void Spherical3d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Spherical3d *>(to)->MergeFrom(
      static_cast<const Spherical3d &>(from));
}


void Spherical3d::MergeFrom(const Spherical3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.Spherical3d)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      distance_ = from.distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      azimuth_ = from.azimuth_;
    }
    if (cached_has_bits & 0x00000004u) {
      elevation_ = from.elevation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Spherical3d::CopyFrom(const Spherical3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.Spherical3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Spherical3d::IsInitialized() const {
  return true;
}

void Spherical3d::InternalSwap(Spherical3d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Spherical3d, elevation_)
      + sizeof(Spherical3d::elevation_)
      - PROTOBUF_FIELD_OFFSET(Spherical3d, distance_)>(
          reinterpret_cast<char*>(&distance_),
          reinterpret_cast<char*>(&other->distance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Spherical3d::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fcommon_2eproto_getter, &descriptor_table_osi_5fcommon_2eproto_once,
      file_level_metadata_osi_5fcommon_2eproto[8]);
}

// ===================================================================

class BaseStationary::_Internal {
 public:
  using HasBits = decltype(std::declval<BaseStationary>()._has_bits_);
  static const ::osi3::Dimension3d& dimension(const BaseStationary* msg);
  static void set_has_dimension(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::Vector3d& position(const BaseStationary* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::Orientation3d& orientation(const BaseStationary* msg);
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::osi3::Dimension3d&
BaseStationary::_Internal::dimension(const BaseStationary* msg) {
  return *msg->dimension_;
}
const ::osi3::Vector3d&
BaseStationary::_Internal::position(const BaseStationary* msg) {
  return *msg->position_;
}
const ::osi3::Orientation3d&
BaseStationary::_Internal::orientation(const BaseStationary* msg) {
  return *msg->orientation_;
}
BaseStationary::BaseStationary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  base_polygon_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.BaseStationary)
}
BaseStationary::BaseStationary(const BaseStationary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      base_polygon_(from.base_polygon_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dimension()) {
    dimension_ = new ::osi3::Dimension3d(*from.dimension_);
  } else {
    dimension_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::osi3::Vector3d(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::osi3::Orientation3d(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.BaseStationary)
}

void BaseStationary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dimension_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&orientation_) -
    reinterpret_cast<char*>(&dimension_)) + sizeof(orientation_));
}

BaseStationary::~BaseStationary() {
  // @@protoc_insertion_point(destructor:osi3.BaseStationary)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BaseStationary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete dimension_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
}

void BaseStationary::ArenaDtor(void* object) {
  BaseStationary* _this = reinterpret_cast< BaseStationary* >(object);
  (void)_this;
}
void BaseStationary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BaseStationary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BaseStationary::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.BaseStationary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  base_polygon_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(dimension_ != nullptr);
      dimension_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(orientation_ != nullptr);
      orientation_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseStationary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Dimension3d dimension = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dimension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Vector3d position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Orientation3d orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Vector2d base_polygon = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_base_polygon(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseStationary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.BaseStationary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.Dimension3d dimension = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::dimension(this), target, stream);
  }

  // optional .osi3.Vector3d position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // optional .osi3.Orientation3d orientation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::orientation(this), target, stream);
  }

  // repeated .osi3.Vector2d base_polygon = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_base_polygon_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_base_polygon(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.BaseStationary)
  return target;
}

size_t BaseStationary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.BaseStationary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Vector2d base_polygon = 4;
  total_size += 1UL * this->_internal_base_polygon_size();
  for (const auto& msg : this->base_polygon_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .osi3.Dimension3d dimension = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dimension_);
    }

    // optional .osi3.Vector3d position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .osi3.Orientation3d orientation = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *orientation_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BaseStationary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BaseStationary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BaseStationary::GetClassData() const { return &_class_data_; }

void BaseStationary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BaseStationary *>(to)->MergeFrom(
      static_cast<const BaseStationary &>(from));
}


void BaseStationary::MergeFrom(const BaseStationary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.BaseStationary)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  base_polygon_.MergeFrom(from.base_polygon_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_dimension()->::osi3::Dimension3d::MergeFrom(from._internal_dimension());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_position()->::osi3::Vector3d::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_orientation()->::osi3::Orientation3d::MergeFrom(from._internal_orientation());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BaseStationary::CopyFrom(const BaseStationary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.BaseStationary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseStationary::IsInitialized() const {
  return true;
}

void BaseStationary::InternalSwap(BaseStationary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  base_polygon_.InternalSwap(&other->base_polygon_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseStationary, orientation_)
      + sizeof(BaseStationary::orientation_)
      - PROTOBUF_FIELD_OFFSET(BaseStationary, dimension_)>(
          reinterpret_cast<char*>(&dimension_),
          reinterpret_cast<char*>(&other->dimension_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseStationary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fcommon_2eproto_getter, &descriptor_table_osi_5fcommon_2eproto_once,
      file_level_metadata_osi_5fcommon_2eproto[9]);
}

// ===================================================================

class BaseMoving::_Internal {
 public:
  using HasBits = decltype(std::declval<BaseMoving>()._has_bits_);
  static const ::osi3::Dimension3d& dimension(const BaseMoving* msg);
  static void set_has_dimension(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::Vector3d& position(const BaseMoving* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::Orientation3d& orientation(const BaseMoving* msg);
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::osi3::Vector3d& velocity(const BaseMoving* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::osi3::Vector3d& acceleration(const BaseMoving* msg);
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::osi3::Orientation3d& orientation_rate(const BaseMoving* msg);
  static void set_has_orientation_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::osi3::Orientation3d& orientation_acceleration(const BaseMoving* msg);
  static void set_has_orientation_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::osi3::Dimension3d&
BaseMoving::_Internal::dimension(const BaseMoving* msg) {
  return *msg->dimension_;
}
const ::osi3::Vector3d&
BaseMoving::_Internal::position(const BaseMoving* msg) {
  return *msg->position_;
}
const ::osi3::Orientation3d&
BaseMoving::_Internal::orientation(const BaseMoving* msg) {
  return *msg->orientation_;
}
const ::osi3::Vector3d&
BaseMoving::_Internal::velocity(const BaseMoving* msg) {
  return *msg->velocity_;
}
const ::osi3::Vector3d&
BaseMoving::_Internal::acceleration(const BaseMoving* msg) {
  return *msg->acceleration_;
}
const ::osi3::Orientation3d&
BaseMoving::_Internal::orientation_rate(const BaseMoving* msg) {
  return *msg->orientation_rate_;
}
const ::osi3::Orientation3d&
BaseMoving::_Internal::orientation_acceleration(const BaseMoving* msg) {
  return *msg->orientation_acceleration_;
}
BaseMoving::BaseMoving(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  base_polygon_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.BaseMoving)
}
BaseMoving::BaseMoving(const BaseMoving& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      base_polygon_(from.base_polygon_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dimension()) {
    dimension_ = new ::osi3::Dimension3d(*from.dimension_);
  } else {
    dimension_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::osi3::Vector3d(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::osi3::Orientation3d(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::osi3::Vector3d(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  if (from._internal_has_acceleration()) {
    acceleration_ = new ::osi3::Vector3d(*from.acceleration_);
  } else {
    acceleration_ = nullptr;
  }
  if (from._internal_has_orientation_rate()) {
    orientation_rate_ = new ::osi3::Orientation3d(*from.orientation_rate_);
  } else {
    orientation_rate_ = nullptr;
  }
  if (from._internal_has_orientation_acceleration()) {
    orientation_acceleration_ = new ::osi3::Orientation3d(*from.orientation_acceleration_);
  } else {
    orientation_acceleration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.BaseMoving)
}

void BaseMoving::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dimension_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&orientation_acceleration_) -
    reinterpret_cast<char*>(&dimension_)) + sizeof(orientation_acceleration_));
}

BaseMoving::~BaseMoving() {
  // @@protoc_insertion_point(destructor:osi3.BaseMoving)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BaseMoving::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete dimension_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete acceleration_;
  if (this != internal_default_instance()) delete orientation_rate_;
  if (this != internal_default_instance()) delete orientation_acceleration_;
}

void BaseMoving::ArenaDtor(void* object) {
  BaseMoving* _this = reinterpret_cast< BaseMoving* >(object);
  (void)_this;
}
void BaseMoving::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BaseMoving::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BaseMoving::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.BaseMoving)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  base_polygon_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(dimension_ != nullptr);
      dimension_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(orientation_ != nullptr);
      orientation_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(velocity_ != nullptr);
      velocity_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(acceleration_ != nullptr);
      acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(orientation_rate_ != nullptr);
      orientation_rate_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(orientation_acceleration_ != nullptr);
      orientation_acceleration_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseMoving::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Dimension3d dimension = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dimension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Vector3d position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Orientation3d orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Vector3d velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Vector3d acceleration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Orientation3d orientation_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation_rate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Vector2d base_polygon = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_base_polygon(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Orientation3d orientation_acceleration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation_acceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseMoving::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.BaseMoving)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.Dimension3d dimension = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::dimension(this), target, stream);
  }

  // optional .osi3.Vector3d position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // optional .osi3.Orientation3d orientation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::orientation(this), target, stream);
  }

  // optional .osi3.Vector3d velocity = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::velocity(this), target, stream);
  }

  // optional .osi3.Vector3d acceleration = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::acceleration(this), target, stream);
  }

  // optional .osi3.Orientation3d orientation_rate = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::orientation_rate(this), target, stream);
  }

  // repeated .osi3.Vector2d base_polygon = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_base_polygon_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_base_polygon(i), target, stream);
  }

  // optional .osi3.Orientation3d orientation_acceleration = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::orientation_acceleration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.BaseMoving)
  return target;
}

size_t BaseMoving::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.BaseMoving)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Vector2d base_polygon = 7;
  total_size += 1UL * this->_internal_base_polygon_size();
  for (const auto& msg : this->base_polygon_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .osi3.Dimension3d dimension = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dimension_);
    }

    // optional .osi3.Vector3d position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .osi3.Orientation3d orientation = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *orientation_);
    }

    // optional .osi3.Vector3d velocity = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *velocity_);
    }

    // optional .osi3.Vector3d acceleration = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *acceleration_);
    }

    // optional .osi3.Orientation3d orientation_rate = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *orientation_rate_);
    }

    // optional .osi3.Orientation3d orientation_acceleration = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *orientation_acceleration_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BaseMoving::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BaseMoving::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BaseMoving::GetClassData() const { return &_class_data_; }

void BaseMoving::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BaseMoving *>(to)->MergeFrom(
      static_cast<const BaseMoving &>(from));
}


void BaseMoving::MergeFrom(const BaseMoving& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.BaseMoving)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  base_polygon_.MergeFrom(from.base_polygon_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_dimension()->::osi3::Dimension3d::MergeFrom(from._internal_dimension());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_position()->::osi3::Vector3d::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_orientation()->::osi3::Orientation3d::MergeFrom(from._internal_orientation());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_velocity()->::osi3::Vector3d::MergeFrom(from._internal_velocity());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_acceleration()->::osi3::Vector3d::MergeFrom(from._internal_acceleration());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_orientation_rate()->::osi3::Orientation3d::MergeFrom(from._internal_orientation_rate());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_orientation_acceleration()->::osi3::Orientation3d::MergeFrom(from._internal_orientation_acceleration());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BaseMoving::CopyFrom(const BaseMoving& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.BaseMoving)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseMoving::IsInitialized() const {
  return true;
}

void BaseMoving::InternalSwap(BaseMoving* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  base_polygon_.InternalSwap(&other->base_polygon_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseMoving, orientation_acceleration_)
      + sizeof(BaseMoving::orientation_acceleration_)
      - PROTOBUF_FIELD_OFFSET(BaseMoving, dimension_)>(
          reinterpret_cast<char*>(&dimension_),
          reinterpret_cast<char*>(&other->dimension_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseMoving::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fcommon_2eproto_getter, &descriptor_table_osi_5fcommon_2eproto_once,
      file_level_metadata_osi_5fcommon_2eproto[10]);
}

// ===================================================================

class StatePoint::_Internal {
 public:
  using HasBits = decltype(std::declval<StatePoint>()._has_bits_);
  static const ::osi3::Timestamp& timestamp(const StatePoint* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::Vector3d& position(const StatePoint* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::Orientation3d& orientation(const StatePoint* msg);
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::osi3::Timestamp&
StatePoint::_Internal::timestamp(const StatePoint* msg) {
  return *msg->timestamp_;
}
const ::osi3::Vector3d&
StatePoint::_Internal::position(const StatePoint* msg) {
  return *msg->position_;
}
const ::osi3::Orientation3d&
StatePoint::_Internal::orientation(const StatePoint* msg) {
  return *msg->orientation_;
}
StatePoint::StatePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.StatePoint)
}
StatePoint::StatePoint(const StatePoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::osi3::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::osi3::Vector3d(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::osi3::Orientation3d(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.StatePoint)
}

void StatePoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&orientation_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(orientation_));
}

StatePoint::~StatePoint() {
  // @@protoc_insertion_point(destructor:osi3.StatePoint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StatePoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
}

void StatePoint::ArenaDtor(void* object) {
  StatePoint* _this = reinterpret_cast< StatePoint* >(object);
  (void)_this;
}
void StatePoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatePoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.StatePoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(timestamp_ != nullptr);
      timestamp_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(orientation_ != nullptr);
      orientation_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatePoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Vector3d position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Orientation3d orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatePoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.StatePoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.Timestamp timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timestamp(this), target, stream);
  }

  // optional .osi3.Vector3d position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // optional .osi3.Orientation3d orientation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::orientation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.StatePoint)
  return target;
}

size_t StatePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.StatePoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .osi3.Timestamp timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *timestamp_);
    }

    // optional .osi3.Vector3d position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .osi3.Orientation3d orientation = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *orientation_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatePoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StatePoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatePoint::GetClassData() const { return &_class_data_; }

void StatePoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StatePoint *>(to)->MergeFrom(
      static_cast<const StatePoint &>(from));
}


void StatePoint::MergeFrom(const StatePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.StatePoint)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_timestamp()->::osi3::Timestamp::MergeFrom(from._internal_timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_position()->::osi3::Vector3d::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_orientation()->::osi3::Orientation3d::MergeFrom(from._internal_orientation());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatePoint::CopyFrom(const StatePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.StatePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatePoint::IsInitialized() const {
  return true;
}

void StatePoint::InternalSwap(StatePoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatePoint, orientation_)
      + sizeof(StatePoint::orientation_)
      - PROTOBUF_FIELD_OFFSET(StatePoint, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatePoint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fcommon_2eproto_getter, &descriptor_table_osi_5fcommon_2eproto_once,
      file_level_metadata_osi_5fcommon_2eproto[11]);
}

// ===================================================================

class WavelengthData::_Internal {
 public:
  using HasBits = decltype(std::declval<WavelengthData>()._has_bits_);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_samples_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

WavelengthData::WavelengthData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.WavelengthData)
}
WavelengthData::WavelengthData(const WavelengthData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&samples_number_) -
    reinterpret_cast<char*>(&start_)) + sizeof(samples_number_));
  // @@protoc_insertion_point(copy_constructor:osi3.WavelengthData)
}

void WavelengthData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&samples_number_) -
    reinterpret_cast<char*>(&start_)) + sizeof(samples_number_));
}

WavelengthData::~WavelengthData() {
  // @@protoc_insertion_point(destructor:osi3.WavelengthData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WavelengthData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WavelengthData::ArenaDtor(void* object) {
  WavelengthData* _this = reinterpret_cast< WavelengthData* >(object);
  (void)_this;
}
void WavelengthData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WavelengthData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WavelengthData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.WavelengthData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&samples_number_) -
        reinterpret_cast<char*>(&start_)) + sizeof(samples_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WavelengthData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_start(&has_bits);
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_end(&has_bits);
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double samples_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_samples_number(&has_bits);
          samples_number_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WavelengthData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.WavelengthData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_start(), target);
  }

  // optional double end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_end(), target);
  }

  // optional double samples_number = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_samples_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.WavelengthData)
  return target;
}

size_t WavelengthData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.WavelengthData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double start = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double end = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double samples_number = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WavelengthData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WavelengthData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WavelengthData::GetClassData() const { return &_class_data_; }

void WavelengthData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WavelengthData *>(to)->MergeFrom(
      static_cast<const WavelengthData &>(from));
}


void WavelengthData::MergeFrom(const WavelengthData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.WavelengthData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      start_ = from.start_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_ = from.end_;
    }
    if (cached_has_bits & 0x00000004u) {
      samples_number_ = from.samples_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WavelengthData::CopyFrom(const WavelengthData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.WavelengthData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WavelengthData::IsInitialized() const {
  return true;
}

void WavelengthData::InternalSwap(WavelengthData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WavelengthData, samples_number_)
      + sizeof(WavelengthData::samples_number_)
      - PROTOBUF_FIELD_OFFSET(WavelengthData, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WavelengthData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fcommon_2eproto_getter, &descriptor_table_osi_5fcommon_2eproto_once,
      file_level_metadata_osi_5fcommon_2eproto[12]);
}

// ===================================================================

class SpatialSignalStrength::_Internal {
 public:
  using HasBits = decltype(std::declval<SpatialSignalStrength>()._has_bits_);
  static void set_has_horizontal_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vertical_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_signal_strength(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SpatialSignalStrength::SpatialSignalStrength(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.SpatialSignalStrength)
}
SpatialSignalStrength::SpatialSignalStrength(const SpatialSignalStrength& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&horizontal_angle_, &from.horizontal_angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&signal_strength_) -
    reinterpret_cast<char*>(&horizontal_angle_)) + sizeof(signal_strength_));
  // @@protoc_insertion_point(copy_constructor:osi3.SpatialSignalStrength)
}

void SpatialSignalStrength::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&horizontal_angle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&signal_strength_) -
    reinterpret_cast<char*>(&horizontal_angle_)) + sizeof(signal_strength_));
}

SpatialSignalStrength::~SpatialSignalStrength() {
  // @@protoc_insertion_point(destructor:osi3.SpatialSignalStrength)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpatialSignalStrength::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpatialSignalStrength::ArenaDtor(void* object) {
  SpatialSignalStrength* _this = reinterpret_cast< SpatialSignalStrength* >(object);
  (void)_this;
}
void SpatialSignalStrength::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpatialSignalStrength::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpatialSignalStrength::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.SpatialSignalStrength)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&horizontal_angle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&signal_strength_) -
        reinterpret_cast<char*>(&horizontal_angle_)) + sizeof(signal_strength_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpatialSignalStrength::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double horizontal_angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_horizontal_angle(&has_bits);
          horizontal_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double vertical_angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_vertical_angle(&has_bits);
          vertical_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double signal_strength = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_signal_strength(&has_bits);
          signal_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpatialSignalStrength::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.SpatialSignalStrength)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double horizontal_angle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_horizontal_angle(), target);
  }

  // optional double vertical_angle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_vertical_angle(), target);
  }

  // optional double signal_strength = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_signal_strength(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.SpatialSignalStrength)
  return target;
}

size_t SpatialSignalStrength::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.SpatialSignalStrength)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double horizontal_angle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double vertical_angle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double signal_strength = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpatialSignalStrength::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpatialSignalStrength::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpatialSignalStrength::GetClassData() const { return &_class_data_; }

void SpatialSignalStrength::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpatialSignalStrength *>(to)->MergeFrom(
      static_cast<const SpatialSignalStrength &>(from));
}


void SpatialSignalStrength::MergeFrom(const SpatialSignalStrength& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.SpatialSignalStrength)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      horizontal_angle_ = from.horizontal_angle_;
    }
    if (cached_has_bits & 0x00000002u) {
      vertical_angle_ = from.vertical_angle_;
    }
    if (cached_has_bits & 0x00000004u) {
      signal_strength_ = from.signal_strength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpatialSignalStrength::CopyFrom(const SpatialSignalStrength& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.SpatialSignalStrength)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpatialSignalStrength::IsInitialized() const {
  return true;
}

void SpatialSignalStrength::InternalSwap(SpatialSignalStrength* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpatialSignalStrength, signal_strength_)
      + sizeof(SpatialSignalStrength::signal_strength_)
      - PROTOBUF_FIELD_OFFSET(SpatialSignalStrength, horizontal_angle_)>(
          reinterpret_cast<char*>(&horizontal_angle_),
          reinterpret_cast<char*>(&other->horizontal_angle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpatialSignalStrength::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fcommon_2eproto_getter, &descriptor_table_osi_5fcommon_2eproto_once,
      file_level_metadata_osi_5fcommon_2eproto[13]);
}

// ===================================================================

class ColorDescription::_Internal {
 public:
  using HasBits = decltype(std::declval<ColorDescription>()._has_bits_);
  static const ::osi3::ColorGrey& grey(const ColorDescription* msg);
  static void set_has_grey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::ColorRGB& rgb(const ColorDescription* msg);
  static void set_has_rgb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::ColorRGBIR& rgbir(const ColorDescription* msg);
  static void set_has_rgbir(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::osi3::ColorHSV& hsv(const ColorDescription* msg);
  static void set_has_hsv(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::osi3::ColorLUV& luv(const ColorDescription* msg);
  static void set_has_luv(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::osi3::ColorCMYK& cmyk(const ColorDescription* msg);
  static void set_has_cmyk(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::osi3::ColorGrey&
ColorDescription::_Internal::grey(const ColorDescription* msg) {
  return *msg->grey_;
}
const ::osi3::ColorRGB&
ColorDescription::_Internal::rgb(const ColorDescription* msg) {
  return *msg->rgb_;
}
const ::osi3::ColorRGBIR&
ColorDescription::_Internal::rgbir(const ColorDescription* msg) {
  return *msg->rgbir_;
}
const ::osi3::ColorHSV&
ColorDescription::_Internal::hsv(const ColorDescription* msg) {
  return *msg->hsv_;
}
const ::osi3::ColorLUV&
ColorDescription::_Internal::luv(const ColorDescription* msg) {
  return *msg->luv_;
}
const ::osi3::ColorCMYK&
ColorDescription::_Internal::cmyk(const ColorDescription* msg) {
  return *msg->cmyk_;
}
ColorDescription::ColorDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.ColorDescription)
}
ColorDescription::ColorDescription(const ColorDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_grey()) {
    grey_ = new ::osi3::ColorGrey(*from.grey_);
  } else {
    grey_ = nullptr;
  }
  if (from._internal_has_rgb()) {
    rgb_ = new ::osi3::ColorRGB(*from.rgb_);
  } else {
    rgb_ = nullptr;
  }
  if (from._internal_has_rgbir()) {
    rgbir_ = new ::osi3::ColorRGBIR(*from.rgbir_);
  } else {
    rgbir_ = nullptr;
  }
  if (from._internal_has_hsv()) {
    hsv_ = new ::osi3::ColorHSV(*from.hsv_);
  } else {
    hsv_ = nullptr;
  }
  if (from._internal_has_luv()) {
    luv_ = new ::osi3::ColorLUV(*from.luv_);
  } else {
    luv_ = nullptr;
  }
  if (from._internal_has_cmyk()) {
    cmyk_ = new ::osi3::ColorCMYK(*from.cmyk_);
  } else {
    cmyk_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.ColorDescription)
}

void ColorDescription::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&grey_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cmyk_) -
    reinterpret_cast<char*>(&grey_)) + sizeof(cmyk_));
}

ColorDescription::~ColorDescription() {
  // @@protoc_insertion_point(destructor:osi3.ColorDescription)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ColorDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete grey_;
  if (this != internal_default_instance()) delete rgb_;
  if (this != internal_default_instance()) delete rgbir_;
  if (this != internal_default_instance()) delete hsv_;
  if (this != internal_default_instance()) delete luv_;
  if (this != internal_default_instance()) delete cmyk_;
}

void ColorDescription::ArenaDtor(void* object) {
  ColorDescription* _this = reinterpret_cast< ColorDescription* >(object);
  (void)_this;
}
void ColorDescription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColorDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColorDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.ColorDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(grey_ != nullptr);
      grey_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rgb_ != nullptr);
      rgb_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(rgbir_ != nullptr);
      rgbir_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(hsv_ != nullptr);
      hsv_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(luv_ != nullptr);
      luv_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(cmyk_ != nullptr);
      cmyk_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColorDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.ColorGrey grey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_grey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.ColorRGB rgb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rgb(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.ColorRGBIR rgbir = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rgbir(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.ColorHSV hsv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_hsv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.ColorLUV luv = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_luv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.ColorCMYK cmyk = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cmyk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColorDescription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.ColorDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.ColorGrey grey = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::grey(this), target, stream);
  }

  // optional .osi3.ColorRGB rgb = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rgb(this), target, stream);
  }

  // optional .osi3.ColorRGBIR rgbir = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rgbir(this), target, stream);
  }

  // optional .osi3.ColorHSV hsv = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::hsv(this), target, stream);
  }

  // optional .osi3.ColorLUV luv = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::luv(this), target, stream);
  }

  // optional .osi3.ColorCMYK cmyk = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::cmyk(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.ColorDescription)
  return target;
}

size_t ColorDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.ColorDescription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .osi3.ColorGrey grey = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *grey_);
    }

    // optional .osi3.ColorRGB rgb = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rgb_);
    }

    // optional .osi3.ColorRGBIR rgbir = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rgbir_);
    }

    // optional .osi3.ColorHSV hsv = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hsv_);
    }

    // optional .osi3.ColorLUV luv = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *luv_);
    }

    // optional .osi3.ColorCMYK cmyk = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cmyk_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColorDescription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ColorDescription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColorDescription::GetClassData() const { return &_class_data_; }

void ColorDescription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ColorDescription *>(to)->MergeFrom(
      static_cast<const ColorDescription &>(from));
}


void ColorDescription::MergeFrom(const ColorDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.ColorDescription)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_grey()->::osi3::ColorGrey::MergeFrom(from._internal_grey());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rgb()->::osi3::ColorRGB::MergeFrom(from._internal_rgb());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_rgbir()->::osi3::ColorRGBIR::MergeFrom(from._internal_rgbir());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_hsv()->::osi3::ColorHSV::MergeFrom(from._internal_hsv());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_luv()->::osi3::ColorLUV::MergeFrom(from._internal_luv());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_cmyk()->::osi3::ColorCMYK::MergeFrom(from._internal_cmyk());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColorDescription::CopyFrom(const ColorDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.ColorDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorDescription::IsInitialized() const {
  return true;
}

void ColorDescription::InternalSwap(ColorDescription* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColorDescription, cmyk_)
      + sizeof(ColorDescription::cmyk_)
      - PROTOBUF_FIELD_OFFSET(ColorDescription, grey_)>(
          reinterpret_cast<char*>(&grey_),
          reinterpret_cast<char*>(&other->grey_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColorDescription::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fcommon_2eproto_getter, &descriptor_table_osi_5fcommon_2eproto_once,
      file_level_metadata_osi_5fcommon_2eproto[14]);
}

// ===================================================================

class ColorGrey::_Internal {
 public:
  using HasBits = decltype(std::declval<ColorGrey>()._has_bits_);
  static void set_has_grey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ColorGrey::ColorGrey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.ColorGrey)
}
ColorGrey::ColorGrey(const ColorGrey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  grey_ = from.grey_;
  // @@protoc_insertion_point(copy_constructor:osi3.ColorGrey)
}

void ColorGrey::SharedCtor() {
grey_ = 0;
}

ColorGrey::~ColorGrey() {
  // @@protoc_insertion_point(destructor:osi3.ColorGrey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ColorGrey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ColorGrey::ArenaDtor(void* object) {
  ColorGrey* _this = reinterpret_cast< ColorGrey* >(object);
  (void)_this;
}
void ColorGrey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColorGrey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColorGrey::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.ColorGrey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  grey_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColorGrey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double grey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_grey(&has_bits);
          grey_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColorGrey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.ColorGrey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double grey = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_grey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.ColorGrey)
  return target;
}

size_t ColorGrey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.ColorGrey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double grey = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColorGrey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ColorGrey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColorGrey::GetClassData() const { return &_class_data_; }

void ColorGrey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ColorGrey *>(to)->MergeFrom(
      static_cast<const ColorGrey &>(from));
}


void ColorGrey::MergeFrom(const ColorGrey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.ColorGrey)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_grey()) {
    _internal_set_grey(from._internal_grey());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColorGrey::CopyFrom(const ColorGrey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.ColorGrey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorGrey::IsInitialized() const {
  return true;
}

void ColorGrey::InternalSwap(ColorGrey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(grey_, other->grey_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColorGrey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fcommon_2eproto_getter, &descriptor_table_osi_5fcommon_2eproto_once,
      file_level_metadata_osi_5fcommon_2eproto[15]);
}

// ===================================================================

class ColorRGB::_Internal {
 public:
  using HasBits = decltype(std::declval<ColorRGB>()._has_bits_);
  static void set_has_red(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_green(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_blue(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ColorRGB::ColorRGB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.ColorRGB)
}
ColorRGB::ColorRGB(const ColorRGB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&red_, &from.red_,
    static_cast<size_t>(reinterpret_cast<char*>(&blue_) -
    reinterpret_cast<char*>(&red_)) + sizeof(blue_));
  // @@protoc_insertion_point(copy_constructor:osi3.ColorRGB)
}

void ColorRGB::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&red_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&blue_) -
    reinterpret_cast<char*>(&red_)) + sizeof(blue_));
}

ColorRGB::~ColorRGB() {
  // @@protoc_insertion_point(destructor:osi3.ColorRGB)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ColorRGB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ColorRGB::ArenaDtor(void* object) {
  ColorRGB* _this = reinterpret_cast< ColorRGB* >(object);
  (void)_this;
}
void ColorRGB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColorRGB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColorRGB::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.ColorRGB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&red_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&blue_) -
        reinterpret_cast<char*>(&red_)) + sizeof(blue_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColorRGB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double red = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_red(&has_bits);
          red_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double green = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_green(&has_bits);
          green_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double blue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_blue(&has_bits);
          blue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColorRGB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.ColorRGB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double red = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_red(), target);
  }

  // optional double green = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_green(), target);
  }

  // optional double blue = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_blue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.ColorRGB)
  return target;
}

size_t ColorRGB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.ColorRGB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double red = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double green = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double blue = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColorRGB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ColorRGB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColorRGB::GetClassData() const { return &_class_data_; }

void ColorRGB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ColorRGB *>(to)->MergeFrom(
      static_cast<const ColorRGB &>(from));
}


void ColorRGB::MergeFrom(const ColorRGB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.ColorRGB)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      red_ = from.red_;
    }
    if (cached_has_bits & 0x00000002u) {
      green_ = from.green_;
    }
    if (cached_has_bits & 0x00000004u) {
      blue_ = from.blue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColorRGB::CopyFrom(const ColorRGB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.ColorRGB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorRGB::IsInitialized() const {
  return true;
}

void ColorRGB::InternalSwap(ColorRGB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColorRGB, blue_)
      + sizeof(ColorRGB::blue_)
      - PROTOBUF_FIELD_OFFSET(ColorRGB, red_)>(
          reinterpret_cast<char*>(&red_),
          reinterpret_cast<char*>(&other->red_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColorRGB::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fcommon_2eproto_getter, &descriptor_table_osi_5fcommon_2eproto_once,
      file_level_metadata_osi_5fcommon_2eproto[16]);
}

// ===================================================================

class ColorRGBIR::_Internal {
 public:
  using HasBits = decltype(std::declval<ColorRGBIR>()._has_bits_);
  static void set_has_red(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_green(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_blue(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_infrared(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ColorRGBIR::ColorRGBIR(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.ColorRGBIR)
}
ColorRGBIR::ColorRGBIR(const ColorRGBIR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&red_, &from.red_,
    static_cast<size_t>(reinterpret_cast<char*>(&infrared_) -
    reinterpret_cast<char*>(&red_)) + sizeof(infrared_));
  // @@protoc_insertion_point(copy_constructor:osi3.ColorRGBIR)
}

void ColorRGBIR::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&red_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&infrared_) -
    reinterpret_cast<char*>(&red_)) + sizeof(infrared_));
}

ColorRGBIR::~ColorRGBIR() {
  // @@protoc_insertion_point(destructor:osi3.ColorRGBIR)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ColorRGBIR::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ColorRGBIR::ArenaDtor(void* object) {
  ColorRGBIR* _this = reinterpret_cast< ColorRGBIR* >(object);
  (void)_this;
}
void ColorRGBIR::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColorRGBIR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColorRGBIR::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.ColorRGBIR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&red_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&infrared_) -
        reinterpret_cast<char*>(&red_)) + sizeof(infrared_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColorRGBIR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double red = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_red(&has_bits);
          red_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double green = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_green(&has_bits);
          green_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double blue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_blue(&has_bits);
          blue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double infrared = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_infrared(&has_bits);
          infrared_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColorRGBIR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.ColorRGBIR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double red = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_red(), target);
  }

  // optional double green = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_green(), target);
  }

  // optional double blue = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_blue(), target);
  }

  // optional double infrared = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_infrared(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.ColorRGBIR)
  return target;
}

size_t ColorRGBIR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.ColorRGBIR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double red = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double green = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double blue = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double infrared = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColorRGBIR::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ColorRGBIR::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColorRGBIR::GetClassData() const { return &_class_data_; }

void ColorRGBIR::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ColorRGBIR *>(to)->MergeFrom(
      static_cast<const ColorRGBIR &>(from));
}


void ColorRGBIR::MergeFrom(const ColorRGBIR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.ColorRGBIR)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      red_ = from.red_;
    }
    if (cached_has_bits & 0x00000002u) {
      green_ = from.green_;
    }
    if (cached_has_bits & 0x00000004u) {
      blue_ = from.blue_;
    }
    if (cached_has_bits & 0x00000008u) {
      infrared_ = from.infrared_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColorRGBIR::CopyFrom(const ColorRGBIR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.ColorRGBIR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorRGBIR::IsInitialized() const {
  return true;
}

void ColorRGBIR::InternalSwap(ColorRGBIR* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColorRGBIR, infrared_)
      + sizeof(ColorRGBIR::infrared_)
      - PROTOBUF_FIELD_OFFSET(ColorRGBIR, red_)>(
          reinterpret_cast<char*>(&red_),
          reinterpret_cast<char*>(&other->red_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColorRGBIR::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fcommon_2eproto_getter, &descriptor_table_osi_5fcommon_2eproto_once,
      file_level_metadata_osi_5fcommon_2eproto[17]);
}

// ===================================================================

class ColorHSV::_Internal {
 public:
  using HasBits = decltype(std::declval<ColorHSV>()._has_bits_);
  static void set_has_hue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_saturation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ColorHSV::ColorHSV(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.ColorHSV)
}
ColorHSV::ColorHSV(const ColorHSV& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hue_, &from.hue_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&hue_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:osi3.ColorHSV)
}

void ColorHSV::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hue_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&hue_)) + sizeof(value_));
}

ColorHSV::~ColorHSV() {
  // @@protoc_insertion_point(destructor:osi3.ColorHSV)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ColorHSV::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ColorHSV::ArenaDtor(void* object) {
  ColorHSV* _this = reinterpret_cast< ColorHSV* >(object);
  (void)_this;
}
void ColorHSV::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColorHSV::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColorHSV::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.ColorHSV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&hue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&hue_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColorHSV::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double hue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_hue(&has_bits);
          hue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double saturation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_saturation(&has_bits);
          saturation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColorHSV::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.ColorHSV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double hue = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_hue(), target);
  }

  // optional double saturation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_saturation(), target);
  }

  // optional double value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.ColorHSV)
  return target;
}

size_t ColorHSV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.ColorHSV)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double hue = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double saturation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColorHSV::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ColorHSV::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColorHSV::GetClassData() const { return &_class_data_; }

void ColorHSV::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ColorHSV *>(to)->MergeFrom(
      static_cast<const ColorHSV &>(from));
}


void ColorHSV::MergeFrom(const ColorHSV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.ColorHSV)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hue_ = from.hue_;
    }
    if (cached_has_bits & 0x00000002u) {
      saturation_ = from.saturation_;
    }
    if (cached_has_bits & 0x00000004u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColorHSV::CopyFrom(const ColorHSV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.ColorHSV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorHSV::IsInitialized() const {
  return true;
}

void ColorHSV::InternalSwap(ColorHSV* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColorHSV, value_)
      + sizeof(ColorHSV::value_)
      - PROTOBUF_FIELD_OFFSET(ColorHSV, hue_)>(
          reinterpret_cast<char*>(&hue_),
          reinterpret_cast<char*>(&other->hue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColorHSV::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fcommon_2eproto_getter, &descriptor_table_osi_5fcommon_2eproto_once,
      file_level_metadata_osi_5fcommon_2eproto[18]);
}

// ===================================================================

class ColorLUV::_Internal {
 public:
  using HasBits = decltype(std::declval<ColorLUV>()._has_bits_);
  static void set_has_luminance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_u(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_v(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ColorLUV::ColorLUV(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.ColorLUV)
}
ColorLUV::ColorLUV(const ColorLUV& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&luminance_, &from.luminance_,
    static_cast<size_t>(reinterpret_cast<char*>(&v_) -
    reinterpret_cast<char*>(&luminance_)) + sizeof(v_));
  // @@protoc_insertion_point(copy_constructor:osi3.ColorLUV)
}

void ColorLUV::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&luminance_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&v_) -
    reinterpret_cast<char*>(&luminance_)) + sizeof(v_));
}

ColorLUV::~ColorLUV() {
  // @@protoc_insertion_point(destructor:osi3.ColorLUV)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ColorLUV::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ColorLUV::ArenaDtor(void* object) {
  ColorLUV* _this = reinterpret_cast< ColorLUV* >(object);
  (void)_this;
}
void ColorLUV::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColorLUV::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColorLUV::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.ColorLUV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&luminance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&v_) -
        reinterpret_cast<char*>(&luminance_)) + sizeof(v_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColorLUV::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double luminance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_luminance(&has_bits);
          luminance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double u = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_u(&has_bits);
          u_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double v = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_v(&has_bits);
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColorLUV::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.ColorLUV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double luminance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_luminance(), target);
  }

  // optional double u = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_u(), target);
  }

  // optional double v = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.ColorLUV)
  return target;
}

size_t ColorLUV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.ColorLUV)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double luminance = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double u = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double v = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColorLUV::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ColorLUV::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColorLUV::GetClassData() const { return &_class_data_; }

void ColorLUV::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ColorLUV *>(to)->MergeFrom(
      static_cast<const ColorLUV &>(from));
}


void ColorLUV::MergeFrom(const ColorLUV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.ColorLUV)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      luminance_ = from.luminance_;
    }
    if (cached_has_bits & 0x00000002u) {
      u_ = from.u_;
    }
    if (cached_has_bits & 0x00000004u) {
      v_ = from.v_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColorLUV::CopyFrom(const ColorLUV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.ColorLUV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorLUV::IsInitialized() const {
  return true;
}

void ColorLUV::InternalSwap(ColorLUV* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColorLUV, v_)
      + sizeof(ColorLUV::v_)
      - PROTOBUF_FIELD_OFFSET(ColorLUV, luminance_)>(
          reinterpret_cast<char*>(&luminance_),
          reinterpret_cast<char*>(&other->luminance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColorLUV::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fcommon_2eproto_getter, &descriptor_table_osi_5fcommon_2eproto_once,
      file_level_metadata_osi_5fcommon_2eproto[19]);
}

// ===================================================================

class ColorCMYK::_Internal {
 public:
  using HasBits = decltype(std::declval<ColorCMYK>()._has_bits_);
  static void set_has_cyan(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_magenta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_yellow(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ColorCMYK::ColorCMYK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.ColorCMYK)
}
ColorCMYK::ColorCMYK(const ColorCMYK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cyan_, &from.cyan_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_) -
    reinterpret_cast<char*>(&cyan_)) + sizeof(key_));
  // @@protoc_insertion_point(copy_constructor:osi3.ColorCMYK)
}

void ColorCMYK::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cyan_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&key_) -
    reinterpret_cast<char*>(&cyan_)) + sizeof(key_));
}

ColorCMYK::~ColorCMYK() {
  // @@protoc_insertion_point(destructor:osi3.ColorCMYK)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ColorCMYK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ColorCMYK::ArenaDtor(void* object) {
  ColorCMYK* _this = reinterpret_cast< ColorCMYK* >(object);
  (void)_this;
}
void ColorCMYK::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColorCMYK::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColorCMYK::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.ColorCMYK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&cyan_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&key_) -
        reinterpret_cast<char*>(&cyan_)) + sizeof(key_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColorCMYK::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double cyan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_cyan(&has_bits);
          cyan_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double magenta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_magenta(&has_bits);
          magenta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double yellow = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_yellow(&has_bits);
          yellow_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_key(&has_bits);
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColorCMYK::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.ColorCMYK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double cyan = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_cyan(), target);
  }

  // optional double magenta = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_magenta(), target);
  }

  // optional double yellow = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_yellow(), target);
  }

  // optional double key = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.ColorCMYK)
  return target;
}

size_t ColorCMYK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.ColorCMYK)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double cyan = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double magenta = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double yellow = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double key = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColorCMYK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ColorCMYK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColorCMYK::GetClassData() const { return &_class_data_; }

void ColorCMYK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ColorCMYK *>(to)->MergeFrom(
      static_cast<const ColorCMYK &>(from));
}


void ColorCMYK::MergeFrom(const ColorCMYK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.ColorCMYK)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      cyan_ = from.cyan_;
    }
    if (cached_has_bits & 0x00000002u) {
      magenta_ = from.magenta_;
    }
    if (cached_has_bits & 0x00000004u) {
      yellow_ = from.yellow_;
    }
    if (cached_has_bits & 0x00000008u) {
      key_ = from.key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColorCMYK::CopyFrom(const ColorCMYK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.ColorCMYK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorCMYK::IsInitialized() const {
  return true;
}

void ColorCMYK::InternalSwap(ColorCMYK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColorCMYK, key_)
      + sizeof(ColorCMYK::key_)
      - PROTOBUF_FIELD_OFFSET(ColorCMYK, cyan_)>(
          reinterpret_cast<char*>(&cyan_),
          reinterpret_cast<char*>(&other->cyan_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColorCMYK::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fcommon_2eproto_getter, &descriptor_table_osi_5fcommon_2eproto_once,
      file_level_metadata_osi_5fcommon_2eproto[20]);
}

// ===================================================================

class Pedalry::_Internal {
 public:
  using HasBits = decltype(std::declval<Pedalry>()._has_bits_);
  static void set_has_pedal_position_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pedal_position_brake(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pedal_position_clutch(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Pedalry::Pedalry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.Pedalry)
}
Pedalry::Pedalry(const Pedalry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pedal_position_acceleration_, &from.pedal_position_acceleration_,
    static_cast<size_t>(reinterpret_cast<char*>(&pedal_position_clutch_) -
    reinterpret_cast<char*>(&pedal_position_acceleration_)) + sizeof(pedal_position_clutch_));
  // @@protoc_insertion_point(copy_constructor:osi3.Pedalry)
}

void Pedalry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pedal_position_acceleration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pedal_position_clutch_) -
    reinterpret_cast<char*>(&pedal_position_acceleration_)) + sizeof(pedal_position_clutch_));
}

Pedalry::~Pedalry() {
  // @@protoc_insertion_point(destructor:osi3.Pedalry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Pedalry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pedalry::ArenaDtor(void* object) {
  Pedalry* _this = reinterpret_cast< Pedalry* >(object);
  (void)_this;
}
void Pedalry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pedalry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pedalry::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.Pedalry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&pedal_position_acceleration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pedal_position_clutch_) -
        reinterpret_cast<char*>(&pedal_position_acceleration_)) + sizeof(pedal_position_clutch_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pedalry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double pedal_position_acceleration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_pedal_position_acceleration(&has_bits);
          pedal_position_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double pedal_position_brake = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_pedal_position_brake(&has_bits);
          pedal_position_brake_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double pedal_position_clutch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_pedal_position_clutch(&has_bits);
          pedal_position_clutch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pedalry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.Pedalry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double pedal_position_acceleration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_pedal_position_acceleration(), target);
  }

  // optional double pedal_position_brake = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_pedal_position_brake(), target);
  }

  // optional double pedal_position_clutch = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_pedal_position_clutch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.Pedalry)
  return target;
}

size_t Pedalry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.Pedalry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double pedal_position_acceleration = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double pedal_position_brake = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double pedal_position_clutch = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pedalry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Pedalry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pedalry::GetClassData() const { return &_class_data_; }

void Pedalry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Pedalry *>(to)->MergeFrom(
      static_cast<const Pedalry &>(from));
}


void Pedalry::MergeFrom(const Pedalry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.Pedalry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      pedal_position_acceleration_ = from.pedal_position_acceleration_;
    }
    if (cached_has_bits & 0x00000002u) {
      pedal_position_brake_ = from.pedal_position_brake_;
    }
    if (cached_has_bits & 0x00000004u) {
      pedal_position_clutch_ = from.pedal_position_clutch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pedalry::CopyFrom(const Pedalry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.Pedalry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pedalry::IsInitialized() const {
  return true;
}

void Pedalry::InternalSwap(Pedalry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pedalry, pedal_position_clutch_)
      + sizeof(Pedalry::pedal_position_clutch_)
      - PROTOBUF_FIELD_OFFSET(Pedalry, pedal_position_acceleration_)>(
          reinterpret_cast<char*>(&pedal_position_acceleration_),
          reinterpret_cast<char*>(&other->pedal_position_acceleration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pedalry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fcommon_2eproto_getter, &descriptor_table_osi_5fcommon_2eproto_once,
      file_level_metadata_osi_5fcommon_2eproto[21]);
}

// ===================================================================

class VehicleSteeringWheel::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleSteeringWheel>()._has_bits_);
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_angular_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_torque(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

VehicleSteeringWheel::VehicleSteeringWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.VehicleSteeringWheel)
}
VehicleSteeringWheel::VehicleSteeringWheel(const VehicleSteeringWheel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&angle_, &from.angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&torque_) -
    reinterpret_cast<char*>(&angle_)) + sizeof(torque_));
  // @@protoc_insertion_point(copy_constructor:osi3.VehicleSteeringWheel)
}

void VehicleSteeringWheel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&angle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&torque_) -
    reinterpret_cast<char*>(&angle_)) + sizeof(torque_));
}

VehicleSteeringWheel::~VehicleSteeringWheel() {
  // @@protoc_insertion_point(destructor:osi3.VehicleSteeringWheel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VehicleSteeringWheel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VehicleSteeringWheel::ArenaDtor(void* object) {
  VehicleSteeringWheel* _this = reinterpret_cast< VehicleSteeringWheel* >(object);
  (void)_this;
}
void VehicleSteeringWheel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleSteeringWheel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VehicleSteeringWheel::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.VehicleSteeringWheel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&angle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&torque_) -
        reinterpret_cast<char*>(&angle_)) + sizeof(torque_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleSteeringWheel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_angle(&has_bits);
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double angular_speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_angular_speed(&has_bits);
          angular_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double torque = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_torque(&has_bits);
          torque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleSteeringWheel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.VehicleSteeringWheel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double angle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_angle(), target);
  }

  // optional double angular_speed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_angular_speed(), target);
  }

  // optional double torque = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_torque(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.VehicleSteeringWheel)
  return target;
}

size_t VehicleSteeringWheel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.VehicleSteeringWheel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double angle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double angular_speed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double torque = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleSteeringWheel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VehicleSteeringWheel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleSteeringWheel::GetClassData() const { return &_class_data_; }

void VehicleSteeringWheel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VehicleSteeringWheel *>(to)->MergeFrom(
      static_cast<const VehicleSteeringWheel &>(from));
}


void VehicleSteeringWheel::MergeFrom(const VehicleSteeringWheel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.VehicleSteeringWheel)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      angle_ = from.angle_;
    }
    if (cached_has_bits & 0x00000002u) {
      angular_speed_ = from.angular_speed_;
    }
    if (cached_has_bits & 0x00000004u) {
      torque_ = from.torque_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleSteeringWheel::CopyFrom(const VehicleSteeringWheel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.VehicleSteeringWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleSteeringWheel::IsInitialized() const {
  return true;
}

void VehicleSteeringWheel::InternalSwap(VehicleSteeringWheel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleSteeringWheel, torque_)
      + sizeof(VehicleSteeringWheel::torque_)
      - PROTOBUF_FIELD_OFFSET(VehicleSteeringWheel, angle_)>(
          reinterpret_cast<char*>(&angle_),
          reinterpret_cast<char*>(&other->angle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleSteeringWheel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fcommon_2eproto_getter, &descriptor_table_osi_5fcommon_2eproto_once,
      file_level_metadata_osi_5fcommon_2eproto[22]);
}

// ===================================================================

class GeodeticPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<GeodeticPosition>()._has_bits_);
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_altitude(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GeodeticPosition::GeodeticPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.GeodeticPosition)
}
GeodeticPosition::GeodeticPosition(const GeodeticPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&altitude_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(altitude_));
  // @@protoc_insertion_point(copy_constructor:osi3.GeodeticPosition)
}

void GeodeticPosition::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&longitude_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&altitude_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(altitude_));
}

GeodeticPosition::~GeodeticPosition() {
  // @@protoc_insertion_point(destructor:osi3.GeodeticPosition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GeodeticPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GeodeticPosition::ArenaDtor(void* object) {
  GeodeticPosition* _this = reinterpret_cast< GeodeticPosition* >(object);
  (void)_this;
}
void GeodeticPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeodeticPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GeodeticPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.GeodeticPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&longitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&altitude_) -
        reinterpret_cast<char*>(&longitude_)) + sizeof(altitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeodeticPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double longitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double altitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_altitude(&has_bits);
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeodeticPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.GeodeticPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double longitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_longitude(), target);
  }

  // optional double latitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_latitude(), target);
  }

  // optional double altitude = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_altitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.GeodeticPosition)
  return target;
}

size_t GeodeticPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.GeodeticPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double longitude = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double latitude = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double altitude = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GeodeticPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GeodeticPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GeodeticPosition::GetClassData() const { return &_class_data_; }

void GeodeticPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GeodeticPosition *>(to)->MergeFrom(
      static_cast<const GeodeticPosition &>(from));
}


void GeodeticPosition::MergeFrom(const GeodeticPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.GeodeticPosition)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      altitude_ = from.altitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GeodeticPosition::CopyFrom(const GeodeticPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.GeodeticPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeodeticPosition::IsInitialized() const {
  return true;
}

void GeodeticPosition::InternalSwap(GeodeticPosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeodeticPosition, altitude_)
      + sizeof(GeodeticPosition::altitude_)
      - PROTOBUF_FIELD_OFFSET(GeodeticPosition, longitude_)>(
          reinterpret_cast<char*>(&longitude_),
          reinterpret_cast<char*>(&other->longitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeodeticPosition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fcommon_2eproto_getter, &descriptor_table_osi_5fcommon_2eproto_once,
      file_level_metadata_osi_5fcommon_2eproto[23]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::Vector3d* Arena::CreateMaybeMessage< ::osi3::Vector3d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::Vector3d >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::Vector2d* Arena::CreateMaybeMessage< ::osi3::Vector2d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::Vector2d >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::Timestamp* Arena::CreateMaybeMessage< ::osi3::Timestamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::Timestamp >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::Dimension3d* Arena::CreateMaybeMessage< ::osi3::Dimension3d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::Dimension3d >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::Orientation3d* Arena::CreateMaybeMessage< ::osi3::Orientation3d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::Orientation3d >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::Identifier* Arena::CreateMaybeMessage< ::osi3::Identifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::Identifier >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::ExternalReference* Arena::CreateMaybeMessage< ::osi3::ExternalReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::ExternalReference >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::MountingPosition* Arena::CreateMaybeMessage< ::osi3::MountingPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::MountingPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::Spherical3d* Arena::CreateMaybeMessage< ::osi3::Spherical3d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::Spherical3d >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::BaseStationary* Arena::CreateMaybeMessage< ::osi3::BaseStationary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::BaseStationary >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::BaseMoving* Arena::CreateMaybeMessage< ::osi3::BaseMoving >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::BaseMoving >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::StatePoint* Arena::CreateMaybeMessage< ::osi3::StatePoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::StatePoint >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::WavelengthData* Arena::CreateMaybeMessage< ::osi3::WavelengthData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::WavelengthData >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::SpatialSignalStrength* Arena::CreateMaybeMessage< ::osi3::SpatialSignalStrength >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::SpatialSignalStrength >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::ColorDescription* Arena::CreateMaybeMessage< ::osi3::ColorDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::ColorDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::ColorGrey* Arena::CreateMaybeMessage< ::osi3::ColorGrey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::ColorGrey >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::ColorRGB* Arena::CreateMaybeMessage< ::osi3::ColorRGB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::ColorRGB >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::ColorRGBIR* Arena::CreateMaybeMessage< ::osi3::ColorRGBIR >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::ColorRGBIR >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::ColorHSV* Arena::CreateMaybeMessage< ::osi3::ColorHSV >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::ColorHSV >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::ColorLUV* Arena::CreateMaybeMessage< ::osi3::ColorLUV >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::ColorLUV >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::ColorCMYK* Arena::CreateMaybeMessage< ::osi3::ColorCMYK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::ColorCMYK >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::Pedalry* Arena::CreateMaybeMessage< ::osi3::Pedalry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::Pedalry >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::VehicleSteeringWheel* Arena::CreateMaybeMessage< ::osi3::VehicleSteeringWheel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::VehicleSteeringWheel >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::GeodeticPosition* Arena::CreateMaybeMessage< ::osi3::GeodeticPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::GeodeticPosition >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
