// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_logicaldetectiondata.proto

#include "osi_logicaldetectiondata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace osi3 {
constexpr LogicalDetectionData::LogicalDetectionData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logical_detection_()
  , version_(nullptr)
  , header_(nullptr){}
struct LogicalDetectionDataDefaultTypeInternal {
  constexpr LogicalDetectionDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogicalDetectionDataDefaultTypeInternal() {}
  union {
    LogicalDetectionData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogicalDetectionDataDefaultTypeInternal _LogicalDetectionData_default_instance_;
constexpr LogicalDetectionDataHeader::LogicalDetectionDataHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sensor_id_()
  , logical_detection_time_(nullptr)
  , data_qualifier_(0)

  , number_of_valid_logical_detections_(0u){}
struct LogicalDetectionDataHeaderDefaultTypeInternal {
  constexpr LogicalDetectionDataHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogicalDetectionDataHeaderDefaultTypeInternal() {}
  union {
    LogicalDetectionDataHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogicalDetectionDataHeaderDefaultTypeInternal _LogicalDetectionDataHeader_default_instance_;
constexpr LogicalDetection::LogicalDetection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sensor_id_()
  , object_id_(nullptr)
  , position_(nullptr)
  , position_rmse_(nullptr)
  , velocity_(nullptr)
  , velocity_rmse_(nullptr)
  , existence_probability_(0)
  , intensity_(0)
  , snr_(0)
  , point_target_probability_(0)
  , classification_(0)
{}
struct LogicalDetectionDefaultTypeInternal {
  constexpr LogicalDetectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogicalDetectionDefaultTypeInternal() {}
  union {
    LogicalDetection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogicalDetectionDefaultTypeInternal _LogicalDetection_default_instance_;
}  // namespace osi3
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5flogicaldetectiondata_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_osi_5flogicaldetectiondata_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5flogicaldetectiondata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5flogicaldetectiondata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionData, version_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionData, header_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionData, logical_detection_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionDataHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionDataHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionDataHeader, logical_detection_time_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionDataHeader, data_qualifier_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionDataHeader, number_of_valid_logical_detections_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionDataHeader, sensor_id_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, existence_probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, object_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, position_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, position_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, velocity_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, velocity_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, intensity_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, snr_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, point_target_probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, classification_),
  5,
  0,
  1,
  2,
  3,
  4,
  6,
  7,
  8,
  ~0u,
  9,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::osi3::LogicalDetectionData)},
  { 12, 22, -1, sizeof(::osi3::LogicalDetectionDataHeader)},
  { 26, 43, -1, sizeof(::osi3::LogicalDetection)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_LogicalDetectionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_LogicalDetectionDataHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_LogicalDetection_default_instance_),
};

const char descriptor_table_protodef_osi_5flogicaldetectiondata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036osi_logicaldetectiondata.proto\022\004osi3\032\021"
  "osi_version.proto\032\020osi_common.proto\"\244\001\n\024"
  "LogicalDetectionData\022\'\n\007version\030\001 \001(\0132\026."
  "osi3.InterfaceVersion\0220\n\006header\030\002 \001(\0132 ."
  "osi3.LogicalDetectionDataHeader\0221\n\021logic"
  "al_detection\030\003 \003(\0132\026.osi3.LogicalDetecti"
  "on\"\366\003\n\032LogicalDetectionDataHeader\022/\n\026log"
  "ical_detection_time\030\001 \001(\0132\017.osi3.Timesta"
  "mp\022F\n\016data_qualifier\030\002 \001(\0162..osi3.Logica"
  "lDetectionDataHeader.DataQualifier\022*\n\"nu"
  "mber_of_valid_logical_detections\030\003 \001(\r\022#"
  "\n\tsensor_id\030\004 \003(\0132\020.osi3.Identifier\"\215\002\n\r"
  "DataQualifier\022\032\n\026DATA_QUALIFIER_UNKNOWN\020"
  "\000\022\030\n\024DATA_QUALIFIER_OTHER\020\001\022\034\n\030DATA_QUAL"
  "IFIER_AVAILABLE\020\002\022$\n DATA_QUALIFIER_AVAI"
  "LABLE_REDUCED\020\003\022 \n\034DATA_QUALIFIER_NOT_AV"
  "AILABLE\020\004\022\034\n\030DATA_QUALIFIER_BLINDNESS\020\005\022"
  "&\n\"DATA_QUALIFIER_TEMPORARY_AVAILABLE\020\006\022"
  "\032\n\026DATA_QUALIFIER_INVALID\020\007\"\215\003\n\020LogicalD"
  "etection\022\035\n\025existence_probability\030\001 \001(\001\022"
  "#\n\tobject_id\030\002 \001(\0132\020.osi3.Identifier\022 \n\010"
  "position\030\003 \001(\0132\016.osi3.Vector3d\022%\n\rpositi"
  "on_rmse\030\004 \001(\0132\016.osi3.Vector3d\022 \n\010velocit"
  "y\030\005 \001(\0132\016.osi3.Vector3d\022%\n\rvelocity_rmse"
  "\030\006 \001(\0132\016.osi3.Vector3d\022\021\n\tintensity\030\007 \001("
  "\001\022\013\n\003snr\030\010 \001(\001\022 \n\030point_target_probabili"
  "ty\030\t \001(\001\022#\n\tsensor_id\030\n \003(\0132\020.osi3.Ident"
  "ifier\022<\n\016classification\030\013 \001(\0162$.osi3.Log"
  "icalDetectionClassification*\275\002\n\036LogicalD"
  "etectionClassification\022,\n(LOGICAL_DETECT"
  "ION_CLASSIFICATION_UNKNOWN\020\000\022*\n&LOGICAL_"
  "DETECTION_CLASSIFICATION_OTHER\020\001\022,\n(LOGI"
  "CAL_DETECTION_CLASSIFICATION_INVALID\020\002\022,"
  "\n(LOGICAL_DETECTION_CLASSIFICATION_CLUTT"
  "ER\020\003\0221\n-LOGICAL_DETECTION_CLASSIFICATION"
  "_OVERDRIVABLE\020\004\0222\n.LOGICAL_DETECTION_CLA"
  "SSIFICATION_UNDERDRIVABLE\020\005B\002H\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5flogicaldetectiondata_2eproto_deps[2] = {
  &::descriptor_table_osi_5fcommon_2eproto,
  &::descriptor_table_osi_5fversion_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5flogicaldetectiondata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5flogicaldetectiondata_2eproto = {
  false, false, 1471, descriptor_table_protodef_osi_5flogicaldetectiondata_2eproto, "osi_logicaldetectiondata.proto", 
  &descriptor_table_osi_5flogicaldetectiondata_2eproto_once, descriptor_table_osi_5flogicaldetectiondata_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_osi_5flogicaldetectiondata_2eproto::offsets,
  file_level_metadata_osi_5flogicaldetectiondata_2eproto, file_level_enum_descriptors_osi_5flogicaldetectiondata_2eproto, file_level_service_descriptors_osi_5flogicaldetectiondata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_osi_5flogicaldetectiondata_2eproto_getter() {
  return &descriptor_table_osi_5flogicaldetectiondata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_osi_5flogicaldetectiondata_2eproto(&descriptor_table_osi_5flogicaldetectiondata_2eproto);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogicalDetectionDataHeader_DataQualifier_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5flogicaldetectiondata_2eproto);
  return file_level_enum_descriptors_osi_5flogicaldetectiondata_2eproto[0];
}
bool LogicalDetectionDataHeader_DataQualifier_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DATA_QUALIFIER_UNKNOWN;
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DATA_QUALIFIER_OTHER;
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DATA_QUALIFIER_AVAILABLE;
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DATA_QUALIFIER_AVAILABLE_REDUCED;
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DATA_QUALIFIER_NOT_AVAILABLE;
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DATA_QUALIFIER_BLINDNESS;
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DATA_QUALIFIER_TEMPORARY_AVAILABLE;
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DATA_QUALIFIER_INVALID;
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DataQualifier_MIN;
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DataQualifier_MAX;
constexpr int LogicalDetectionDataHeader::DataQualifier_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogicalDetectionClassification_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5flogicaldetectiondata_2eproto);
  return file_level_enum_descriptors_osi_5flogicaldetectiondata_2eproto[1];
}
bool LogicalDetectionClassification_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class LogicalDetectionData::_Internal {
 public:
  using HasBits = decltype(std::declval<LogicalDetectionData>()._has_bits_);
  static const ::osi3::InterfaceVersion& version(const LogicalDetectionData* msg);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::LogicalDetectionDataHeader& header(const LogicalDetectionData* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::osi3::InterfaceVersion&
LogicalDetectionData::_Internal::version(const LogicalDetectionData* msg) {
  return *msg->version_;
}
const ::osi3::LogicalDetectionDataHeader&
LogicalDetectionData::_Internal::header(const LogicalDetectionData* msg) {
  return *msg->header_;
}
void LogicalDetectionData::clear_version() {
  if (version_ != nullptr) version_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
LogicalDetectionData::LogicalDetectionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  logical_detection_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.LogicalDetectionData)
}
LogicalDetectionData::LogicalDetectionData(const LogicalDetectionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      logical_detection_(from.logical_detection_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_version()) {
    version_ = new ::osi3::InterfaceVersion(*from.version_);
  } else {
    version_ = nullptr;
  }
  if (from._internal_has_header()) {
    header_ = new ::osi3::LogicalDetectionDataHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.LogicalDetectionData)
}

void LogicalDetectionData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&header_) -
    reinterpret_cast<char*>(&version_)) + sizeof(header_));
}

LogicalDetectionData::~LogicalDetectionData() {
  // @@protoc_insertion_point(destructor:osi3.LogicalDetectionData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LogicalDetectionData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete version_;
  if (this != internal_default_instance()) delete header_;
}

void LogicalDetectionData::ArenaDtor(void* object) {
  LogicalDetectionData* _this = reinterpret_cast< LogicalDetectionData* >(object);
  (void)_this;
}
void LogicalDetectionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogicalDetectionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogicalDetectionData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LogicalDetectionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logical_detection_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(version_ != nullptr);
      version_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicalDetectionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.InterfaceVersion version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.LogicalDetectionDataHeader header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.LogicalDetection logical_detection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logical_detection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogicalDetectionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LogicalDetectionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.InterfaceVersion version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::version(this), target, stream);
  }

  // optional .osi3.LogicalDetectionDataHeader header = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::header(this), target, stream);
  }

  // repeated .osi3.LogicalDetection logical_detection = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_logical_detection_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_logical_detection(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LogicalDetectionData)
  return target;
}

size_t LogicalDetectionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LogicalDetectionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.LogicalDetection logical_detection = 3;
  total_size += 1UL * this->_internal_logical_detection_size();
  for (const auto& msg : this->logical_detection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .osi3.InterfaceVersion version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *version_);
    }

    // optional .osi3.LogicalDetectionDataHeader header = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogicalDetectionData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LogicalDetectionData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogicalDetectionData::GetClassData() const { return &_class_data_; }

void LogicalDetectionData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LogicalDetectionData *>(to)->MergeFrom(
      static_cast<const LogicalDetectionData &>(from));
}


void LogicalDetectionData::MergeFrom(const LogicalDetectionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LogicalDetectionData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logical_detection_.MergeFrom(from.logical_detection_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_version()->::osi3::InterfaceVersion::MergeFrom(from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::osi3::LogicalDetectionDataHeader::MergeFrom(from._internal_header());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogicalDetectionData::CopyFrom(const LogicalDetectionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LogicalDetectionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalDetectionData::IsInitialized() const {
  return true;
}

void LogicalDetectionData::InternalSwap(LogicalDetectionData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  logical_detection_.InternalSwap(&other->logical_detection_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogicalDetectionData, header_)
      + sizeof(LogicalDetectionData::header_)
      - PROTOBUF_FIELD_OFFSET(LogicalDetectionData, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalDetectionData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5flogicaldetectiondata_2eproto_getter, &descriptor_table_osi_5flogicaldetectiondata_2eproto_once,
      file_level_metadata_osi_5flogicaldetectiondata_2eproto[0]);
}

// ===================================================================

class LogicalDetectionDataHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<LogicalDetectionDataHeader>()._has_bits_);
  static const ::osi3::Timestamp& logical_detection_time(const LogicalDetectionDataHeader* msg);
  static void set_has_logical_detection_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data_qualifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_number_of_valid_logical_detections(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::osi3::Timestamp&
LogicalDetectionDataHeader::_Internal::logical_detection_time(const LogicalDetectionDataHeader* msg) {
  return *msg->logical_detection_time_;
}
void LogicalDetectionDataHeader::clear_logical_detection_time() {
  if (logical_detection_time_ != nullptr) logical_detection_time_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void LogicalDetectionDataHeader::clear_sensor_id() {
  sensor_id_.Clear();
}
LogicalDetectionDataHeader::LogicalDetectionDataHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sensor_id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.LogicalDetectionDataHeader)
}
LogicalDetectionDataHeader::LogicalDetectionDataHeader(const LogicalDetectionDataHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sensor_id_(from.sensor_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_logical_detection_time()) {
    logical_detection_time_ = new ::osi3::Timestamp(*from.logical_detection_time_);
  } else {
    logical_detection_time_ = nullptr;
  }
  ::memcpy(&data_qualifier_, &from.data_qualifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_valid_logical_detections_) -
    reinterpret_cast<char*>(&data_qualifier_)) + sizeof(number_of_valid_logical_detections_));
  // @@protoc_insertion_point(copy_constructor:osi3.LogicalDetectionDataHeader)
}

void LogicalDetectionDataHeader::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logical_detection_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&number_of_valid_logical_detections_) -
    reinterpret_cast<char*>(&logical_detection_time_)) + sizeof(number_of_valid_logical_detections_));
}

LogicalDetectionDataHeader::~LogicalDetectionDataHeader() {
  // @@protoc_insertion_point(destructor:osi3.LogicalDetectionDataHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LogicalDetectionDataHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete logical_detection_time_;
}

void LogicalDetectionDataHeader::ArenaDtor(void* object) {
  LogicalDetectionDataHeader* _this = reinterpret_cast< LogicalDetectionDataHeader* >(object);
  (void)_this;
}
void LogicalDetectionDataHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogicalDetectionDataHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogicalDetectionDataHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LogicalDetectionDataHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(logical_detection_time_ != nullptr);
    logical_detection_time_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&data_qualifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_valid_logical_detections_) -
        reinterpret_cast<char*>(&data_qualifier_)) + sizeof(number_of_valid_logical_detections_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicalDetectionDataHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Timestamp logical_detection_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_logical_detection_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.LogicalDetectionDataHeader.DataQualifier data_qualifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::LogicalDetectionDataHeader_DataQualifier_IsValid(val))) {
            _internal_set_data_qualifier(static_cast<::osi3::LogicalDetectionDataHeader_DataQualifier>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 number_of_valid_logical_detections = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_number_of_valid_logical_detections(&has_bits);
          number_of_valid_logical_detections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Identifier sensor_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sensor_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogicalDetectionDataHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LogicalDetectionDataHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.Timestamp logical_detection_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::logical_detection_time(this), target, stream);
  }

  // optional .osi3.LogicalDetectionDataHeader.DataQualifier data_qualifier = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_data_qualifier(), target);
  }

  // optional uint32 number_of_valid_logical_detections = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_number_of_valid_logical_detections(), target);
  }

  // repeated .osi3.Identifier sensor_id = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sensor_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_sensor_id(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LogicalDetectionDataHeader)
  return target;
}

size_t LogicalDetectionDataHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LogicalDetectionDataHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Identifier sensor_id = 4;
  total_size += 1UL * this->_internal_sensor_id_size();
  for (const auto& msg : this->sensor_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .osi3.Timestamp logical_detection_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *logical_detection_time_);
    }

    // optional .osi3.LogicalDetectionDataHeader.DataQualifier data_qualifier = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_qualifier());
    }

    // optional uint32 number_of_valid_logical_detections = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_valid_logical_detections());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogicalDetectionDataHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LogicalDetectionDataHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogicalDetectionDataHeader::GetClassData() const { return &_class_data_; }

void LogicalDetectionDataHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LogicalDetectionDataHeader *>(to)->MergeFrom(
      static_cast<const LogicalDetectionDataHeader &>(from));
}


void LogicalDetectionDataHeader::MergeFrom(const LogicalDetectionDataHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LogicalDetectionDataHeader)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_id_.MergeFrom(from.sensor_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_logical_detection_time()->::osi3::Timestamp::MergeFrom(from._internal_logical_detection_time());
    }
    if (cached_has_bits & 0x00000002u) {
      data_qualifier_ = from.data_qualifier_;
    }
    if (cached_has_bits & 0x00000004u) {
      number_of_valid_logical_detections_ = from.number_of_valid_logical_detections_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogicalDetectionDataHeader::CopyFrom(const LogicalDetectionDataHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LogicalDetectionDataHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalDetectionDataHeader::IsInitialized() const {
  return true;
}

void LogicalDetectionDataHeader::InternalSwap(LogicalDetectionDataHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sensor_id_.InternalSwap(&other->sensor_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogicalDetectionDataHeader, number_of_valid_logical_detections_)
      + sizeof(LogicalDetectionDataHeader::number_of_valid_logical_detections_)
      - PROTOBUF_FIELD_OFFSET(LogicalDetectionDataHeader, logical_detection_time_)>(
          reinterpret_cast<char*>(&logical_detection_time_),
          reinterpret_cast<char*>(&other->logical_detection_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalDetectionDataHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5flogicaldetectiondata_2eproto_getter, &descriptor_table_osi_5flogicaldetectiondata_2eproto_once,
      file_level_metadata_osi_5flogicaldetectiondata_2eproto[1]);
}

// ===================================================================

class LogicalDetection::_Internal {
 public:
  using HasBits = decltype(std::declval<LogicalDetection>()._has_bits_);
  static void set_has_existence_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::osi3::Identifier& object_id(const LogicalDetection* msg);
  static void set_has_object_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::Vector3d& position(const LogicalDetection* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::Vector3d& position_rmse(const LogicalDetection* msg);
  static void set_has_position_rmse(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::osi3::Vector3d& velocity(const LogicalDetection* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::osi3::Vector3d& velocity_rmse(const LogicalDetection* msg);
  static void set_has_velocity_rmse(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_intensity(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_snr(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_point_target_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::osi3::Identifier&
LogicalDetection::_Internal::object_id(const LogicalDetection* msg) {
  return *msg->object_id_;
}
const ::osi3::Vector3d&
LogicalDetection::_Internal::position(const LogicalDetection* msg) {
  return *msg->position_;
}
const ::osi3::Vector3d&
LogicalDetection::_Internal::position_rmse(const LogicalDetection* msg) {
  return *msg->position_rmse_;
}
const ::osi3::Vector3d&
LogicalDetection::_Internal::velocity(const LogicalDetection* msg) {
  return *msg->velocity_;
}
const ::osi3::Vector3d&
LogicalDetection::_Internal::velocity_rmse(const LogicalDetection* msg) {
  return *msg->velocity_rmse_;
}
void LogicalDetection::clear_object_id() {
  if (object_id_ != nullptr) object_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void LogicalDetection::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void LogicalDetection::clear_position_rmse() {
  if (position_rmse_ != nullptr) position_rmse_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void LogicalDetection::clear_velocity() {
  if (velocity_ != nullptr) velocity_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void LogicalDetection::clear_velocity_rmse() {
  if (velocity_rmse_ != nullptr) velocity_rmse_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void LogicalDetection::clear_sensor_id() {
  sensor_id_.Clear();
}
LogicalDetection::LogicalDetection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sensor_id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.LogicalDetection)
}
LogicalDetection::LogicalDetection(const LogicalDetection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sensor_id_(from.sensor_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object_id()) {
    object_id_ = new ::osi3::Identifier(*from.object_id_);
  } else {
    object_id_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::osi3::Vector3d(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_position_rmse()) {
    position_rmse_ = new ::osi3::Vector3d(*from.position_rmse_);
  } else {
    position_rmse_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::osi3::Vector3d(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  if (from._internal_has_velocity_rmse()) {
    velocity_rmse_ = new ::osi3::Vector3d(*from.velocity_rmse_);
  } else {
    velocity_rmse_ = nullptr;
  }
  ::memcpy(&existence_probability_, &from.existence_probability_,
    static_cast<size_t>(reinterpret_cast<char*>(&classification_) -
    reinterpret_cast<char*>(&existence_probability_)) + sizeof(classification_));
  // @@protoc_insertion_point(copy_constructor:osi3.LogicalDetection)
}

void LogicalDetection::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&classification_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(classification_));
}

LogicalDetection::~LogicalDetection() {
  // @@protoc_insertion_point(destructor:osi3.LogicalDetection)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LogicalDetection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete object_id_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete position_rmse_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete velocity_rmse_;
}

void LogicalDetection::ArenaDtor(void* object) {
  LogicalDetection* _this = reinterpret_cast< LogicalDetection* >(object);
  (void)_this;
}
void LogicalDetection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogicalDetection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogicalDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LogicalDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(object_id_ != nullptr);
      object_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(position_rmse_ != nullptr);
      position_rmse_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(velocity_ != nullptr);
      velocity_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(velocity_rmse_ != nullptr);
      velocity_rmse_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&existence_probability_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&snr_) -
        reinterpret_cast<char*>(&existence_probability_)) + sizeof(snr_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&point_target_probability_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&classification_) -
        reinterpret_cast<char*>(&point_target_probability_)) + sizeof(classification_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicalDetection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double existence_probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_existence_probability(&has_bits);
          existence_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Identifier object_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Vector3d position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Vector3d position_rmse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_rmse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Vector3d velocity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Vector3d velocity_rmse = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity_rmse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double intensity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_intensity(&has_bits);
          intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double snr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_snr(&has_bits);
          snr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double point_target_probability = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_point_target_probability(&has_bits);
          point_target_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Identifier sensor_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sensor_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.LogicalDetectionClassification classification = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::LogicalDetectionClassification_IsValid(val))) {
            _internal_set_classification(static_cast<::osi3::LogicalDetectionClassification>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogicalDetection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LogicalDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double existence_probability = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_existence_probability(), target);
  }

  // optional .osi3.Identifier object_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::object_id(this), target, stream);
  }

  // optional .osi3.Vector3d position = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::position(this), target, stream);
  }

  // optional .osi3.Vector3d position_rmse = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::position_rmse(this), target, stream);
  }

  // optional .osi3.Vector3d velocity = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::velocity(this), target, stream);
  }

  // optional .osi3.Vector3d velocity_rmse = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::velocity_rmse(this), target, stream);
  }

  // optional double intensity = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_intensity(), target);
  }

  // optional double snr = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_snr(), target);
  }

  // optional double point_target_probability = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_point_target_probability(), target);
  }

  // repeated .osi3.Identifier sensor_id = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sensor_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_sensor_id(i), target, stream);
  }

  // optional .osi3.LogicalDetectionClassification classification = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_classification(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LogicalDetection)
  return target;
}

size_t LogicalDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LogicalDetection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Identifier sensor_id = 10;
  total_size += 1UL * this->_internal_sensor_id_size();
  for (const auto& msg : this->sensor_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .osi3.Identifier object_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_id_);
    }

    // optional .osi3.Vector3d position = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .osi3.Vector3d position_rmse = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_rmse_);
    }

    // optional .osi3.Vector3d velocity = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *velocity_);
    }

    // optional .osi3.Vector3d velocity_rmse = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *velocity_rmse_);
    }

    // optional double existence_probability = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double intensity = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double snr = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional double point_target_probability = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional .osi3.LogicalDetectionClassification classification = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_classification());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogicalDetection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LogicalDetection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogicalDetection::GetClassData() const { return &_class_data_; }

void LogicalDetection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LogicalDetection *>(to)->MergeFrom(
      static_cast<const LogicalDetection &>(from));
}


void LogicalDetection::MergeFrom(const LogicalDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LogicalDetection)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_id_.MergeFrom(from.sensor_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_object_id()->::osi3::Identifier::MergeFrom(from._internal_object_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_position()->::osi3::Vector3d::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_position_rmse()->::osi3::Vector3d::MergeFrom(from._internal_position_rmse());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_velocity()->::osi3::Vector3d::MergeFrom(from._internal_velocity());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_velocity_rmse()->::osi3::Vector3d::MergeFrom(from._internal_velocity_rmse());
    }
    if (cached_has_bits & 0x00000020u) {
      existence_probability_ = from.existence_probability_;
    }
    if (cached_has_bits & 0x00000040u) {
      intensity_ = from.intensity_;
    }
    if (cached_has_bits & 0x00000080u) {
      snr_ = from.snr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      point_target_probability_ = from.point_target_probability_;
    }
    if (cached_has_bits & 0x00000200u) {
      classification_ = from.classification_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogicalDetection::CopyFrom(const LogicalDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LogicalDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalDetection::IsInitialized() const {
  return true;
}

void LogicalDetection::InternalSwap(LogicalDetection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sensor_id_.InternalSwap(&other->sensor_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogicalDetection, classification_)
      + sizeof(LogicalDetection::classification_)
      - PROTOBUF_FIELD_OFFSET(LogicalDetection, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalDetection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5flogicaldetectiondata_2eproto_getter, &descriptor_table_osi_5flogicaldetectiondata_2eproto_once,
      file_level_metadata_osi_5flogicaldetectiondata_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::LogicalDetectionData* Arena::CreateMaybeMessage< ::osi3::LogicalDetectionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::LogicalDetectionData >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::LogicalDetectionDataHeader* Arena::CreateMaybeMessage< ::osi3::LogicalDetectionDataHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::LogicalDetectionDataHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::LogicalDetection* Arena::CreateMaybeMessage< ::osi3::LogicalDetection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::LogicalDetection >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
