// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_sensorviewconfiguration.proto

#include "osi_sensorviewconfiguration.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace osi3 {
constexpr SensorViewConfiguration::SensorViewConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : generic_sensor_view_configuration_()
  , radar_sensor_view_configuration_()
  , lidar_sensor_view_configuration_()
  , camera_sensor_view_configuration_()
  , ultrasonic_sensor_view_configuration_()
  , version_(nullptr)
  , sensor_id_(nullptr)
  , mounting_position_(nullptr)
  , mounting_position_rmse_(nullptr)
  , update_cycle_time_(nullptr)
  , update_cycle_offset_(nullptr)
  , simulation_start_time_(nullptr)
  , field_of_view_horizontal_(0)
  , field_of_view_vertical_(0)
  , range_(0)
  , omit_static_information_(false){}
struct SensorViewConfigurationDefaultTypeInternal {
  constexpr SensorViewConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SensorViewConfigurationDefaultTypeInternal() {}
  union {
    SensorViewConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SensorViewConfigurationDefaultTypeInternal _SensorViewConfiguration_default_instance_;
constexpr GenericSensorViewConfiguration::GenericSensorViewConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sensor_id_(nullptr)
  , mounting_position_(nullptr)
  , mounting_position_rmse_(nullptr)
  , field_of_view_horizontal_(0)
  , field_of_view_vertical_(0){}
struct GenericSensorViewConfigurationDefaultTypeInternal {
  constexpr GenericSensorViewConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenericSensorViewConfigurationDefaultTypeInternal() {}
  union {
    GenericSensorViewConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenericSensorViewConfigurationDefaultTypeInternal _GenericSensorViewConfiguration_default_instance_;
constexpr RadarSensorViewConfiguration_AntennaDiagramEntry::RadarSensorViewConfiguration_AntennaDiagramEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : horizontal_angle_(0)
  , vertical_angle_(0)
  , response_(0){}
struct RadarSensorViewConfiguration_AntennaDiagramEntryDefaultTypeInternal {
  constexpr RadarSensorViewConfiguration_AntennaDiagramEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RadarSensorViewConfiguration_AntennaDiagramEntryDefaultTypeInternal() {}
  union {
    RadarSensorViewConfiguration_AntennaDiagramEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RadarSensorViewConfiguration_AntennaDiagramEntryDefaultTypeInternal _RadarSensorViewConfiguration_AntennaDiagramEntry_default_instance_;
constexpr RadarSensorViewConfiguration::RadarSensorViewConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tx_antenna_diagram_()
  , rx_antenna_diagram_()
  , sensor_id_(nullptr)
  , mounting_position_(nullptr)
  , mounting_position_rmse_(nullptr)
  , field_of_view_horizontal_(0)
  , field_of_view_vertical_(0)
  , number_of_rays_horizontal_(0u)
  , number_of_rays_vertical_(0u)
  , emitter_frequency_(0)
  , max_number_of_interactions_(0u){}
struct RadarSensorViewConfigurationDefaultTypeInternal {
  constexpr RadarSensorViewConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RadarSensorViewConfigurationDefaultTypeInternal() {}
  union {
    RadarSensorViewConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RadarSensorViewConfigurationDefaultTypeInternal _RadarSensorViewConfiguration_default_instance_;
constexpr LidarSensorViewConfiguration::LidarSensorViewConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : directions_()
  , timings_()
  , sensor_id_(nullptr)
  , mounting_position_(nullptr)
  , mounting_position_rmse_(nullptr)
  , field_of_view_horizontal_(0)
  , field_of_view_vertical_(0)
  , number_of_rays_horizontal_(0u)
  , number_of_rays_vertical_(0u)
  , emitter_frequency_(0)
  , max_number_of_interactions_(0u)
  , num_of_pixels_(0u){}
struct LidarSensorViewConfigurationDefaultTypeInternal {
  constexpr LidarSensorViewConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LidarSensorViewConfigurationDefaultTypeInternal() {}
  union {
    LidarSensorViewConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LidarSensorViewConfigurationDefaultTypeInternal _LidarSensorViewConfiguration_default_instance_;
constexpr CameraSensorViewConfiguration::CameraSensorViewConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_format_()
  , wavelength_data_()
  , sensor_id_(nullptr)
  , mounting_position_(nullptr)
  , mounting_position_rmse_(nullptr)
  , field_of_view_horizontal_(0)
  , field_of_view_vertical_(0)
  , number_of_pixels_horizontal_(0u)
  , number_of_pixels_vertical_(0u)
  , samples_per_pixel_(0u)
  , max_number_of_interactions_(0u){}
struct CameraSensorViewConfigurationDefaultTypeInternal {
  constexpr CameraSensorViewConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraSensorViewConfigurationDefaultTypeInternal() {}
  union {
    CameraSensorViewConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraSensorViewConfigurationDefaultTypeInternal _CameraSensorViewConfiguration_default_instance_;
constexpr UltrasonicSensorViewConfiguration::UltrasonicSensorViewConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sensor_id_(nullptr)
  , mounting_position_(nullptr)
  , mounting_position_rmse_(nullptr)
  , field_of_view_horizontal_(0)
  , field_of_view_vertical_(0){}
struct UltrasonicSensorViewConfigurationDefaultTypeInternal {
  constexpr UltrasonicSensorViewConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UltrasonicSensorViewConfigurationDefaultTypeInternal() {}
  union {
    UltrasonicSensorViewConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UltrasonicSensorViewConfigurationDefaultTypeInternal _UltrasonicSensorViewConfiguration_default_instance_;
}  // namespace osi3
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5fsensorviewconfiguration_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_osi_5fsensorviewconfiguration_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5fsensorviewconfiguration_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5fsensorviewconfiguration_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, version_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, mounting_position_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, mounting_position_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, field_of_view_horizontal_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, field_of_view_vertical_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, range_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, update_cycle_time_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, update_cycle_offset_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, simulation_start_time_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, omit_static_information_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, generic_sensor_view_configuration_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, radar_sensor_view_configuration_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, lidar_sensor_view_configuration_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, camera_sensor_view_configuration_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, ultrasonic_sensor_view_configuration_),
  0,
  1,
  2,
  3,
  7,
  8,
  9,
  4,
  5,
  6,
  10,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::GenericSensorViewConfiguration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::GenericSensorViewConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::GenericSensorViewConfiguration, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::GenericSensorViewConfiguration, mounting_position_),
  PROTOBUF_FIELD_OFFSET(::osi3::GenericSensorViewConfiguration, mounting_position_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::GenericSensorViewConfiguration, field_of_view_horizontal_),
  PROTOBUF_FIELD_OFFSET(::osi3::GenericSensorViewConfiguration, field_of_view_vertical_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry, horizontal_angle_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry, vertical_angle_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry, response_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration, mounting_position_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration, mounting_position_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration, field_of_view_horizontal_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration, field_of_view_vertical_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration, number_of_rays_horizontal_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration, number_of_rays_vertical_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration, max_number_of_interactions_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration, emitter_frequency_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration, tx_antenna_diagram_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration, rx_antenna_diagram_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  7,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorViewConfiguration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorViewConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorViewConfiguration, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorViewConfiguration, mounting_position_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorViewConfiguration, mounting_position_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorViewConfiguration, field_of_view_horizontal_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorViewConfiguration, field_of_view_vertical_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorViewConfiguration, number_of_rays_horizontal_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorViewConfiguration, number_of_rays_vertical_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorViewConfiguration, max_number_of_interactions_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorViewConfiguration, emitter_frequency_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorViewConfiguration, num_of_pixels_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorViewConfiguration, directions_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorViewConfiguration, timings_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  7,
  9,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSensorViewConfiguration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSensorViewConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSensorViewConfiguration, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSensorViewConfiguration, mounting_position_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSensorViewConfiguration, mounting_position_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSensorViewConfiguration, field_of_view_horizontal_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSensorViewConfiguration, field_of_view_vertical_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSensorViewConfiguration, number_of_pixels_horizontal_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSensorViewConfiguration, number_of_pixels_vertical_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSensorViewConfiguration, channel_format_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSensorViewConfiguration, samples_per_pixel_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSensorViewConfiguration, max_number_of_interactions_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSensorViewConfiguration, wavelength_data_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  7,
  8,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicSensorViewConfiguration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicSensorViewConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicSensorViewConfiguration, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicSensorViewConfiguration, mounting_position_),
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicSensorViewConfiguration, mounting_position_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicSensorViewConfiguration, field_of_view_horizontal_),
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicSensorViewConfiguration, field_of_view_vertical_),
  0,
  1,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 22, -1, sizeof(::osi3::SensorViewConfiguration)},
  { 38, 49, -1, sizeof(::osi3::GenericSensorViewConfiguration)},
  { 54, 63, -1, sizeof(::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry)},
  { 66, 83, -1, sizeof(::osi3::RadarSensorViewConfiguration)},
  { 94, 112, -1, sizeof(::osi3::LidarSensorViewConfiguration)},
  { 124, 141, -1, sizeof(::osi3::CameraSensorViewConfiguration)},
  { 152, 163, -1, sizeof(::osi3::UltrasonicSensorViewConfiguration)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_SensorViewConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_GenericSensorViewConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_RadarSensorViewConfiguration_AntennaDiagramEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_RadarSensorViewConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_LidarSensorViewConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_CameraSensorViewConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_UltrasonicSensorViewConfiguration_default_instance_),
};

const char descriptor_table_protodef_osi_5fsensorviewconfiguration_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!osi_sensorviewconfiguration.proto\022\004osi"
  "3\032\020osi_common.proto\032\021osi_version.proto\"\344"
  "\006\n\027SensorViewConfiguration\022\'\n\007version\030\001 "
  "\001(\0132\026.osi3.InterfaceVersion\022#\n\tsensor_id"
  "\030\002 \001(\0132\020.osi3.Identifier\0221\n\021mounting_pos"
  "ition\030\003 \001(\0132\026.osi3.MountingPosition\0226\n\026m"
  "ounting_position_rmse\030\004 \001(\0132\026.osi3.Mount"
  "ingPosition\022 \n\030field_of_view_horizontal\030"
  "\005 \001(\001\022\036\n\026field_of_view_vertical\030\006 \001(\001\022\r\n"
  "\005range\030\007 \001(\001\022*\n\021update_cycle_time\030\010 \001(\0132"
  "\017.osi3.Timestamp\022,\n\023update_cycle_offset\030"
  "\t \001(\0132\017.osi3.Timestamp\022.\n\025simulation_sta"
  "rt_time\030\n \001(\0132\017.osi3.Timestamp\022\037\n\027omit_s"
  "tatic_information\030\013 \001(\010\022P\n!generic_senso"
  "r_view_configuration\030\350\007 \003(\0132$.osi3.Gener"
  "icSensorViewConfiguration\022L\n\037radar_senso"
  "r_view_configuration\030\351\007 \003(\0132\".osi3.Radar"
  "SensorViewConfiguration\022L\n\037lidar_sensor_"
  "view_configuration\030\352\007 \003(\0132\".osi3.LidarSe"
  "nsorViewConfiguration\022N\n camera_sensor_v"
  "iew_configuration\030\353\007 \003(\0132#.osi3.CameraSe"
  "nsorViewConfiguration\022V\n$ultrasonic_sens"
  "or_view_configuration\030\354\007 \003(\0132\'.osi3.Ultr"
  "asonicSensorViewConfiguration\"\362\001\n\036Generi"
  "cSensorViewConfiguration\022#\n\tsensor_id\030\001 "
  "\001(\0132\020.osi3.Identifier\0221\n\021mounting_positi"
  "on\030\002 \001(\0132\026.osi3.MountingPosition\0226\n\026moun"
  "ting_position_rmse\030\003 \001(\0132\026.osi3.Mounting"
  "Position\022 \n\030field_of_view_horizontal\030\004 \001"
  "(\001\022\036\n\026field_of_view_vertical\030\005 \001(\001\"\366\004\n\034R"
  "adarSensorViewConfiguration\022#\n\tsensor_id"
  "\030\001 \001(\0132\020.osi3.Identifier\0221\n\021mounting_pos"
  "ition\030\002 \001(\0132\026.osi3.MountingPosition\0226\n\026m"
  "ounting_position_rmse\030\003 \001(\0132\026.osi3.Mount"
  "ingPosition\022 \n\030field_of_view_horizontal\030"
  "\004 \001(\001\022\036\n\026field_of_view_vertical\030\005 \001(\001\022!\n"
  "\031number_of_rays_horizontal\030\006 \001(\r\022\037\n\027numb"
  "er_of_rays_vertical\030\007 \001(\r\022\"\n\032max_number_"
  "of_interactions\030\010 \001(\r\022\031\n\021emitter_frequen"
  "cy\030\t \001(\001\022R\n\022tx_antenna_diagram\030\n \003(\01326.o"
  "si3.RadarSensorViewConfiguration.Antenna"
  "DiagramEntry\022R\n\022rx_antenna_diagram\030\013 \003(\013"
  "26.osi3.RadarSensorViewConfiguration.Ant"
  "ennaDiagramEntry\032Y\n\023AntennaDiagramEntry\022"
  "\030\n\020horizontal_angle\030\001 \001(\001\022\026\n\016vertical_an"
  "gle\030\002 \001(\001\022\020\n\010response\030\003 \001(\001\"\277\003\n\034LidarSen"
  "sorViewConfiguration\022#\n\tsensor_id\030\001 \001(\0132"
  "\020.osi3.Identifier\0221\n\021mounting_position\030\002"
  " \001(\0132\026.osi3.MountingPosition\0226\n\026mounting"
  "_position_rmse\030\003 \001(\0132\026.osi3.MountingPosi"
  "tion\022 \n\030field_of_view_horizontal\030\004 \001(\001\022\036"
  "\n\026field_of_view_vertical\030\005 \001(\001\022!\n\031number"
  "_of_rays_horizontal\030\006 \001(\r\022\037\n\027number_of_r"
  "ays_vertical\030\007 \001(\r\022\"\n\032max_number_of_inte"
  "ractions\030\010 \001(\r\022\031\n\021emitter_frequency\030\t \001("
  "\001\022\025\n\rnum_of_pixels\030\n \001(\r\022\"\n\ndirections\030\013"
  " \003(\0132\016.osi3.Vector3d\022\017\n\007timings\030\014 \003(\r\"\370\n"
  "\n\035CameraSensorViewConfiguration\022#\n\tsenso"
  "r_id\030\001 \001(\0132\020.osi3.Identifier\0221\n\021mounting"
  "_position\030\002 \001(\0132\026.osi3.MountingPosition\022"
  "6\n\026mounting_position_rmse\030\003 \001(\0132\026.osi3.M"
  "ountingPosition\022 \n\030field_of_view_horizon"
  "tal\030\004 \001(\001\022\036\n\026field_of_view_vertical\030\005 \001("
  "\001\022#\n\033number_of_pixels_horizontal\030\006 \001(\r\022!"
  "\n\031number_of_pixels_vertical\030\007 \001(\r\022I\n\016cha"
  "nnel_format\030\010 \003(\01621.osi3.CameraSensorVie"
  "wConfiguration.ChannelFormat\022\031\n\021samples_"
  "per_pixel\030\t \001(\r\022\"\n\032max_number_of_interac"
  "tions\030\n \001(\r\022-\n\017wavelength_data\030\013 \003(\0132\024.o"
  "si3.WavelengthData\"\203\007\n\rChannelFormat\022\032\n\026"
  "CHANNEL_FORMAT_UNKNOWN\020\000\022\030\n\024CHANNEL_FORM"
  "AT_OTHER\020\001\022\036\n\032CHANNEL_FORMAT_MONO_U8_LIN"
  "\020\002\022\037\n\033CHANNEL_FORMAT_MONO_U16_LIN\020\003\022\037\n\033C"
  "HANNEL_FORMAT_MONO_U32_LIN\020\004\022\037\n\033CHANNEL_"
  "FORMAT_MONO_F32_LIN\020\005\022\035\n\031CHANNEL_FORMAT_"
  "RGB_U8_LIN\020\006\022\036\n\032CHANNEL_FORMAT_RGB_U16_L"
  "IN\020\007\022\036\n\032CHANNEL_FORMAT_RGB_U32_LIN\020\010\022\036\n\032"
  "CHANNEL_FORMAT_RGB_F32_LIN\020\t\022$\n CHANNEL_"
  "FORMAT_BAYER_BGGR_U8_LIN\020\n\022%\n!CHANNEL_FO"
  "RMAT_BAYER_BGGR_U16_LIN\020\013\022%\n!CHANNEL_FOR"
  "MAT_BAYER_BGGR_U32_LIN\020\014\022%\n!CHANNEL_FORM"
  "AT_BAYER_BGGR_F32_LIN\020\r\022$\n CHANNEL_FORMA"
  "T_BAYER_RGGB_U8_LIN\020\016\022%\n!CHANNEL_FORMAT_"
  "BAYER_RGGB_U16_LIN\020\017\022%\n!CHANNEL_FORMAT_B"
  "AYER_RGGB_U32_LIN\020\020\022%\n!CHANNEL_FORMAT_BA"
  "YER_RGGB_F32_LIN\020\021\022\036\n\032CHANNEL_FORMAT_RCC"
  "C_U8_LIN\020\022\022\037\n\033CHANNEL_FORMAT_RCCC_U16_LI"
  "N\020\023\022\037\n\033CHANNEL_FORMAT_RCCC_U32_LIN\020\024\022\037\n\033"
  "CHANNEL_FORMAT_RCCC_F32_LIN\020\025\022\036\n\032CHANNEL"
  "_FORMAT_RCCB_U8_LIN\020\026\022\037\n\033CHANNEL_FORMAT_"
  "RCCB_U16_LIN\020\027\022\037\n\033CHANNEL_FORMAT_RCCB_U3"
  "2_LIN\020\030\022\037\n\033CHANNEL_FORMAT_RCCB_F32_LIN\020\031"
  "\"\365\001\n!UltrasonicSensorViewConfiguration\022#"
  "\n\tsensor_id\030\001 \001(\0132\020.osi3.Identifier\0221\n\021m"
  "ounting_position\030\002 \001(\0132\026.osi3.MountingPo"
  "sition\0226\n\026mounting_position_rmse\030\003 \001(\0132\026"
  ".osi3.MountingPosition\022 \n\030field_of_view_"
  "horizontal\030\004 \001(\001\022\036\n\026field_of_view_vertic"
  "al\030\005 \001(\001B\002H\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5fsensorviewconfiguration_2eproto_deps[2] = {
  &::descriptor_table_osi_5fcommon_2eproto,
  &::descriptor_table_osi_5fversion_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5fsensorviewconfiguration_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fsensorviewconfiguration_2eproto = {
  false, false, 3932, descriptor_table_protodef_osi_5fsensorviewconfiguration_2eproto, "osi_sensorviewconfiguration.proto", 
  &descriptor_table_osi_5fsensorviewconfiguration_2eproto_once, descriptor_table_osi_5fsensorviewconfiguration_2eproto_deps, 2, 7,
  schemas, file_default_instances, TableStruct_osi_5fsensorviewconfiguration_2eproto::offsets,
  file_level_metadata_osi_5fsensorviewconfiguration_2eproto, file_level_enum_descriptors_osi_5fsensorviewconfiguration_2eproto, file_level_service_descriptors_osi_5fsensorviewconfiguration_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_osi_5fsensorviewconfiguration_2eproto_getter() {
  return &descriptor_table_osi_5fsensorviewconfiguration_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_osi_5fsensorviewconfiguration_2eproto(&descriptor_table_osi_5fsensorviewconfiguration_2eproto);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraSensorViewConfiguration_ChannelFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fsensorviewconfiguration_2eproto);
  return file_level_enum_descriptors_osi_5fsensorviewconfiguration_2eproto[0];
}
bool CameraSensorViewConfiguration_ChannelFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_UNKNOWN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_OTHER;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_MONO_U8_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_MONO_U16_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_MONO_U32_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_MONO_F32_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_RGB_U8_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_RGB_U16_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_RGB_U32_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_RGB_F32_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_BAYER_BGGR_U8_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_BAYER_BGGR_U16_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_BAYER_BGGR_U32_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_BAYER_BGGR_F32_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_BAYER_RGGB_U8_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_BAYER_RGGB_U16_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_BAYER_RGGB_U32_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_BAYER_RGGB_F32_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_RCCC_U8_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_RCCC_U16_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_RCCC_U32_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_RCCC_F32_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_RCCB_U8_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_RCCB_U16_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_RCCB_U32_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_RCCB_F32_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::ChannelFormat_MIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::ChannelFormat_MAX;
constexpr int CameraSensorViewConfiguration::ChannelFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class SensorViewConfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorViewConfiguration>()._has_bits_);
  static const ::osi3::InterfaceVersion& version(const SensorViewConfiguration* msg);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::Identifier& sensor_id(const SensorViewConfiguration* msg);
  static void set_has_sensor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::MountingPosition& mounting_position(const SensorViewConfiguration* msg);
  static void set_has_mounting_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::osi3::MountingPosition& mounting_position_rmse(const SensorViewConfiguration* msg);
  static void set_has_mounting_position_rmse(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_field_of_view_horizontal(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_field_of_view_vertical(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::osi3::Timestamp& update_cycle_time(const SensorViewConfiguration* msg);
  static void set_has_update_cycle_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::osi3::Timestamp& update_cycle_offset(const SensorViewConfiguration* msg);
  static void set_has_update_cycle_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::osi3::Timestamp& simulation_start_time(const SensorViewConfiguration* msg);
  static void set_has_simulation_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_omit_static_information(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::osi3::InterfaceVersion&
SensorViewConfiguration::_Internal::version(const SensorViewConfiguration* msg) {
  return *msg->version_;
}
const ::osi3::Identifier&
SensorViewConfiguration::_Internal::sensor_id(const SensorViewConfiguration* msg) {
  return *msg->sensor_id_;
}
const ::osi3::MountingPosition&
SensorViewConfiguration::_Internal::mounting_position(const SensorViewConfiguration* msg) {
  return *msg->mounting_position_;
}
const ::osi3::MountingPosition&
SensorViewConfiguration::_Internal::mounting_position_rmse(const SensorViewConfiguration* msg) {
  return *msg->mounting_position_rmse_;
}
const ::osi3::Timestamp&
SensorViewConfiguration::_Internal::update_cycle_time(const SensorViewConfiguration* msg) {
  return *msg->update_cycle_time_;
}
const ::osi3::Timestamp&
SensorViewConfiguration::_Internal::update_cycle_offset(const SensorViewConfiguration* msg) {
  return *msg->update_cycle_offset_;
}
const ::osi3::Timestamp&
SensorViewConfiguration::_Internal::simulation_start_time(const SensorViewConfiguration* msg) {
  return *msg->simulation_start_time_;
}
void SensorViewConfiguration::clear_version() {
  if (version_ != nullptr) version_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SensorViewConfiguration::clear_sensor_id() {
  if (sensor_id_ != nullptr) sensor_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SensorViewConfiguration::clear_mounting_position() {
  if (mounting_position_ != nullptr) mounting_position_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SensorViewConfiguration::clear_mounting_position_rmse() {
  if (mounting_position_rmse_ != nullptr) mounting_position_rmse_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SensorViewConfiguration::clear_update_cycle_time() {
  if (update_cycle_time_ != nullptr) update_cycle_time_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void SensorViewConfiguration::clear_update_cycle_offset() {
  if (update_cycle_offset_ != nullptr) update_cycle_offset_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void SensorViewConfiguration::clear_simulation_start_time() {
  if (simulation_start_time_ != nullptr) simulation_start_time_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
SensorViewConfiguration::SensorViewConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  generic_sensor_view_configuration_(arena),
  radar_sensor_view_configuration_(arena),
  lidar_sensor_view_configuration_(arena),
  camera_sensor_view_configuration_(arena),
  ultrasonic_sensor_view_configuration_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.SensorViewConfiguration)
}
SensorViewConfiguration::SensorViewConfiguration(const SensorViewConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      generic_sensor_view_configuration_(from.generic_sensor_view_configuration_),
      radar_sensor_view_configuration_(from.radar_sensor_view_configuration_),
      lidar_sensor_view_configuration_(from.lidar_sensor_view_configuration_),
      camera_sensor_view_configuration_(from.camera_sensor_view_configuration_),
      ultrasonic_sensor_view_configuration_(from.ultrasonic_sensor_view_configuration_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_version()) {
    version_ = new ::osi3::InterfaceVersion(*from.version_);
  } else {
    version_ = nullptr;
  }
  if (from._internal_has_sensor_id()) {
    sensor_id_ = new ::osi3::Identifier(*from.sensor_id_);
  } else {
    sensor_id_ = nullptr;
  }
  if (from._internal_has_mounting_position()) {
    mounting_position_ = new ::osi3::MountingPosition(*from.mounting_position_);
  } else {
    mounting_position_ = nullptr;
  }
  if (from._internal_has_mounting_position_rmse()) {
    mounting_position_rmse_ = new ::osi3::MountingPosition(*from.mounting_position_rmse_);
  } else {
    mounting_position_rmse_ = nullptr;
  }
  if (from._internal_has_update_cycle_time()) {
    update_cycle_time_ = new ::osi3::Timestamp(*from.update_cycle_time_);
  } else {
    update_cycle_time_ = nullptr;
  }
  if (from._internal_has_update_cycle_offset()) {
    update_cycle_offset_ = new ::osi3::Timestamp(*from.update_cycle_offset_);
  } else {
    update_cycle_offset_ = nullptr;
  }
  if (from._internal_has_simulation_start_time()) {
    simulation_start_time_ = new ::osi3::Timestamp(*from.simulation_start_time_);
  } else {
    simulation_start_time_ = nullptr;
  }
  ::memcpy(&field_of_view_horizontal_, &from.field_of_view_horizontal_,
    static_cast<size_t>(reinterpret_cast<char*>(&omit_static_information_) -
    reinterpret_cast<char*>(&field_of_view_horizontal_)) + sizeof(omit_static_information_));
  // @@protoc_insertion_point(copy_constructor:osi3.SensorViewConfiguration)
}

void SensorViewConfiguration::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&omit_static_information_) -
    reinterpret_cast<char*>(&version_)) + sizeof(omit_static_information_));
}

SensorViewConfiguration::~SensorViewConfiguration() {
  // @@protoc_insertion_point(destructor:osi3.SensorViewConfiguration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SensorViewConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete version_;
  if (this != internal_default_instance()) delete sensor_id_;
  if (this != internal_default_instance()) delete mounting_position_;
  if (this != internal_default_instance()) delete mounting_position_rmse_;
  if (this != internal_default_instance()) delete update_cycle_time_;
  if (this != internal_default_instance()) delete update_cycle_offset_;
  if (this != internal_default_instance()) delete simulation_start_time_;
}

void SensorViewConfiguration::ArenaDtor(void* object) {
  SensorViewConfiguration* _this = reinterpret_cast< SensorViewConfiguration* >(object);
  (void)_this;
}
void SensorViewConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorViewConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SensorViewConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.SensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  generic_sensor_view_configuration_.Clear();
  radar_sensor_view_configuration_.Clear();
  lidar_sensor_view_configuration_.Clear();
  camera_sensor_view_configuration_.Clear();
  ultrasonic_sensor_view_configuration_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(version_ != nullptr);
      version_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sensor_id_ != nullptr);
      sensor_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(mounting_position_ != nullptr);
      mounting_position_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(mounting_position_rmse_ != nullptr);
      mounting_position_rmse_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(update_cycle_time_ != nullptr);
      update_cycle_time_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(update_cycle_offset_ != nullptr);
      update_cycle_offset_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(simulation_start_time_ != nullptr);
      simulation_start_time_->Clear();
    }
  }
  field_of_view_horizontal_ = 0;
  if (cached_has_bits & 0x00000700u) {
    ::memset(&field_of_view_vertical_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&omit_static_information_) -
        reinterpret_cast<char*>(&field_of_view_vertical_)) + sizeof(omit_static_information_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorViewConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.InterfaceVersion version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Identifier sensor_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sensor_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MountingPosition mounting_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mounting_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MountingPosition mounting_position_rmse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mounting_position_rmse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double field_of_view_horizontal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_field_of_view_horizontal(&has_bits);
          field_of_view_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double field_of_view_vertical = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_field_of_view_vertical(&has_bits);
          field_of_view_vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double range = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_range(&has_bits);
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Timestamp update_cycle_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_cycle_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Timestamp update_cycle_offset = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_cycle_offset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Timestamp simulation_start_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_simulation_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool omit_static_information = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_omit_static_information(&has_bits);
          omit_static_information_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.GenericSensorViewConfiguration generic_sensor_view_configuration = 1000;
      case 1000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_generic_sensor_view_configuration(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8002>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.RadarSensorViewConfiguration radar_sensor_view_configuration = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_radar_sensor_view_configuration(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8010>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.LidarSensorViewConfiguration lidar_sensor_view_configuration = 1002;
      case 1002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lidar_sensor_view_configuration(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8018>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.CameraSensorViewConfiguration camera_sensor_view_configuration = 1003;
      case 1003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_camera_sensor_view_configuration(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8026>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.UltrasonicSensorViewConfiguration ultrasonic_sensor_view_configuration = 1004;
      case 1004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ultrasonic_sensor_view_configuration(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8034>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorViewConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.SensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.InterfaceVersion version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::version(this), target, stream);
  }

  // optional .osi3.Identifier sensor_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sensor_id(this), target, stream);
  }

  // optional .osi3.MountingPosition mounting_position = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mounting_position(this), target, stream);
  }

  // optional .osi3.MountingPosition mounting_position_rmse = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::mounting_position_rmse(this), target, stream);
  }

  // optional double field_of_view_horizontal = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_field_of_view_horizontal(), target);
  }

  // optional double field_of_view_vertical = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_field_of_view_vertical(), target);
  }

  // optional double range = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_range(), target);
  }

  // optional .osi3.Timestamp update_cycle_time = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::update_cycle_time(this), target, stream);
  }

  // optional .osi3.Timestamp update_cycle_offset = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::update_cycle_offset(this), target, stream);
  }

  // optional .osi3.Timestamp simulation_start_time = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::simulation_start_time(this), target, stream);
  }

  // optional bool omit_static_information = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_omit_static_information(), target);
  }

  // repeated .osi3.GenericSensorViewConfiguration generic_sensor_view_configuration = 1000;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_generic_sensor_view_configuration_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1000, this->_internal_generic_sensor_view_configuration(i), target, stream);
  }

  // repeated .osi3.RadarSensorViewConfiguration radar_sensor_view_configuration = 1001;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_radar_sensor_view_configuration_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1001, this->_internal_radar_sensor_view_configuration(i), target, stream);
  }

  // repeated .osi3.LidarSensorViewConfiguration lidar_sensor_view_configuration = 1002;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lidar_sensor_view_configuration_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1002, this->_internal_lidar_sensor_view_configuration(i), target, stream);
  }

  // repeated .osi3.CameraSensorViewConfiguration camera_sensor_view_configuration = 1003;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_camera_sensor_view_configuration_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1003, this->_internal_camera_sensor_view_configuration(i), target, stream);
  }

  // repeated .osi3.UltrasonicSensorViewConfiguration ultrasonic_sensor_view_configuration = 1004;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ultrasonic_sensor_view_configuration_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1004, this->_internal_ultrasonic_sensor_view_configuration(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.SensorViewConfiguration)
  return target;
}

size_t SensorViewConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.SensorViewConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.GenericSensorViewConfiguration generic_sensor_view_configuration = 1000;
  total_size += 2UL * this->_internal_generic_sensor_view_configuration_size();
  for (const auto& msg : this->generic_sensor_view_configuration_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.RadarSensorViewConfiguration radar_sensor_view_configuration = 1001;
  total_size += 2UL * this->_internal_radar_sensor_view_configuration_size();
  for (const auto& msg : this->radar_sensor_view_configuration_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.LidarSensorViewConfiguration lidar_sensor_view_configuration = 1002;
  total_size += 2UL * this->_internal_lidar_sensor_view_configuration_size();
  for (const auto& msg : this->lidar_sensor_view_configuration_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.CameraSensorViewConfiguration camera_sensor_view_configuration = 1003;
  total_size += 2UL * this->_internal_camera_sensor_view_configuration_size();
  for (const auto& msg : this->camera_sensor_view_configuration_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.UltrasonicSensorViewConfiguration ultrasonic_sensor_view_configuration = 1004;
  total_size += 2UL * this->_internal_ultrasonic_sensor_view_configuration_size();
  for (const auto& msg : this->ultrasonic_sensor_view_configuration_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .osi3.InterfaceVersion version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *version_);
    }

    // optional .osi3.Identifier sensor_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sensor_id_);
    }

    // optional .osi3.MountingPosition mounting_position = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mounting_position_);
    }

    // optional .osi3.MountingPosition mounting_position_rmse = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mounting_position_rmse_);
    }

    // optional .osi3.Timestamp update_cycle_time = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_cycle_time_);
    }

    // optional .osi3.Timestamp update_cycle_offset = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_cycle_offset_);
    }

    // optional .osi3.Timestamp simulation_start_time = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *simulation_start_time_);
    }

    // optional double field_of_view_horizontal = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional double field_of_view_vertical = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double range = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional bool omit_static_information = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorViewConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SensorViewConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorViewConfiguration::GetClassData() const { return &_class_data_; }

void SensorViewConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SensorViewConfiguration *>(to)->MergeFrom(
      static_cast<const SensorViewConfiguration &>(from));
}


void SensorViewConfiguration::MergeFrom(const SensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.SensorViewConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  generic_sensor_view_configuration_.MergeFrom(from.generic_sensor_view_configuration_);
  radar_sensor_view_configuration_.MergeFrom(from.radar_sensor_view_configuration_);
  lidar_sensor_view_configuration_.MergeFrom(from.lidar_sensor_view_configuration_);
  camera_sensor_view_configuration_.MergeFrom(from.camera_sensor_view_configuration_);
  ultrasonic_sensor_view_configuration_.MergeFrom(from.ultrasonic_sensor_view_configuration_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_version()->::osi3::InterfaceVersion::MergeFrom(from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sensor_id()->::osi3::Identifier::MergeFrom(from._internal_sensor_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_mounting_position()->::osi3::MountingPosition::MergeFrom(from._internal_mounting_position());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_mounting_position_rmse()->::osi3::MountingPosition::MergeFrom(from._internal_mounting_position_rmse());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_update_cycle_time()->::osi3::Timestamp::MergeFrom(from._internal_update_cycle_time());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_update_cycle_offset()->::osi3::Timestamp::MergeFrom(from._internal_update_cycle_offset());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_simulation_start_time()->::osi3::Timestamp::MergeFrom(from._internal_simulation_start_time());
    }
    if (cached_has_bits & 0x00000080u) {
      field_of_view_horizontal_ = from.field_of_view_horizontal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      field_of_view_vertical_ = from.field_of_view_vertical_;
    }
    if (cached_has_bits & 0x00000200u) {
      range_ = from.range_;
    }
    if (cached_has_bits & 0x00000400u) {
      omit_static_information_ = from.omit_static_information_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorViewConfiguration::CopyFrom(const SensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.SensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorViewConfiguration::IsInitialized() const {
  return true;
}

void SensorViewConfiguration::InternalSwap(SensorViewConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  generic_sensor_view_configuration_.InternalSwap(&other->generic_sensor_view_configuration_);
  radar_sensor_view_configuration_.InternalSwap(&other->radar_sensor_view_configuration_);
  lidar_sensor_view_configuration_.InternalSwap(&other->lidar_sensor_view_configuration_);
  camera_sensor_view_configuration_.InternalSwap(&other->camera_sensor_view_configuration_);
  ultrasonic_sensor_view_configuration_.InternalSwap(&other->ultrasonic_sensor_view_configuration_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorViewConfiguration, omit_static_information_)
      + sizeof(SensorViewConfiguration::omit_static_information_)
      - PROTOBUF_FIELD_OFFSET(SensorViewConfiguration, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorViewConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fsensorviewconfiguration_2eproto_getter, &descriptor_table_osi_5fsensorviewconfiguration_2eproto_once,
      file_level_metadata_osi_5fsensorviewconfiguration_2eproto[0]);
}

// ===================================================================

class GenericSensorViewConfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<GenericSensorViewConfiguration>()._has_bits_);
  static const ::osi3::Identifier& sensor_id(const GenericSensorViewConfiguration* msg);
  static void set_has_sensor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::MountingPosition& mounting_position(const GenericSensorViewConfiguration* msg);
  static void set_has_mounting_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::MountingPosition& mounting_position_rmse(const GenericSensorViewConfiguration* msg);
  static void set_has_mounting_position_rmse(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_field_of_view_horizontal(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_field_of_view_vertical(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::osi3::Identifier&
GenericSensorViewConfiguration::_Internal::sensor_id(const GenericSensorViewConfiguration* msg) {
  return *msg->sensor_id_;
}
const ::osi3::MountingPosition&
GenericSensorViewConfiguration::_Internal::mounting_position(const GenericSensorViewConfiguration* msg) {
  return *msg->mounting_position_;
}
const ::osi3::MountingPosition&
GenericSensorViewConfiguration::_Internal::mounting_position_rmse(const GenericSensorViewConfiguration* msg) {
  return *msg->mounting_position_rmse_;
}
void GenericSensorViewConfiguration::clear_sensor_id() {
  if (sensor_id_ != nullptr) sensor_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GenericSensorViewConfiguration::clear_mounting_position() {
  if (mounting_position_ != nullptr) mounting_position_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GenericSensorViewConfiguration::clear_mounting_position_rmse() {
  if (mounting_position_rmse_ != nullptr) mounting_position_rmse_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
GenericSensorViewConfiguration::GenericSensorViewConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.GenericSensorViewConfiguration)
}
GenericSensorViewConfiguration::GenericSensorViewConfiguration(const GenericSensorViewConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sensor_id()) {
    sensor_id_ = new ::osi3::Identifier(*from.sensor_id_);
  } else {
    sensor_id_ = nullptr;
  }
  if (from._internal_has_mounting_position()) {
    mounting_position_ = new ::osi3::MountingPosition(*from.mounting_position_);
  } else {
    mounting_position_ = nullptr;
  }
  if (from._internal_has_mounting_position_rmse()) {
    mounting_position_rmse_ = new ::osi3::MountingPosition(*from.mounting_position_rmse_);
  } else {
    mounting_position_rmse_ = nullptr;
  }
  ::memcpy(&field_of_view_horizontal_, &from.field_of_view_horizontal_,
    static_cast<size_t>(reinterpret_cast<char*>(&field_of_view_vertical_) -
    reinterpret_cast<char*>(&field_of_view_horizontal_)) + sizeof(field_of_view_vertical_));
  // @@protoc_insertion_point(copy_constructor:osi3.GenericSensorViewConfiguration)
}

void GenericSensorViewConfiguration::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sensor_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&field_of_view_vertical_) -
    reinterpret_cast<char*>(&sensor_id_)) + sizeof(field_of_view_vertical_));
}

GenericSensorViewConfiguration::~GenericSensorViewConfiguration() {
  // @@protoc_insertion_point(destructor:osi3.GenericSensorViewConfiguration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GenericSensorViewConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sensor_id_;
  if (this != internal_default_instance()) delete mounting_position_;
  if (this != internal_default_instance()) delete mounting_position_rmse_;
}

void GenericSensorViewConfiguration::ArenaDtor(void* object) {
  GenericSensorViewConfiguration* _this = reinterpret_cast< GenericSensorViewConfiguration* >(object);
  (void)_this;
}
void GenericSensorViewConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenericSensorViewConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenericSensorViewConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.GenericSensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sensor_id_ != nullptr);
      sensor_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(mounting_position_ != nullptr);
      mounting_position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(mounting_position_rmse_ != nullptr);
      mounting_position_rmse_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&field_of_view_horizontal_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&field_of_view_vertical_) -
        reinterpret_cast<char*>(&field_of_view_horizontal_)) + sizeof(field_of_view_vertical_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenericSensorViewConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Identifier sensor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sensor_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MountingPosition mounting_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mounting_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MountingPosition mounting_position_rmse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mounting_position_rmse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double field_of_view_horizontal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_field_of_view_horizontal(&has_bits);
          field_of_view_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double field_of_view_vertical = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_field_of_view_vertical(&has_bits);
          field_of_view_vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericSensorViewConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.GenericSensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.Identifier sensor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sensor_id(this), target, stream);
  }

  // optional .osi3.MountingPosition mounting_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mounting_position(this), target, stream);
  }

  // optional .osi3.MountingPosition mounting_position_rmse = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mounting_position_rmse(this), target, stream);
  }

  // optional double field_of_view_horizontal = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_field_of_view_horizontal(), target);
  }

  // optional double field_of_view_vertical = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_field_of_view_vertical(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.GenericSensorViewConfiguration)
  return target;
}

size_t GenericSensorViewConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.GenericSensorViewConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .osi3.Identifier sensor_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sensor_id_);
    }

    // optional .osi3.MountingPosition mounting_position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mounting_position_);
    }

    // optional .osi3.MountingPosition mounting_position_rmse = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mounting_position_rmse_);
    }

    // optional double field_of_view_horizontal = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double field_of_view_vertical = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenericSensorViewConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GenericSensorViewConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenericSensorViewConfiguration::GetClassData() const { return &_class_data_; }

void GenericSensorViewConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GenericSensorViewConfiguration *>(to)->MergeFrom(
      static_cast<const GenericSensorViewConfiguration &>(from));
}


void GenericSensorViewConfiguration::MergeFrom(const GenericSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.GenericSensorViewConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sensor_id()->::osi3::Identifier::MergeFrom(from._internal_sensor_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_mounting_position()->::osi3::MountingPosition::MergeFrom(from._internal_mounting_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_mounting_position_rmse()->::osi3::MountingPosition::MergeFrom(from._internal_mounting_position_rmse());
    }
    if (cached_has_bits & 0x00000008u) {
      field_of_view_horizontal_ = from.field_of_view_horizontal_;
    }
    if (cached_has_bits & 0x00000010u) {
      field_of_view_vertical_ = from.field_of_view_vertical_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenericSensorViewConfiguration::CopyFrom(const GenericSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.GenericSensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericSensorViewConfiguration::IsInitialized() const {
  return true;
}

void GenericSensorViewConfiguration::InternalSwap(GenericSensorViewConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenericSensorViewConfiguration, field_of_view_vertical_)
      + sizeof(GenericSensorViewConfiguration::field_of_view_vertical_)
      - PROTOBUF_FIELD_OFFSET(GenericSensorViewConfiguration, sensor_id_)>(
          reinterpret_cast<char*>(&sensor_id_),
          reinterpret_cast<char*>(&other->sensor_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericSensorViewConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fsensorviewconfiguration_2eproto_getter, &descriptor_table_osi_5fsensorviewconfiguration_2eproto_once,
      file_level_metadata_osi_5fsensorviewconfiguration_2eproto[1]);
}

// ===================================================================

class RadarSensorViewConfiguration_AntennaDiagramEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<RadarSensorViewConfiguration_AntennaDiagramEntry>()._has_bits_);
  static void set_has_horizontal_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vertical_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

RadarSensorViewConfiguration_AntennaDiagramEntry::RadarSensorViewConfiguration_AntennaDiagramEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
}
RadarSensorViewConfiguration_AntennaDiagramEntry::RadarSensorViewConfiguration_AntennaDiagramEntry(const RadarSensorViewConfiguration_AntennaDiagramEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&horizontal_angle_, &from.horizontal_angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&horizontal_angle_)) + sizeof(response_));
  // @@protoc_insertion_point(copy_constructor:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
}

void RadarSensorViewConfiguration_AntennaDiagramEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&horizontal_angle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&horizontal_angle_)) + sizeof(response_));
}

RadarSensorViewConfiguration_AntennaDiagramEntry::~RadarSensorViewConfiguration_AntennaDiagramEntry() {
  // @@protoc_insertion_point(destructor:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RadarSensorViewConfiguration_AntennaDiagramEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RadarSensorViewConfiguration_AntennaDiagramEntry::ArenaDtor(void* object) {
  RadarSensorViewConfiguration_AntennaDiagramEntry* _this = reinterpret_cast< RadarSensorViewConfiguration_AntennaDiagramEntry* >(object);
  (void)_this;
}
void RadarSensorViewConfiguration_AntennaDiagramEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadarSensorViewConfiguration_AntennaDiagramEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RadarSensorViewConfiguration_AntennaDiagramEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&horizontal_angle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&response_) -
        reinterpret_cast<char*>(&horizontal_angle_)) + sizeof(response_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarSensorViewConfiguration_AntennaDiagramEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double horizontal_angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_horizontal_angle(&has_bits);
          horizontal_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double vertical_angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_vertical_angle(&has_bits);
          vertical_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_response(&has_bits);
          response_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarSensorViewConfiguration_AntennaDiagramEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double horizontal_angle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_horizontal_angle(), target);
  }

  // optional double vertical_angle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_vertical_angle(), target);
  }

  // optional double response = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  return target;
}

size_t RadarSensorViewConfiguration_AntennaDiagramEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double horizontal_angle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double vertical_angle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double response = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadarSensorViewConfiguration_AntennaDiagramEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RadarSensorViewConfiguration_AntennaDiagramEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadarSensorViewConfiguration_AntennaDiagramEntry::GetClassData() const { return &_class_data_; }

void RadarSensorViewConfiguration_AntennaDiagramEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RadarSensorViewConfiguration_AntennaDiagramEntry *>(to)->MergeFrom(
      static_cast<const RadarSensorViewConfiguration_AntennaDiagramEntry &>(from));
}


void RadarSensorViewConfiguration_AntennaDiagramEntry::MergeFrom(const RadarSensorViewConfiguration_AntennaDiagramEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      horizontal_angle_ = from.horizontal_angle_;
    }
    if (cached_has_bits & 0x00000002u) {
      vertical_angle_ = from.vertical_angle_;
    }
    if (cached_has_bits & 0x00000004u) {
      response_ = from.response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadarSensorViewConfiguration_AntennaDiagramEntry::CopyFrom(const RadarSensorViewConfiguration_AntennaDiagramEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarSensorViewConfiguration_AntennaDiagramEntry::IsInitialized() const {
  return true;
}

void RadarSensorViewConfiguration_AntennaDiagramEntry::InternalSwap(RadarSensorViewConfiguration_AntennaDiagramEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarSensorViewConfiguration_AntennaDiagramEntry, response_)
      + sizeof(RadarSensorViewConfiguration_AntennaDiagramEntry::response_)
      - PROTOBUF_FIELD_OFFSET(RadarSensorViewConfiguration_AntennaDiagramEntry, horizontal_angle_)>(
          reinterpret_cast<char*>(&horizontal_angle_),
          reinterpret_cast<char*>(&other->horizontal_angle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarSensorViewConfiguration_AntennaDiagramEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fsensorviewconfiguration_2eproto_getter, &descriptor_table_osi_5fsensorviewconfiguration_2eproto_once,
      file_level_metadata_osi_5fsensorviewconfiguration_2eproto[2]);
}

// ===================================================================

class RadarSensorViewConfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<RadarSensorViewConfiguration>()._has_bits_);
  static const ::osi3::Identifier& sensor_id(const RadarSensorViewConfiguration* msg);
  static void set_has_sensor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::MountingPosition& mounting_position(const RadarSensorViewConfiguration* msg);
  static void set_has_mounting_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::MountingPosition& mounting_position_rmse(const RadarSensorViewConfiguration* msg);
  static void set_has_mounting_position_rmse(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_field_of_view_horizontal(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_field_of_view_vertical(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_number_of_rays_horizontal(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_number_of_rays_vertical(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_number_of_interactions(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_emitter_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::osi3::Identifier&
RadarSensorViewConfiguration::_Internal::sensor_id(const RadarSensorViewConfiguration* msg) {
  return *msg->sensor_id_;
}
const ::osi3::MountingPosition&
RadarSensorViewConfiguration::_Internal::mounting_position(const RadarSensorViewConfiguration* msg) {
  return *msg->mounting_position_;
}
const ::osi3::MountingPosition&
RadarSensorViewConfiguration::_Internal::mounting_position_rmse(const RadarSensorViewConfiguration* msg) {
  return *msg->mounting_position_rmse_;
}
void RadarSensorViewConfiguration::clear_sensor_id() {
  if (sensor_id_ != nullptr) sensor_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RadarSensorViewConfiguration::clear_mounting_position() {
  if (mounting_position_ != nullptr) mounting_position_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void RadarSensorViewConfiguration::clear_mounting_position_rmse() {
  if (mounting_position_rmse_ != nullptr) mounting_position_rmse_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
RadarSensorViewConfiguration::RadarSensorViewConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tx_antenna_diagram_(arena),
  rx_antenna_diagram_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.RadarSensorViewConfiguration)
}
RadarSensorViewConfiguration::RadarSensorViewConfiguration(const RadarSensorViewConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tx_antenna_diagram_(from.tx_antenna_diagram_),
      rx_antenna_diagram_(from.rx_antenna_diagram_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sensor_id()) {
    sensor_id_ = new ::osi3::Identifier(*from.sensor_id_);
  } else {
    sensor_id_ = nullptr;
  }
  if (from._internal_has_mounting_position()) {
    mounting_position_ = new ::osi3::MountingPosition(*from.mounting_position_);
  } else {
    mounting_position_ = nullptr;
  }
  if (from._internal_has_mounting_position_rmse()) {
    mounting_position_rmse_ = new ::osi3::MountingPosition(*from.mounting_position_rmse_);
  } else {
    mounting_position_rmse_ = nullptr;
  }
  ::memcpy(&field_of_view_horizontal_, &from.field_of_view_horizontal_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_number_of_interactions_) -
    reinterpret_cast<char*>(&field_of_view_horizontal_)) + sizeof(max_number_of_interactions_));
  // @@protoc_insertion_point(copy_constructor:osi3.RadarSensorViewConfiguration)
}

void RadarSensorViewConfiguration::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sensor_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_number_of_interactions_) -
    reinterpret_cast<char*>(&sensor_id_)) + sizeof(max_number_of_interactions_));
}

RadarSensorViewConfiguration::~RadarSensorViewConfiguration() {
  // @@protoc_insertion_point(destructor:osi3.RadarSensorViewConfiguration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RadarSensorViewConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sensor_id_;
  if (this != internal_default_instance()) delete mounting_position_;
  if (this != internal_default_instance()) delete mounting_position_rmse_;
}

void RadarSensorViewConfiguration::ArenaDtor(void* object) {
  RadarSensorViewConfiguration* _this = reinterpret_cast< RadarSensorViewConfiguration* >(object);
  (void)_this;
}
void RadarSensorViewConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadarSensorViewConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RadarSensorViewConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.RadarSensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_antenna_diagram_.Clear();
  rx_antenna_diagram_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sensor_id_ != nullptr);
      sensor_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(mounting_position_ != nullptr);
      mounting_position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(mounting_position_rmse_ != nullptr);
      mounting_position_rmse_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&field_of_view_horizontal_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&emitter_frequency_) -
        reinterpret_cast<char*>(&field_of_view_horizontal_)) + sizeof(emitter_frequency_));
  }
  max_number_of_interactions_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarSensorViewConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Identifier sensor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sensor_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MountingPosition mounting_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mounting_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MountingPosition mounting_position_rmse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mounting_position_rmse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double field_of_view_horizontal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_field_of_view_horizontal(&has_bits);
          field_of_view_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double field_of_view_vertical = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_field_of_view_vertical(&has_bits);
          field_of_view_vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 number_of_rays_horizontal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_number_of_rays_horizontal(&has_bits);
          number_of_rays_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 number_of_rays_vertical = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_number_of_rays_vertical(&has_bits);
          number_of_rays_vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_number_of_interactions = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_max_number_of_interactions(&has_bits);
          max_number_of_interactions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double emitter_frequency = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_emitter_frequency(&has_bits);
          emitter_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry tx_antenna_diagram = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tx_antenna_diagram(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry rx_antenna_diagram = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rx_antenna_diagram(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarSensorViewConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.RadarSensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.Identifier sensor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sensor_id(this), target, stream);
  }

  // optional .osi3.MountingPosition mounting_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mounting_position(this), target, stream);
  }

  // optional .osi3.MountingPosition mounting_position_rmse = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mounting_position_rmse(this), target, stream);
  }

  // optional double field_of_view_horizontal = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_field_of_view_horizontal(), target);
  }

  // optional double field_of_view_vertical = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_field_of_view_vertical(), target);
  }

  // optional uint32 number_of_rays_horizontal = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_number_of_rays_horizontal(), target);
  }

  // optional uint32 number_of_rays_vertical = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_number_of_rays_vertical(), target);
  }

  // optional uint32 max_number_of_interactions = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_max_number_of_interactions(), target);
  }

  // optional double emitter_frequency = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_emitter_frequency(), target);
  }

  // repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry tx_antenna_diagram = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tx_antenna_diagram_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_tx_antenna_diagram(i), target, stream);
  }

  // repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry rx_antenna_diagram = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rx_antenna_diagram_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_rx_antenna_diagram(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.RadarSensorViewConfiguration)
  return target;
}

size_t RadarSensorViewConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.RadarSensorViewConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry tx_antenna_diagram = 10;
  total_size += 1UL * this->_internal_tx_antenna_diagram_size();
  for (const auto& msg : this->tx_antenna_diagram_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry rx_antenna_diagram = 11;
  total_size += 1UL * this->_internal_rx_antenna_diagram_size();
  for (const auto& msg : this->rx_antenna_diagram_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .osi3.Identifier sensor_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sensor_id_);
    }

    // optional .osi3.MountingPosition mounting_position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mounting_position_);
    }

    // optional .osi3.MountingPosition mounting_position_rmse = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mounting_position_rmse_);
    }

    // optional double field_of_view_horizontal = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double field_of_view_vertical = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 number_of_rays_horizontal = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_rays_horizontal());
    }

    // optional uint32 number_of_rays_vertical = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_rays_vertical());
    }

    // optional double emitter_frequency = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional uint32 max_number_of_interactions = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_number_of_interactions());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadarSensorViewConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RadarSensorViewConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadarSensorViewConfiguration::GetClassData() const { return &_class_data_; }

void RadarSensorViewConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RadarSensorViewConfiguration *>(to)->MergeFrom(
      static_cast<const RadarSensorViewConfiguration &>(from));
}


void RadarSensorViewConfiguration::MergeFrom(const RadarSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.RadarSensorViewConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tx_antenna_diagram_.MergeFrom(from.tx_antenna_diagram_);
  rx_antenna_diagram_.MergeFrom(from.rx_antenna_diagram_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sensor_id()->::osi3::Identifier::MergeFrom(from._internal_sensor_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_mounting_position()->::osi3::MountingPosition::MergeFrom(from._internal_mounting_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_mounting_position_rmse()->::osi3::MountingPosition::MergeFrom(from._internal_mounting_position_rmse());
    }
    if (cached_has_bits & 0x00000008u) {
      field_of_view_horizontal_ = from.field_of_view_horizontal_;
    }
    if (cached_has_bits & 0x00000010u) {
      field_of_view_vertical_ = from.field_of_view_vertical_;
    }
    if (cached_has_bits & 0x00000020u) {
      number_of_rays_horizontal_ = from.number_of_rays_horizontal_;
    }
    if (cached_has_bits & 0x00000040u) {
      number_of_rays_vertical_ = from.number_of_rays_vertical_;
    }
    if (cached_has_bits & 0x00000080u) {
      emitter_frequency_ = from.emitter_frequency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_max_number_of_interactions(from._internal_max_number_of_interactions());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadarSensorViewConfiguration::CopyFrom(const RadarSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.RadarSensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarSensorViewConfiguration::IsInitialized() const {
  return true;
}

void RadarSensorViewConfiguration::InternalSwap(RadarSensorViewConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tx_antenna_diagram_.InternalSwap(&other->tx_antenna_diagram_);
  rx_antenna_diagram_.InternalSwap(&other->rx_antenna_diagram_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarSensorViewConfiguration, max_number_of_interactions_)
      + sizeof(RadarSensorViewConfiguration::max_number_of_interactions_)
      - PROTOBUF_FIELD_OFFSET(RadarSensorViewConfiguration, sensor_id_)>(
          reinterpret_cast<char*>(&sensor_id_),
          reinterpret_cast<char*>(&other->sensor_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarSensorViewConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fsensorviewconfiguration_2eproto_getter, &descriptor_table_osi_5fsensorviewconfiguration_2eproto_once,
      file_level_metadata_osi_5fsensorviewconfiguration_2eproto[3]);
}

// ===================================================================

class LidarSensorViewConfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<LidarSensorViewConfiguration>()._has_bits_);
  static const ::osi3::Identifier& sensor_id(const LidarSensorViewConfiguration* msg);
  static void set_has_sensor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::MountingPosition& mounting_position(const LidarSensorViewConfiguration* msg);
  static void set_has_mounting_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::MountingPosition& mounting_position_rmse(const LidarSensorViewConfiguration* msg);
  static void set_has_mounting_position_rmse(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_field_of_view_horizontal(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_field_of_view_vertical(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_number_of_rays_horizontal(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_number_of_rays_vertical(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_number_of_interactions(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_emitter_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_num_of_pixels(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::osi3::Identifier&
LidarSensorViewConfiguration::_Internal::sensor_id(const LidarSensorViewConfiguration* msg) {
  return *msg->sensor_id_;
}
const ::osi3::MountingPosition&
LidarSensorViewConfiguration::_Internal::mounting_position(const LidarSensorViewConfiguration* msg) {
  return *msg->mounting_position_;
}
const ::osi3::MountingPosition&
LidarSensorViewConfiguration::_Internal::mounting_position_rmse(const LidarSensorViewConfiguration* msg) {
  return *msg->mounting_position_rmse_;
}
void LidarSensorViewConfiguration::clear_sensor_id() {
  if (sensor_id_ != nullptr) sensor_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void LidarSensorViewConfiguration::clear_mounting_position() {
  if (mounting_position_ != nullptr) mounting_position_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void LidarSensorViewConfiguration::clear_mounting_position_rmse() {
  if (mounting_position_rmse_ != nullptr) mounting_position_rmse_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void LidarSensorViewConfiguration::clear_directions() {
  directions_.Clear();
}
LidarSensorViewConfiguration::LidarSensorViewConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  directions_(arena),
  timings_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.LidarSensorViewConfiguration)
}
LidarSensorViewConfiguration::LidarSensorViewConfiguration(const LidarSensorViewConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      directions_(from.directions_),
      timings_(from.timings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sensor_id()) {
    sensor_id_ = new ::osi3::Identifier(*from.sensor_id_);
  } else {
    sensor_id_ = nullptr;
  }
  if (from._internal_has_mounting_position()) {
    mounting_position_ = new ::osi3::MountingPosition(*from.mounting_position_);
  } else {
    mounting_position_ = nullptr;
  }
  if (from._internal_has_mounting_position_rmse()) {
    mounting_position_rmse_ = new ::osi3::MountingPosition(*from.mounting_position_rmse_);
  } else {
    mounting_position_rmse_ = nullptr;
  }
  ::memcpy(&field_of_view_horizontal_, &from.field_of_view_horizontal_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_of_pixels_) -
    reinterpret_cast<char*>(&field_of_view_horizontal_)) + sizeof(num_of_pixels_));
  // @@protoc_insertion_point(copy_constructor:osi3.LidarSensorViewConfiguration)
}

void LidarSensorViewConfiguration::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sensor_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_of_pixels_) -
    reinterpret_cast<char*>(&sensor_id_)) + sizeof(num_of_pixels_));
}

LidarSensorViewConfiguration::~LidarSensorViewConfiguration() {
  // @@protoc_insertion_point(destructor:osi3.LidarSensorViewConfiguration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LidarSensorViewConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sensor_id_;
  if (this != internal_default_instance()) delete mounting_position_;
  if (this != internal_default_instance()) delete mounting_position_rmse_;
}

void LidarSensorViewConfiguration::ArenaDtor(void* object) {
  LidarSensorViewConfiguration* _this = reinterpret_cast< LidarSensorViewConfiguration* >(object);
  (void)_this;
}
void LidarSensorViewConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LidarSensorViewConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LidarSensorViewConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LidarSensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  directions_.Clear();
  timings_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sensor_id_ != nullptr);
      sensor_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(mounting_position_ != nullptr);
      mounting_position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(mounting_position_rmse_ != nullptr);
      mounting_position_rmse_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&field_of_view_horizontal_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&emitter_frequency_) -
        reinterpret_cast<char*>(&field_of_view_horizontal_)) + sizeof(emitter_frequency_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&max_number_of_interactions_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_of_pixels_) -
        reinterpret_cast<char*>(&max_number_of_interactions_)) + sizeof(num_of_pixels_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LidarSensorViewConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Identifier sensor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sensor_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MountingPosition mounting_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mounting_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MountingPosition mounting_position_rmse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mounting_position_rmse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double field_of_view_horizontal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_field_of_view_horizontal(&has_bits);
          field_of_view_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double field_of_view_vertical = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_field_of_view_vertical(&has_bits);
          field_of_view_vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 number_of_rays_horizontal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_number_of_rays_horizontal(&has_bits);
          number_of_rays_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 number_of_rays_vertical = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_number_of_rays_vertical(&has_bits);
          number_of_rays_vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_number_of_interactions = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_max_number_of_interactions(&has_bits);
          max_number_of_interactions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double emitter_frequency = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_emitter_frequency(&has_bits);
          emitter_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_of_pixels = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_num_of_pixels(&has_bits);
          num_of_pixels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Vector3d directions = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_directions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 timings = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_timings(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<96>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_timings(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LidarSensorViewConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LidarSensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.Identifier sensor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sensor_id(this), target, stream);
  }

  // optional .osi3.MountingPosition mounting_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mounting_position(this), target, stream);
  }

  // optional .osi3.MountingPosition mounting_position_rmse = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mounting_position_rmse(this), target, stream);
  }

  // optional double field_of_view_horizontal = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_field_of_view_horizontal(), target);
  }

  // optional double field_of_view_vertical = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_field_of_view_vertical(), target);
  }

  // optional uint32 number_of_rays_horizontal = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_number_of_rays_horizontal(), target);
  }

  // optional uint32 number_of_rays_vertical = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_number_of_rays_vertical(), target);
  }

  // optional uint32 max_number_of_interactions = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_max_number_of_interactions(), target);
  }

  // optional double emitter_frequency = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_emitter_frequency(), target);
  }

  // optional uint32 num_of_pixels = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_num_of_pixels(), target);
  }

  // repeated .osi3.Vector3d directions = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_directions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_directions(i), target, stream);
  }

  // repeated uint32 timings = 12;
  for (int i = 0, n = this->_internal_timings_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_timings(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LidarSensorViewConfiguration)
  return target;
}

size_t LidarSensorViewConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LidarSensorViewConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Vector3d directions = 11;
  total_size += 1UL * this->_internal_directions_size();
  for (const auto& msg : this->directions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 timings = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->timings_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_timings_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .osi3.Identifier sensor_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sensor_id_);
    }

    // optional .osi3.MountingPosition mounting_position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mounting_position_);
    }

    // optional .osi3.MountingPosition mounting_position_rmse = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mounting_position_rmse_);
    }

    // optional double field_of_view_horizontal = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double field_of_view_vertical = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 number_of_rays_horizontal = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_rays_horizontal());
    }

    // optional uint32 number_of_rays_vertical = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_rays_vertical());
    }

    // optional double emitter_frequency = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 max_number_of_interactions = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_number_of_interactions());
    }

    // optional uint32 num_of_pixels = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_of_pixels());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LidarSensorViewConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LidarSensorViewConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LidarSensorViewConfiguration::GetClassData() const { return &_class_data_; }

void LidarSensorViewConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LidarSensorViewConfiguration *>(to)->MergeFrom(
      static_cast<const LidarSensorViewConfiguration &>(from));
}


void LidarSensorViewConfiguration::MergeFrom(const LidarSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LidarSensorViewConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  directions_.MergeFrom(from.directions_);
  timings_.MergeFrom(from.timings_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sensor_id()->::osi3::Identifier::MergeFrom(from._internal_sensor_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_mounting_position()->::osi3::MountingPosition::MergeFrom(from._internal_mounting_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_mounting_position_rmse()->::osi3::MountingPosition::MergeFrom(from._internal_mounting_position_rmse());
    }
    if (cached_has_bits & 0x00000008u) {
      field_of_view_horizontal_ = from.field_of_view_horizontal_;
    }
    if (cached_has_bits & 0x00000010u) {
      field_of_view_vertical_ = from.field_of_view_vertical_;
    }
    if (cached_has_bits & 0x00000020u) {
      number_of_rays_horizontal_ = from.number_of_rays_horizontal_;
    }
    if (cached_has_bits & 0x00000040u) {
      number_of_rays_vertical_ = from.number_of_rays_vertical_;
    }
    if (cached_has_bits & 0x00000080u) {
      emitter_frequency_ = from.emitter_frequency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      max_number_of_interactions_ = from.max_number_of_interactions_;
    }
    if (cached_has_bits & 0x00000200u) {
      num_of_pixels_ = from.num_of_pixels_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LidarSensorViewConfiguration::CopyFrom(const LidarSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LidarSensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarSensorViewConfiguration::IsInitialized() const {
  return true;
}

void LidarSensorViewConfiguration::InternalSwap(LidarSensorViewConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  directions_.InternalSwap(&other->directions_);
  timings_.InternalSwap(&other->timings_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LidarSensorViewConfiguration, num_of_pixels_)
      + sizeof(LidarSensorViewConfiguration::num_of_pixels_)
      - PROTOBUF_FIELD_OFFSET(LidarSensorViewConfiguration, sensor_id_)>(
          reinterpret_cast<char*>(&sensor_id_),
          reinterpret_cast<char*>(&other->sensor_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LidarSensorViewConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fsensorviewconfiguration_2eproto_getter, &descriptor_table_osi_5fsensorviewconfiguration_2eproto_once,
      file_level_metadata_osi_5fsensorviewconfiguration_2eproto[4]);
}

// ===================================================================

class CameraSensorViewConfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraSensorViewConfiguration>()._has_bits_);
  static const ::osi3::Identifier& sensor_id(const CameraSensorViewConfiguration* msg);
  static void set_has_sensor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::MountingPosition& mounting_position(const CameraSensorViewConfiguration* msg);
  static void set_has_mounting_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::MountingPosition& mounting_position_rmse(const CameraSensorViewConfiguration* msg);
  static void set_has_mounting_position_rmse(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_field_of_view_horizontal(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_field_of_view_vertical(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_number_of_pixels_horizontal(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_number_of_pixels_vertical(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_samples_per_pixel(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_max_number_of_interactions(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::osi3::Identifier&
CameraSensorViewConfiguration::_Internal::sensor_id(const CameraSensorViewConfiguration* msg) {
  return *msg->sensor_id_;
}
const ::osi3::MountingPosition&
CameraSensorViewConfiguration::_Internal::mounting_position(const CameraSensorViewConfiguration* msg) {
  return *msg->mounting_position_;
}
const ::osi3::MountingPosition&
CameraSensorViewConfiguration::_Internal::mounting_position_rmse(const CameraSensorViewConfiguration* msg) {
  return *msg->mounting_position_rmse_;
}
void CameraSensorViewConfiguration::clear_sensor_id() {
  if (sensor_id_ != nullptr) sensor_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CameraSensorViewConfiguration::clear_mounting_position() {
  if (mounting_position_ != nullptr) mounting_position_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CameraSensorViewConfiguration::clear_mounting_position_rmse() {
  if (mounting_position_rmse_ != nullptr) mounting_position_rmse_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CameraSensorViewConfiguration::clear_wavelength_data() {
  wavelength_data_.Clear();
}
CameraSensorViewConfiguration::CameraSensorViewConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channel_format_(arena),
  wavelength_data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.CameraSensorViewConfiguration)
}
CameraSensorViewConfiguration::CameraSensorViewConfiguration(const CameraSensorViewConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      channel_format_(from.channel_format_),
      wavelength_data_(from.wavelength_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sensor_id()) {
    sensor_id_ = new ::osi3::Identifier(*from.sensor_id_);
  } else {
    sensor_id_ = nullptr;
  }
  if (from._internal_has_mounting_position()) {
    mounting_position_ = new ::osi3::MountingPosition(*from.mounting_position_);
  } else {
    mounting_position_ = nullptr;
  }
  if (from._internal_has_mounting_position_rmse()) {
    mounting_position_rmse_ = new ::osi3::MountingPosition(*from.mounting_position_rmse_);
  } else {
    mounting_position_rmse_ = nullptr;
  }
  ::memcpy(&field_of_view_horizontal_, &from.field_of_view_horizontal_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_number_of_interactions_) -
    reinterpret_cast<char*>(&field_of_view_horizontal_)) + sizeof(max_number_of_interactions_));
  // @@protoc_insertion_point(copy_constructor:osi3.CameraSensorViewConfiguration)
}

void CameraSensorViewConfiguration::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sensor_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_number_of_interactions_) -
    reinterpret_cast<char*>(&sensor_id_)) + sizeof(max_number_of_interactions_));
}

CameraSensorViewConfiguration::~CameraSensorViewConfiguration() {
  // @@protoc_insertion_point(destructor:osi3.CameraSensorViewConfiguration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CameraSensorViewConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sensor_id_;
  if (this != internal_default_instance()) delete mounting_position_;
  if (this != internal_default_instance()) delete mounting_position_rmse_;
}

void CameraSensorViewConfiguration::ArenaDtor(void* object) {
  CameraSensorViewConfiguration* _this = reinterpret_cast< CameraSensorViewConfiguration* >(object);
  (void)_this;
}
void CameraSensorViewConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraSensorViewConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CameraSensorViewConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.CameraSensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_format_.Clear();
  wavelength_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sensor_id_ != nullptr);
      sensor_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(mounting_position_ != nullptr);
      mounting_position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(mounting_position_rmse_ != nullptr);
      mounting_position_rmse_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&field_of_view_horizontal_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&samples_per_pixel_) -
        reinterpret_cast<char*>(&field_of_view_horizontal_)) + sizeof(samples_per_pixel_));
  }
  max_number_of_interactions_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraSensorViewConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Identifier sensor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sensor_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MountingPosition mounting_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mounting_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MountingPosition mounting_position_rmse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mounting_position_rmse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double field_of_view_horizontal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_field_of_view_horizontal(&has_bits);
          field_of_view_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double field_of_view_vertical = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_field_of_view_vertical(&has_bits);
          field_of_view_vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 number_of_pixels_horizontal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_number_of_pixels_horizontal(&has_bits);
          number_of_pixels_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 number_of_pixels_vertical = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_number_of_pixels_vertical(&has_bits);
          number_of_pixels_vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.CameraSensorViewConfiguration.ChannelFormat channel_format = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::osi3::CameraSensorViewConfiguration_ChannelFormat_IsValid(val))) {
              _internal_add_channel_format(static_cast<::osi3::CameraSensorViewConfiguration_ChannelFormat>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_channel_format(), ptr, ctx, ::osi3::CameraSensorViewConfiguration_ChannelFormat_IsValid, &_internal_metadata_, 8);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 samples_per_pixel = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_samples_per_pixel(&has_bits);
          samples_per_pixel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_number_of_interactions = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_max_number_of_interactions(&has_bits);
          max_number_of_interactions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.WavelengthData wavelength_data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_wavelength_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraSensorViewConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.CameraSensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.Identifier sensor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sensor_id(this), target, stream);
  }

  // optional .osi3.MountingPosition mounting_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mounting_position(this), target, stream);
  }

  // optional .osi3.MountingPosition mounting_position_rmse = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mounting_position_rmse(this), target, stream);
  }

  // optional double field_of_view_horizontal = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_field_of_view_horizontal(), target);
  }

  // optional double field_of_view_vertical = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_field_of_view_vertical(), target);
  }

  // optional uint32 number_of_pixels_horizontal = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_number_of_pixels_horizontal(), target);
  }

  // optional uint32 number_of_pixels_vertical = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_number_of_pixels_vertical(), target);
  }

  // repeated .osi3.CameraSensorViewConfiguration.ChannelFormat channel_format = 8;
  for (int i = 0, n = this->_internal_channel_format_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        8, this->_internal_channel_format(i), target);
  }

  // optional uint32 samples_per_pixel = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_samples_per_pixel(), target);
  }

  // optional uint32 max_number_of_interactions = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_max_number_of_interactions(), target);
  }

  // repeated .osi3.WavelengthData wavelength_data = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_wavelength_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_wavelength_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.CameraSensorViewConfiguration)
  return target;
}

size_t CameraSensorViewConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.CameraSensorViewConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.CameraSensorViewConfiguration.ChannelFormat channel_format = 8;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_channel_format_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_channel_format(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .osi3.WavelengthData wavelength_data = 11;
  total_size += 1UL * this->_internal_wavelength_data_size();
  for (const auto& msg : this->wavelength_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .osi3.Identifier sensor_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sensor_id_);
    }

    // optional .osi3.MountingPosition mounting_position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mounting_position_);
    }

    // optional .osi3.MountingPosition mounting_position_rmse = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mounting_position_rmse_);
    }

    // optional double field_of_view_horizontal = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double field_of_view_vertical = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 number_of_pixels_horizontal = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_pixels_horizontal());
    }

    // optional uint32 number_of_pixels_vertical = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_pixels_vertical());
    }

    // optional uint32 samples_per_pixel = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_samples_per_pixel());
    }

  }
  // optional uint32 max_number_of_interactions = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_number_of_interactions());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraSensorViewConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CameraSensorViewConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraSensorViewConfiguration::GetClassData() const { return &_class_data_; }

void CameraSensorViewConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CameraSensorViewConfiguration *>(to)->MergeFrom(
      static_cast<const CameraSensorViewConfiguration &>(from));
}


void CameraSensorViewConfiguration::MergeFrom(const CameraSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.CameraSensorViewConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_format_.MergeFrom(from.channel_format_);
  wavelength_data_.MergeFrom(from.wavelength_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sensor_id()->::osi3::Identifier::MergeFrom(from._internal_sensor_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_mounting_position()->::osi3::MountingPosition::MergeFrom(from._internal_mounting_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_mounting_position_rmse()->::osi3::MountingPosition::MergeFrom(from._internal_mounting_position_rmse());
    }
    if (cached_has_bits & 0x00000008u) {
      field_of_view_horizontal_ = from.field_of_view_horizontal_;
    }
    if (cached_has_bits & 0x00000010u) {
      field_of_view_vertical_ = from.field_of_view_vertical_;
    }
    if (cached_has_bits & 0x00000020u) {
      number_of_pixels_horizontal_ = from.number_of_pixels_horizontal_;
    }
    if (cached_has_bits & 0x00000040u) {
      number_of_pixels_vertical_ = from.number_of_pixels_vertical_;
    }
    if (cached_has_bits & 0x00000080u) {
      samples_per_pixel_ = from.samples_per_pixel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_max_number_of_interactions(from._internal_max_number_of_interactions());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraSensorViewConfiguration::CopyFrom(const CameraSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.CameraSensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraSensorViewConfiguration::IsInitialized() const {
  return true;
}

void CameraSensorViewConfiguration::InternalSwap(CameraSensorViewConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  channel_format_.InternalSwap(&other->channel_format_);
  wavelength_data_.InternalSwap(&other->wavelength_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraSensorViewConfiguration, max_number_of_interactions_)
      + sizeof(CameraSensorViewConfiguration::max_number_of_interactions_)
      - PROTOBUF_FIELD_OFFSET(CameraSensorViewConfiguration, sensor_id_)>(
          reinterpret_cast<char*>(&sensor_id_),
          reinterpret_cast<char*>(&other->sensor_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraSensorViewConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fsensorviewconfiguration_2eproto_getter, &descriptor_table_osi_5fsensorviewconfiguration_2eproto_once,
      file_level_metadata_osi_5fsensorviewconfiguration_2eproto[5]);
}

// ===================================================================

class UltrasonicSensorViewConfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<UltrasonicSensorViewConfiguration>()._has_bits_);
  static const ::osi3::Identifier& sensor_id(const UltrasonicSensorViewConfiguration* msg);
  static void set_has_sensor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::MountingPosition& mounting_position(const UltrasonicSensorViewConfiguration* msg);
  static void set_has_mounting_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::MountingPosition& mounting_position_rmse(const UltrasonicSensorViewConfiguration* msg);
  static void set_has_mounting_position_rmse(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_field_of_view_horizontal(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_field_of_view_vertical(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::osi3::Identifier&
UltrasonicSensorViewConfiguration::_Internal::sensor_id(const UltrasonicSensorViewConfiguration* msg) {
  return *msg->sensor_id_;
}
const ::osi3::MountingPosition&
UltrasonicSensorViewConfiguration::_Internal::mounting_position(const UltrasonicSensorViewConfiguration* msg) {
  return *msg->mounting_position_;
}
const ::osi3::MountingPosition&
UltrasonicSensorViewConfiguration::_Internal::mounting_position_rmse(const UltrasonicSensorViewConfiguration* msg) {
  return *msg->mounting_position_rmse_;
}
void UltrasonicSensorViewConfiguration::clear_sensor_id() {
  if (sensor_id_ != nullptr) sensor_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void UltrasonicSensorViewConfiguration::clear_mounting_position() {
  if (mounting_position_ != nullptr) mounting_position_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void UltrasonicSensorViewConfiguration::clear_mounting_position_rmse() {
  if (mounting_position_rmse_ != nullptr) mounting_position_rmse_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
UltrasonicSensorViewConfiguration::UltrasonicSensorViewConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.UltrasonicSensorViewConfiguration)
}
UltrasonicSensorViewConfiguration::UltrasonicSensorViewConfiguration(const UltrasonicSensorViewConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sensor_id()) {
    sensor_id_ = new ::osi3::Identifier(*from.sensor_id_);
  } else {
    sensor_id_ = nullptr;
  }
  if (from._internal_has_mounting_position()) {
    mounting_position_ = new ::osi3::MountingPosition(*from.mounting_position_);
  } else {
    mounting_position_ = nullptr;
  }
  if (from._internal_has_mounting_position_rmse()) {
    mounting_position_rmse_ = new ::osi3::MountingPosition(*from.mounting_position_rmse_);
  } else {
    mounting_position_rmse_ = nullptr;
  }
  ::memcpy(&field_of_view_horizontal_, &from.field_of_view_horizontal_,
    static_cast<size_t>(reinterpret_cast<char*>(&field_of_view_vertical_) -
    reinterpret_cast<char*>(&field_of_view_horizontal_)) + sizeof(field_of_view_vertical_));
  // @@protoc_insertion_point(copy_constructor:osi3.UltrasonicSensorViewConfiguration)
}

void UltrasonicSensorViewConfiguration::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sensor_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&field_of_view_vertical_) -
    reinterpret_cast<char*>(&sensor_id_)) + sizeof(field_of_view_vertical_));
}

UltrasonicSensorViewConfiguration::~UltrasonicSensorViewConfiguration() {
  // @@protoc_insertion_point(destructor:osi3.UltrasonicSensorViewConfiguration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UltrasonicSensorViewConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sensor_id_;
  if (this != internal_default_instance()) delete mounting_position_;
  if (this != internal_default_instance()) delete mounting_position_rmse_;
}

void UltrasonicSensorViewConfiguration::ArenaDtor(void* object) {
  UltrasonicSensorViewConfiguration* _this = reinterpret_cast< UltrasonicSensorViewConfiguration* >(object);
  (void)_this;
}
void UltrasonicSensorViewConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UltrasonicSensorViewConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UltrasonicSensorViewConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.UltrasonicSensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sensor_id_ != nullptr);
      sensor_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(mounting_position_ != nullptr);
      mounting_position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(mounting_position_rmse_ != nullptr);
      mounting_position_rmse_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&field_of_view_horizontal_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&field_of_view_vertical_) -
        reinterpret_cast<char*>(&field_of_view_horizontal_)) + sizeof(field_of_view_vertical_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UltrasonicSensorViewConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Identifier sensor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sensor_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MountingPosition mounting_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mounting_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MountingPosition mounting_position_rmse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mounting_position_rmse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double field_of_view_horizontal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_field_of_view_horizontal(&has_bits);
          field_of_view_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double field_of_view_vertical = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_field_of_view_vertical(&has_bits);
          field_of_view_vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UltrasonicSensorViewConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.UltrasonicSensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.Identifier sensor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sensor_id(this), target, stream);
  }

  // optional .osi3.MountingPosition mounting_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mounting_position(this), target, stream);
  }

  // optional .osi3.MountingPosition mounting_position_rmse = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mounting_position_rmse(this), target, stream);
  }

  // optional double field_of_view_horizontal = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_field_of_view_horizontal(), target);
  }

  // optional double field_of_view_vertical = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_field_of_view_vertical(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.UltrasonicSensorViewConfiguration)
  return target;
}

size_t UltrasonicSensorViewConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.UltrasonicSensorViewConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .osi3.Identifier sensor_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sensor_id_);
    }

    // optional .osi3.MountingPosition mounting_position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mounting_position_);
    }

    // optional .osi3.MountingPosition mounting_position_rmse = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mounting_position_rmse_);
    }

    // optional double field_of_view_horizontal = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double field_of_view_vertical = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UltrasonicSensorViewConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UltrasonicSensorViewConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UltrasonicSensorViewConfiguration::GetClassData() const { return &_class_data_; }

void UltrasonicSensorViewConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UltrasonicSensorViewConfiguration *>(to)->MergeFrom(
      static_cast<const UltrasonicSensorViewConfiguration &>(from));
}


void UltrasonicSensorViewConfiguration::MergeFrom(const UltrasonicSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.UltrasonicSensorViewConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sensor_id()->::osi3::Identifier::MergeFrom(from._internal_sensor_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_mounting_position()->::osi3::MountingPosition::MergeFrom(from._internal_mounting_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_mounting_position_rmse()->::osi3::MountingPosition::MergeFrom(from._internal_mounting_position_rmse());
    }
    if (cached_has_bits & 0x00000008u) {
      field_of_view_horizontal_ = from.field_of_view_horizontal_;
    }
    if (cached_has_bits & 0x00000010u) {
      field_of_view_vertical_ = from.field_of_view_vertical_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UltrasonicSensorViewConfiguration::CopyFrom(const UltrasonicSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.UltrasonicSensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltrasonicSensorViewConfiguration::IsInitialized() const {
  return true;
}

void UltrasonicSensorViewConfiguration::InternalSwap(UltrasonicSensorViewConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UltrasonicSensorViewConfiguration, field_of_view_vertical_)
      + sizeof(UltrasonicSensorViewConfiguration::field_of_view_vertical_)
      - PROTOBUF_FIELD_OFFSET(UltrasonicSensorViewConfiguration, sensor_id_)>(
          reinterpret_cast<char*>(&sensor_id_),
          reinterpret_cast<char*>(&other->sensor_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UltrasonicSensorViewConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fsensorviewconfiguration_2eproto_getter, &descriptor_table_osi_5fsensorviewconfiguration_2eproto_once,
      file_level_metadata_osi_5fsensorviewconfiguration_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::SensorViewConfiguration* Arena::CreateMaybeMessage< ::osi3::SensorViewConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::SensorViewConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::GenericSensorViewConfiguration* Arena::CreateMaybeMessage< ::osi3::GenericSensorViewConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::GenericSensorViewConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry* Arena::CreateMaybeMessage< ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::RadarSensorViewConfiguration* Arena::CreateMaybeMessage< ::osi3::RadarSensorViewConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::RadarSensorViewConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::LidarSensorViewConfiguration* Arena::CreateMaybeMessage< ::osi3::LidarSensorViewConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::LidarSensorViewConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::CameraSensorViewConfiguration* Arena::CreateMaybeMessage< ::osi3::CameraSensorViewConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::CameraSensorViewConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::UltrasonicSensorViewConfiguration* Arena::CreateMaybeMessage< ::osi3::UltrasonicSensorViewConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::UltrasonicSensorViewConfiguration >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
