// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_detectedobject.proto

#include "osi_detectedobject.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace osi3 {
constexpr DetectedItemHeader::DetectedItemHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ground_truth_id_()
  , sensor_id_()
  , tracking_id_(nullptr)
  , existence_probability_(0)
  , age_(0)
  , measurement_state_(0)
{}
struct DetectedItemHeaderDefaultTypeInternal {
  constexpr DetectedItemHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DetectedItemHeaderDefaultTypeInternal() {}
  union {
    DetectedItemHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DetectedItemHeaderDefaultTypeInternal _DetectedItemHeader_default_instance_;
constexpr DetectedStationaryObject_CandidateStationaryObject::DetectedStationaryObject_CandidateStationaryObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : classification_(nullptr)
  , probability_(0){}
struct DetectedStationaryObject_CandidateStationaryObjectDefaultTypeInternal {
  constexpr DetectedStationaryObject_CandidateStationaryObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DetectedStationaryObject_CandidateStationaryObjectDefaultTypeInternal() {}
  union {
    DetectedStationaryObject_CandidateStationaryObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DetectedStationaryObject_CandidateStationaryObjectDefaultTypeInternal _DetectedStationaryObject_CandidateStationaryObject_default_instance_;
constexpr DetectedStationaryObject::DetectedStationaryObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : candidate_()
  , header_(nullptr)
  , base_(nullptr)
  , base_rmse_(nullptr)
  , color_description_(nullptr){}
struct DetectedStationaryObjectDefaultTypeInternal {
  constexpr DetectedStationaryObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DetectedStationaryObjectDefaultTypeInternal() {}
  union {
    DetectedStationaryObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DetectedStationaryObjectDefaultTypeInternal _DetectedStationaryObject_default_instance_;
constexpr DetectedMovingObject_CandidateMovingObject::DetectedMovingObject_CandidateMovingObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vehicle_classification_(nullptr)
  , head_pose_(nullptr)
  , upper_body_pose_(nullptr)
  , moving_object_classification_(nullptr)
  , probability_(0)
  , type_(0)
{}
struct DetectedMovingObject_CandidateMovingObjectDefaultTypeInternal {
  constexpr DetectedMovingObject_CandidateMovingObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DetectedMovingObject_CandidateMovingObjectDefaultTypeInternal() {}
  union {
    DetectedMovingObject_CandidateMovingObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DetectedMovingObject_CandidateMovingObjectDefaultTypeInternal _DetectedMovingObject_CandidateMovingObject_default_instance_;
constexpr DetectedMovingObject::DetectedMovingObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : candidate_()
  , header_(nullptr)
  , base_(nullptr)
  , base_rmse_(nullptr)
  , color_description_(nullptr)
  , radar_specifics_(nullptr)
  , lidar_specifics_(nullptr)
  , camera_specifics_(nullptr)
  , ultrasonic_specifics_(nullptr)
  , reference_point_(0)

  , movement_state_(0)

  , percentage_side_lane_left_(0)
  , percentage_side_lane_right_(0){}
struct DetectedMovingObjectDefaultTypeInternal {
  constexpr DetectedMovingObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DetectedMovingObjectDefaultTypeInternal() {}
  union {
    DetectedMovingObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DetectedMovingObjectDefaultTypeInternal _DetectedMovingObject_default_instance_;
}  // namespace osi3
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5fdetectedobject_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_osi_5fdetectedobject_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5fdetectedobject_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5fdetectedobject_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedItemHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedItemHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedItemHeader, tracking_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedItemHeader, ground_truth_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedItemHeader, existence_probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedItemHeader, age_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedItemHeader, measurement_state_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedItemHeader, sensor_id_),
  0,
  ~0u,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedStationaryObject_CandidateStationaryObject, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedStationaryObject_CandidateStationaryObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedStationaryObject_CandidateStationaryObject, probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedStationaryObject_CandidateStationaryObject, classification_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedStationaryObject, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedStationaryObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedStationaryObject, header_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedStationaryObject, base_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedStationaryObject, base_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedStationaryObject, candidate_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedStationaryObject, color_description_),
  0,
  1,
  2,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject_CandidateMovingObject, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject_CandidateMovingObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject_CandidateMovingObject, probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject_CandidateMovingObject, type_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject_CandidateMovingObject, vehicle_classification_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject_CandidateMovingObject, head_pose_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject_CandidateMovingObject, upper_body_pose_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject_CandidateMovingObject, moving_object_classification_),
  4,
  5,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject, header_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject, base_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject, base_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject, reference_point_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject, movement_state_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject, percentage_side_lane_left_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject, percentage_side_lane_right_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject, candidate_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject, color_description_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject, radar_specifics_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject, lidar_specifics_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject, camera_specifics_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject, ultrasonic_specifics_),
  0,
  1,
  2,
  8,
  9,
  10,
  11,
  ~0u,
  3,
  4,
  5,
  6,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::osi3::DetectedItemHeader)},
  { 18, 26, -1, sizeof(::osi3::DetectedStationaryObject_CandidateStationaryObject)},
  { 28, 39, -1, sizeof(::osi3::DetectedStationaryObject)},
  { 44, 56, -1, sizeof(::osi3::DetectedMovingObject_CandidateMovingObject)},
  { 62, 81, -1, sizeof(::osi3::DetectedMovingObject)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_DetectedItemHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_DetectedStationaryObject_CandidateStationaryObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_DetectedStationaryObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_DetectedMovingObject_CandidateMovingObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_DetectedMovingObject_default_instance_),
};

const char descriptor_table_protodef_osi_5fdetectedobject_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030osi_detectedobject.proto\022\004osi3\032\020osi_co"
  "mmon.proto\032\020osi_object.proto\032\030osi_sensor"
  "specific.proto\"\217\003\n\022DetectedItemHeader\022%\n"
  "\013tracking_id\030\001 \001(\0132\020.osi3.Identifier\022)\n\017"
  "ground_truth_id\030\002 \003(\0132\020.osi3.Identifier\022"
  "\035\n\025existence_probability\030\003 \001(\001\022\013\n\003age\030\004 "
  "\001(\001\022D\n\021measurement_state\030\005 \001(\0162).osi3.De"
  "tectedItemHeader.MeasurementState\022#\n\tsen"
  "sor_id\030\006 \003(\0132\020.osi3.Identifier\"\217\001\n\020Measu"
  "rementState\022\035\n\031MEASUREMENT_STATE_UNKNOWN"
  "\020\000\022\033\n\027MEASUREMENT_STATE_OTHER\020\001\022\036\n\032MEASU"
  "REMENT_STATE_MEASURED\020\002\022\037\n\033MEASUREMENT_S"
  "TATE_PREDICTED\020\003\"\202\003\n\030DetectedStationaryO"
  "bject\022(\n\006header\030\001 \001(\0132\030.osi3.DetectedIte"
  "mHeader\022\"\n\004base\030\002 \001(\0132\024.osi3.BaseStation"
  "ary\022\'\n\tbase_rmse\030\003 \001(\0132\024.osi3.BaseStatio"
  "nary\022K\n\tcandidate\030\004 \003(\01328.osi3.DetectedS"
  "tationaryObject.CandidateStationaryObjec"
  "t\0221\n\021color_description\030\005 \001(\0132\026.osi3.Colo"
  "rDescription\032o\n\031CandidateStationaryObjec"
  "t\022\023\n\013probability\030\001 \001(\001\022=\n\016classification"
  "\030\002 \001(\0132%.osi3.StationaryObject.Classific"
  "ation\"\214\014\n\024DetectedMovingObject\022(\n\006header"
  "\030\001 \001(\0132\030.osi3.DetectedItemHeader\022\036\n\004base"
  "\030\002 \001(\0132\020.osi3.BaseMoving\022#\n\tbase_rmse\030\003 "
  "\001(\0132\020.osi3.BaseMoving\022B\n\017reference_point"
  "\030\004 \001(\0162).osi3.DetectedMovingObject.Refer"
  "encePoint\022@\n\016movement_state\030\005 \001(\0162(.osi3"
  ".DetectedMovingObject.MovementState\022!\n\031p"
  "ercentage_side_lane_left\030\006 \001(\001\022\"\n\032percen"
  "tage_side_lane_right\030\007 \001(\001\022C\n\tcandidate\030"
  "\010 \003(\01320.osi3.DetectedMovingObject.Candid"
  "ateMovingObject\0221\n\021color_description\030\t \001"
  "(\0132\026.osi3.ColorDescription\0226\n\017radar_spec"
  "ifics\030d \001(\0132\035.osi3.RadarSpecificObjectDa"
  "ta\0226\n\017lidar_specifics\030e \001(\0132\035.osi3.Lidar"
  "SpecificObjectData\0228\n\020camera_specifics\030f"
  " \001(\0132\036.osi3.CameraSpecificObjectData\022@\n\024"
  "ultrasonic_specifics\030g \001(\0132\".osi3.Ultras"
  "onicSpecificObjectData\032\310\002\n\025CandidateMovi"
  "ngObject\022\023\n\013probability\030\001 \001(\001\022%\n\004type\030\002 "
  "\001(\0162\027.osi3.MovingObject.Type\022H\n\026vehicle_"
  "classification\030\003 \001(\0132(.osi3.MovingObject"
  ".VehicleClassification\022&\n\thead_pose\030\004 \001("
  "\0132\023.osi3.Orientation3d\022,\n\017upper_body_pos"
  "e\030\005 \001(\0132\023.osi3.Orientation3d\022S\n\034moving_o"
  "bject_classification\030\006 \001(\0132-.osi3.Moving"
  "Object.MovingObjectClassification\"\352\002\n\016Re"
  "ferencePoint\022\033\n\027REFERENCE_POINT_UNKNOWN\020"
  "\000\022\031\n\025REFERENCE_POINT_OTHER\020\001\022\032\n\026REFERENC"
  "E_POINT_CENTER\020\002\022\037\n\033REFERENCE_POINT_MIDD"
  "LE_LEFT\020\003\022 \n\034REFERENCE_POINT_MIDDLE_RIGH"
  "T\020\004\022\037\n\033REFERENCE_POINT_REAR_MIDDLE\020\005\022\035\n\031"
  "REFERENCE_POINT_REAR_LEFT\020\006\022\036\n\032REFERENCE"
  "_POINT_REAR_RIGHT\020\007\022 \n\034REFERENCE_POINT_F"
  "RONT_MIDDLE\020\010\022\036\n\032REFERENCE_POINT_FRONT_L"
  "EFT\020\t\022\037\n\033REFERENCE_POINT_FRONT_RIGHT\020\n\"\233"
  "\001\n\rMovementState\022\032\n\026MOVEMENT_STATE_UNKNO"
  "WN\020\000\022\030\n\024MOVEMENT_STATE_OTHER\020\001\022\035\n\031MOVEME"
  "NT_STATE_STATIONARY\020\002\022\031\n\025MOVEMENT_STATE_"
  "MOVING\020\003\022\032\n\026MOVEMENT_STATE_STOPPED\020\004B\002H\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5fdetectedobject_2eproto_deps[3] = {
  &::descriptor_table_osi_5fcommon_2eproto,
  &::descriptor_table_osi_5fobject_2eproto,
  &::descriptor_table_osi_5fsensorspecific_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5fdetectedobject_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fdetectedobject_2eproto = {
  false, false, 2440, descriptor_table_protodef_osi_5fdetectedobject_2eproto, "osi_detectedobject.proto", 
  &descriptor_table_osi_5fdetectedobject_2eproto_once, descriptor_table_osi_5fdetectedobject_2eproto_deps, 3, 5,
  schemas, file_default_instances, TableStruct_osi_5fdetectedobject_2eproto::offsets,
  file_level_metadata_osi_5fdetectedobject_2eproto, file_level_enum_descriptors_osi_5fdetectedobject_2eproto, file_level_service_descriptors_osi_5fdetectedobject_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_osi_5fdetectedobject_2eproto_getter() {
  return &descriptor_table_osi_5fdetectedobject_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_osi_5fdetectedobject_2eproto(&descriptor_table_osi_5fdetectedobject_2eproto);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DetectedItemHeader_MeasurementState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fdetectedobject_2eproto);
  return file_level_enum_descriptors_osi_5fdetectedobject_2eproto[0];
}
bool DetectedItemHeader_MeasurementState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DetectedItemHeader_MeasurementState DetectedItemHeader::MEASUREMENT_STATE_UNKNOWN;
constexpr DetectedItemHeader_MeasurementState DetectedItemHeader::MEASUREMENT_STATE_OTHER;
constexpr DetectedItemHeader_MeasurementState DetectedItemHeader::MEASUREMENT_STATE_MEASURED;
constexpr DetectedItemHeader_MeasurementState DetectedItemHeader::MEASUREMENT_STATE_PREDICTED;
constexpr DetectedItemHeader_MeasurementState DetectedItemHeader::MeasurementState_MIN;
constexpr DetectedItemHeader_MeasurementState DetectedItemHeader::MeasurementState_MAX;
constexpr int DetectedItemHeader::MeasurementState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DetectedMovingObject_ReferencePoint_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fdetectedobject_2eproto);
  return file_level_enum_descriptors_osi_5fdetectedobject_2eproto[1];
}
bool DetectedMovingObject_ReferencePoint_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_UNKNOWN;
constexpr DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_OTHER;
constexpr DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_CENTER;
constexpr DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_MIDDLE_LEFT;
constexpr DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_MIDDLE_RIGHT;
constexpr DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_REAR_MIDDLE;
constexpr DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_REAR_LEFT;
constexpr DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_REAR_RIGHT;
constexpr DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_FRONT_MIDDLE;
constexpr DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_FRONT_LEFT;
constexpr DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_FRONT_RIGHT;
constexpr DetectedMovingObject_ReferencePoint DetectedMovingObject::ReferencePoint_MIN;
constexpr DetectedMovingObject_ReferencePoint DetectedMovingObject::ReferencePoint_MAX;
constexpr int DetectedMovingObject::ReferencePoint_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DetectedMovingObject_MovementState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fdetectedobject_2eproto);
  return file_level_enum_descriptors_osi_5fdetectedobject_2eproto[2];
}
bool DetectedMovingObject_MovementState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DetectedMovingObject_MovementState DetectedMovingObject::MOVEMENT_STATE_UNKNOWN;
constexpr DetectedMovingObject_MovementState DetectedMovingObject::MOVEMENT_STATE_OTHER;
constexpr DetectedMovingObject_MovementState DetectedMovingObject::MOVEMENT_STATE_STATIONARY;
constexpr DetectedMovingObject_MovementState DetectedMovingObject::MOVEMENT_STATE_MOVING;
constexpr DetectedMovingObject_MovementState DetectedMovingObject::MOVEMENT_STATE_STOPPED;
constexpr DetectedMovingObject_MovementState DetectedMovingObject::MovementState_MIN;
constexpr DetectedMovingObject_MovementState DetectedMovingObject::MovementState_MAX;
constexpr int DetectedMovingObject::MovementState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class DetectedItemHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<DetectedItemHeader>()._has_bits_);
  static const ::osi3::Identifier& tracking_id(const DetectedItemHeader* msg);
  static void set_has_tracking_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_existence_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_age(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_measurement_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::osi3::Identifier&
DetectedItemHeader::_Internal::tracking_id(const DetectedItemHeader* msg) {
  return *msg->tracking_id_;
}
void DetectedItemHeader::clear_tracking_id() {
  if (tracking_id_ != nullptr) tracking_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void DetectedItemHeader::clear_ground_truth_id() {
  ground_truth_id_.Clear();
}
void DetectedItemHeader::clear_sensor_id() {
  sensor_id_.Clear();
}
DetectedItemHeader::DetectedItemHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ground_truth_id_(arena),
  sensor_id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.DetectedItemHeader)
}
DetectedItemHeader::DetectedItemHeader(const DetectedItemHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ground_truth_id_(from.ground_truth_id_),
      sensor_id_(from.sensor_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tracking_id()) {
    tracking_id_ = new ::osi3::Identifier(*from.tracking_id_);
  } else {
    tracking_id_ = nullptr;
  }
  ::memcpy(&existence_probability_, &from.existence_probability_,
    static_cast<size_t>(reinterpret_cast<char*>(&measurement_state_) -
    reinterpret_cast<char*>(&existence_probability_)) + sizeof(measurement_state_));
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedItemHeader)
}

void DetectedItemHeader::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tracking_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&measurement_state_) -
    reinterpret_cast<char*>(&tracking_id_)) + sizeof(measurement_state_));
}

DetectedItemHeader::~DetectedItemHeader() {
  // @@protoc_insertion_point(destructor:osi3.DetectedItemHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DetectedItemHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete tracking_id_;
}

void DetectedItemHeader::ArenaDtor(void* object) {
  DetectedItemHeader* _this = reinterpret_cast< DetectedItemHeader* >(object);
  (void)_this;
}
void DetectedItemHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetectedItemHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DetectedItemHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedItemHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ground_truth_id_.Clear();
  sensor_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(tracking_id_ != nullptr);
    tracking_id_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&existence_probability_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&measurement_state_) -
        reinterpret_cast<char*>(&existence_probability_)) + sizeof(measurement_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectedItemHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Identifier tracking_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tracking_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Identifier ground_truth_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ground_truth_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional double existence_probability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_existence_probability(&has_bits);
          existence_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double age = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_age(&has_bits);
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.DetectedItemHeader.MeasurementState measurement_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::DetectedItemHeader_MeasurementState_IsValid(val))) {
            _internal_set_measurement_state(static_cast<::osi3::DetectedItemHeader_MeasurementState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Identifier sensor_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sensor_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectedItemHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedItemHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.Identifier tracking_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tracking_id(this), target, stream);
  }

  // repeated .osi3.Identifier ground_truth_id = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ground_truth_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_ground_truth_id(i), target, stream);
  }

  // optional double existence_probability = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_existence_probability(), target);
  }

  // optional double age = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_age(), target);
  }

  // optional .osi3.DetectedItemHeader.MeasurementState measurement_state = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_measurement_state(), target);
  }

  // repeated .osi3.Identifier sensor_id = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sensor_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_sensor_id(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedItemHeader)
  return target;
}

size_t DetectedItemHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedItemHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Identifier ground_truth_id = 2;
  total_size += 1UL * this->_internal_ground_truth_id_size();
  for (const auto& msg : this->ground_truth_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.Identifier sensor_id = 6;
  total_size += 1UL * this->_internal_sensor_id_size();
  for (const auto& msg : this->sensor_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .osi3.Identifier tracking_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tracking_id_);
    }

    // optional double existence_probability = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double age = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .osi3.DetectedItemHeader.MeasurementState measurement_state = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_measurement_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectedItemHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DetectedItemHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectedItemHeader::GetClassData() const { return &_class_data_; }

void DetectedItemHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DetectedItemHeader *>(to)->MergeFrom(
      static_cast<const DetectedItemHeader &>(from));
}


void DetectedItemHeader::MergeFrom(const DetectedItemHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedItemHeader)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ground_truth_id_.MergeFrom(from.ground_truth_id_);
  sensor_id_.MergeFrom(from.sensor_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tracking_id()->::osi3::Identifier::MergeFrom(from._internal_tracking_id());
    }
    if (cached_has_bits & 0x00000002u) {
      existence_probability_ = from.existence_probability_;
    }
    if (cached_has_bits & 0x00000004u) {
      age_ = from.age_;
    }
    if (cached_has_bits & 0x00000008u) {
      measurement_state_ = from.measurement_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectedItemHeader::CopyFrom(const DetectedItemHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedItemHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedItemHeader::IsInitialized() const {
  return true;
}

void DetectedItemHeader::InternalSwap(DetectedItemHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ground_truth_id_.InternalSwap(&other->ground_truth_id_);
  sensor_id_.InternalSwap(&other->sensor_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectedItemHeader, measurement_state_)
      + sizeof(DetectedItemHeader::measurement_state_)
      - PROTOBUF_FIELD_OFFSET(DetectedItemHeader, tracking_id_)>(
          reinterpret_cast<char*>(&tracking_id_),
          reinterpret_cast<char*>(&other->tracking_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedItemHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fdetectedobject_2eproto_getter, &descriptor_table_osi_5fdetectedobject_2eproto_once,
      file_level_metadata_osi_5fdetectedobject_2eproto[0]);
}

// ===================================================================

class DetectedStationaryObject_CandidateStationaryObject::_Internal {
 public:
  using HasBits = decltype(std::declval<DetectedStationaryObject_CandidateStationaryObject>()._has_bits_);
  static void set_has_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::StationaryObject_Classification& classification(const DetectedStationaryObject_CandidateStationaryObject* msg);
  static void set_has_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osi3::StationaryObject_Classification&
DetectedStationaryObject_CandidateStationaryObject::_Internal::classification(const DetectedStationaryObject_CandidateStationaryObject* msg) {
  return *msg->classification_;
}
void DetectedStationaryObject_CandidateStationaryObject::clear_classification() {
  if (classification_ != nullptr) classification_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
DetectedStationaryObject_CandidateStationaryObject::DetectedStationaryObject_CandidateStationaryObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.DetectedStationaryObject.CandidateStationaryObject)
}
DetectedStationaryObject_CandidateStationaryObject::DetectedStationaryObject_CandidateStationaryObject(const DetectedStationaryObject_CandidateStationaryObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_classification()) {
    classification_ = new ::osi3::StationaryObject_Classification(*from.classification_);
  } else {
    classification_ = nullptr;
  }
  probability_ = from.probability_;
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedStationaryObject.CandidateStationaryObject)
}

void DetectedStationaryObject_CandidateStationaryObject::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&classification_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&probability_) -
    reinterpret_cast<char*>(&classification_)) + sizeof(probability_));
}

DetectedStationaryObject_CandidateStationaryObject::~DetectedStationaryObject_CandidateStationaryObject() {
  // @@protoc_insertion_point(destructor:osi3.DetectedStationaryObject.CandidateStationaryObject)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DetectedStationaryObject_CandidateStationaryObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete classification_;
}

void DetectedStationaryObject_CandidateStationaryObject::ArenaDtor(void* object) {
  DetectedStationaryObject_CandidateStationaryObject* _this = reinterpret_cast< DetectedStationaryObject_CandidateStationaryObject* >(object);
  (void)_this;
}
void DetectedStationaryObject_CandidateStationaryObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetectedStationaryObject_CandidateStationaryObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DetectedStationaryObject_CandidateStationaryObject::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedStationaryObject.CandidateStationaryObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(classification_ != nullptr);
    classification_->Clear();
  }
  probability_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectedStationaryObject_CandidateStationaryObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_probability(&has_bits);
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.StationaryObject.Classification classification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_classification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectedStationaryObject_CandidateStationaryObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedStationaryObject.CandidateStationaryObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_probability(), target);
  }

  // optional .osi3.StationaryObject.Classification classification = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::classification(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedStationaryObject.CandidateStationaryObject)
  return target;
}

size_t DetectedStationaryObject_CandidateStationaryObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedStationaryObject.CandidateStationaryObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .osi3.StationaryObject.Classification classification = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *classification_);
    }

    // optional double probability = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectedStationaryObject_CandidateStationaryObject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DetectedStationaryObject_CandidateStationaryObject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectedStationaryObject_CandidateStationaryObject::GetClassData() const { return &_class_data_; }

void DetectedStationaryObject_CandidateStationaryObject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DetectedStationaryObject_CandidateStationaryObject *>(to)->MergeFrom(
      static_cast<const DetectedStationaryObject_CandidateStationaryObject &>(from));
}


void DetectedStationaryObject_CandidateStationaryObject::MergeFrom(const DetectedStationaryObject_CandidateStationaryObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedStationaryObject.CandidateStationaryObject)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_classification()->::osi3::StationaryObject_Classification::MergeFrom(from._internal_classification());
    }
    if (cached_has_bits & 0x00000002u) {
      probability_ = from.probability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectedStationaryObject_CandidateStationaryObject::CopyFrom(const DetectedStationaryObject_CandidateStationaryObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedStationaryObject.CandidateStationaryObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedStationaryObject_CandidateStationaryObject::IsInitialized() const {
  return true;
}

void DetectedStationaryObject_CandidateStationaryObject::InternalSwap(DetectedStationaryObject_CandidateStationaryObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectedStationaryObject_CandidateStationaryObject, probability_)
      + sizeof(DetectedStationaryObject_CandidateStationaryObject::probability_)
      - PROTOBUF_FIELD_OFFSET(DetectedStationaryObject_CandidateStationaryObject, classification_)>(
          reinterpret_cast<char*>(&classification_),
          reinterpret_cast<char*>(&other->classification_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedStationaryObject_CandidateStationaryObject::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fdetectedobject_2eproto_getter, &descriptor_table_osi_5fdetectedobject_2eproto_once,
      file_level_metadata_osi_5fdetectedobject_2eproto[1]);
}

// ===================================================================

class DetectedStationaryObject::_Internal {
 public:
  using HasBits = decltype(std::declval<DetectedStationaryObject>()._has_bits_);
  static const ::osi3::DetectedItemHeader& header(const DetectedStationaryObject* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::BaseStationary& base(const DetectedStationaryObject* msg);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::BaseStationary& base_rmse(const DetectedStationaryObject* msg);
  static void set_has_base_rmse(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::osi3::ColorDescription& color_description(const DetectedStationaryObject* msg);
  static void set_has_color_description(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::osi3::DetectedItemHeader&
DetectedStationaryObject::_Internal::header(const DetectedStationaryObject* msg) {
  return *msg->header_;
}
const ::osi3::BaseStationary&
DetectedStationaryObject::_Internal::base(const DetectedStationaryObject* msg) {
  return *msg->base_;
}
const ::osi3::BaseStationary&
DetectedStationaryObject::_Internal::base_rmse(const DetectedStationaryObject* msg) {
  return *msg->base_rmse_;
}
const ::osi3::ColorDescription&
DetectedStationaryObject::_Internal::color_description(const DetectedStationaryObject* msg) {
  return *msg->color_description_;
}
void DetectedStationaryObject::clear_base() {
  if (base_ != nullptr) base_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void DetectedStationaryObject::clear_base_rmse() {
  if (base_rmse_ != nullptr) base_rmse_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void DetectedStationaryObject::clear_color_description() {
  if (color_description_ != nullptr) color_description_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
DetectedStationaryObject::DetectedStationaryObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  candidate_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.DetectedStationaryObject)
}
DetectedStationaryObject::DetectedStationaryObject(const DetectedStationaryObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      candidate_(from.candidate_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::osi3::DetectedItemHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_base()) {
    base_ = new ::osi3::BaseStationary(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_base_rmse()) {
    base_rmse_ = new ::osi3::BaseStationary(*from.base_rmse_);
  } else {
    base_rmse_ = nullptr;
  }
  if (from._internal_has_color_description()) {
    color_description_ = new ::osi3::ColorDescription(*from.color_description_);
  } else {
    color_description_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedStationaryObject)
}

void DetectedStationaryObject::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&color_description_) -
    reinterpret_cast<char*>(&header_)) + sizeof(color_description_));
}

DetectedStationaryObject::~DetectedStationaryObject() {
  // @@protoc_insertion_point(destructor:osi3.DetectedStationaryObject)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DetectedStationaryObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete base_rmse_;
  if (this != internal_default_instance()) delete color_description_;
}

void DetectedStationaryObject::ArenaDtor(void* object) {
  DetectedStationaryObject* _this = reinterpret_cast< DetectedStationaryObject* >(object);
  (void)_this;
}
void DetectedStationaryObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetectedStationaryObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DetectedStationaryObject::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedStationaryObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidate_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(base_ != nullptr);
      base_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(base_rmse_ != nullptr);
      base_rmse_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(color_description_ != nullptr);
      color_description_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectedStationaryObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.DetectedItemHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.BaseStationary base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.BaseStationary base_rmse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_rmse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.DetectedStationaryObject.CandidateStationaryObject candidate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candidate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.ColorDescription color_description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_color_description(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectedStationaryObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedStationaryObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.DetectedItemHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional .osi3.BaseStationary base = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::base(this), target, stream);
  }

  // optional .osi3.BaseStationary base_rmse = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::base_rmse(this), target, stream);
  }

  // repeated .osi3.DetectedStationaryObject.CandidateStationaryObject candidate = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_candidate_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_candidate(i), target, stream);
  }

  // optional .osi3.ColorDescription color_description = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::color_description(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedStationaryObject)
  return target;
}

size_t DetectedStationaryObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedStationaryObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.DetectedStationaryObject.CandidateStationaryObject candidate = 4;
  total_size += 1UL * this->_internal_candidate_size();
  for (const auto& msg : this->candidate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .osi3.DetectedItemHeader header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .osi3.BaseStationary base = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *base_);
    }

    // optional .osi3.BaseStationary base_rmse = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *base_rmse_);
    }

    // optional .osi3.ColorDescription color_description = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_description_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectedStationaryObject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DetectedStationaryObject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectedStationaryObject::GetClassData() const { return &_class_data_; }

void DetectedStationaryObject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DetectedStationaryObject *>(to)->MergeFrom(
      static_cast<const DetectedStationaryObject &>(from));
}


void DetectedStationaryObject::MergeFrom(const DetectedStationaryObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedStationaryObject)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candidate_.MergeFrom(from.candidate_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::osi3::DetectedItemHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_base()->::osi3::BaseStationary::MergeFrom(from._internal_base());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_base_rmse()->::osi3::BaseStationary::MergeFrom(from._internal_base_rmse());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_color_description()->::osi3::ColorDescription::MergeFrom(from._internal_color_description());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectedStationaryObject::CopyFrom(const DetectedStationaryObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedStationaryObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedStationaryObject::IsInitialized() const {
  return true;
}

void DetectedStationaryObject::InternalSwap(DetectedStationaryObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  candidate_.InternalSwap(&other->candidate_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectedStationaryObject, color_description_)
      + sizeof(DetectedStationaryObject::color_description_)
      - PROTOBUF_FIELD_OFFSET(DetectedStationaryObject, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedStationaryObject::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fdetectedobject_2eproto_getter, &descriptor_table_osi_5fdetectedobject_2eproto_once,
      file_level_metadata_osi_5fdetectedobject_2eproto[2]);
}

// ===================================================================

class DetectedMovingObject_CandidateMovingObject::_Internal {
 public:
  using HasBits = decltype(std::declval<DetectedMovingObject_CandidateMovingObject>()._has_bits_);
  static void set_has_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::osi3::MovingObject_VehicleClassification& vehicle_classification(const DetectedMovingObject_CandidateMovingObject* msg);
  static void set_has_vehicle_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::Orientation3d& head_pose(const DetectedMovingObject_CandidateMovingObject* msg);
  static void set_has_head_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::Orientation3d& upper_body_pose(const DetectedMovingObject_CandidateMovingObject* msg);
  static void set_has_upper_body_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::osi3::MovingObject_MovingObjectClassification& moving_object_classification(const DetectedMovingObject_CandidateMovingObject* msg);
  static void set_has_moving_object_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::osi3::MovingObject_VehicleClassification&
DetectedMovingObject_CandidateMovingObject::_Internal::vehicle_classification(const DetectedMovingObject_CandidateMovingObject* msg) {
  return *msg->vehicle_classification_;
}
const ::osi3::Orientation3d&
DetectedMovingObject_CandidateMovingObject::_Internal::head_pose(const DetectedMovingObject_CandidateMovingObject* msg) {
  return *msg->head_pose_;
}
const ::osi3::Orientation3d&
DetectedMovingObject_CandidateMovingObject::_Internal::upper_body_pose(const DetectedMovingObject_CandidateMovingObject* msg) {
  return *msg->upper_body_pose_;
}
const ::osi3::MovingObject_MovingObjectClassification&
DetectedMovingObject_CandidateMovingObject::_Internal::moving_object_classification(const DetectedMovingObject_CandidateMovingObject* msg) {
  return *msg->moving_object_classification_;
}
void DetectedMovingObject_CandidateMovingObject::clear_vehicle_classification() {
  if (vehicle_classification_ != nullptr) vehicle_classification_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void DetectedMovingObject_CandidateMovingObject::clear_head_pose() {
  if (head_pose_ != nullptr) head_pose_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void DetectedMovingObject_CandidateMovingObject::clear_upper_body_pose() {
  if (upper_body_pose_ != nullptr) upper_body_pose_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void DetectedMovingObject_CandidateMovingObject::clear_moving_object_classification() {
  if (moving_object_classification_ != nullptr) moving_object_classification_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
DetectedMovingObject_CandidateMovingObject::DetectedMovingObject_CandidateMovingObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.DetectedMovingObject.CandidateMovingObject)
}
DetectedMovingObject_CandidateMovingObject::DetectedMovingObject_CandidateMovingObject(const DetectedMovingObject_CandidateMovingObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vehicle_classification()) {
    vehicle_classification_ = new ::osi3::MovingObject_VehicleClassification(*from.vehicle_classification_);
  } else {
    vehicle_classification_ = nullptr;
  }
  if (from._internal_has_head_pose()) {
    head_pose_ = new ::osi3::Orientation3d(*from.head_pose_);
  } else {
    head_pose_ = nullptr;
  }
  if (from._internal_has_upper_body_pose()) {
    upper_body_pose_ = new ::osi3::Orientation3d(*from.upper_body_pose_);
  } else {
    upper_body_pose_ = nullptr;
  }
  if (from._internal_has_moving_object_classification()) {
    moving_object_classification_ = new ::osi3::MovingObject_MovingObjectClassification(*from.moving_object_classification_);
  } else {
    moving_object_classification_ = nullptr;
  }
  ::memcpy(&probability_, &from.probability_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&probability_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedMovingObject.CandidateMovingObject)
}

void DetectedMovingObject_CandidateMovingObject::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vehicle_classification_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&vehicle_classification_)) + sizeof(type_));
}

DetectedMovingObject_CandidateMovingObject::~DetectedMovingObject_CandidateMovingObject() {
  // @@protoc_insertion_point(destructor:osi3.DetectedMovingObject.CandidateMovingObject)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DetectedMovingObject_CandidateMovingObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete vehicle_classification_;
  if (this != internal_default_instance()) delete head_pose_;
  if (this != internal_default_instance()) delete upper_body_pose_;
  if (this != internal_default_instance()) delete moving_object_classification_;
}

void DetectedMovingObject_CandidateMovingObject::ArenaDtor(void* object) {
  DetectedMovingObject_CandidateMovingObject* _this = reinterpret_cast< DetectedMovingObject_CandidateMovingObject* >(object);
  (void)_this;
}
void DetectedMovingObject_CandidateMovingObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetectedMovingObject_CandidateMovingObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DetectedMovingObject_CandidateMovingObject::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedMovingObject.CandidateMovingObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(vehicle_classification_ != nullptr);
      vehicle_classification_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(head_pose_ != nullptr);
      head_pose_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(upper_body_pose_ != nullptr);
      upper_body_pose_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(moving_object_classification_ != nullptr);
      moving_object_classification_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&probability_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&probability_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectedMovingObject_CandidateMovingObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_probability(&has_bits);
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MovingObject.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::MovingObject_Type_IsValid(val))) {
            _internal_set_type(static_cast<::osi3::MovingObject_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MovingObject.VehicleClassification vehicle_classification = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_classification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Orientation3d head_pose = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_head_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Orientation3d upper_body_pose = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_upper_body_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MovingObject.MovingObjectClassification moving_object_classification = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_moving_object_classification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectedMovingObject_CandidateMovingObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedMovingObject.CandidateMovingObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_probability(), target);
  }

  // optional .osi3.MovingObject.Type type = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional .osi3.MovingObject.VehicleClassification vehicle_classification = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::vehicle_classification(this), target, stream);
  }

  // optional .osi3.Orientation3d head_pose = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::head_pose(this), target, stream);
  }

  // optional .osi3.Orientation3d upper_body_pose = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::upper_body_pose(this), target, stream);
  }

  // optional .osi3.MovingObject.MovingObjectClassification moving_object_classification = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::moving_object_classification(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedMovingObject.CandidateMovingObject)
  return target;
}

size_t DetectedMovingObject_CandidateMovingObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedMovingObject.CandidateMovingObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .osi3.MovingObject.VehicleClassification vehicle_classification = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicle_classification_);
    }

    // optional .osi3.Orientation3d head_pose = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *head_pose_);
    }

    // optional .osi3.Orientation3d upper_body_pose = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *upper_body_pose_);
    }

    // optional .osi3.MovingObject.MovingObjectClassification moving_object_classification = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *moving_object_classification_);
    }

    // optional double probability = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional .osi3.MovingObject.Type type = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectedMovingObject_CandidateMovingObject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DetectedMovingObject_CandidateMovingObject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectedMovingObject_CandidateMovingObject::GetClassData() const { return &_class_data_; }

void DetectedMovingObject_CandidateMovingObject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DetectedMovingObject_CandidateMovingObject *>(to)->MergeFrom(
      static_cast<const DetectedMovingObject_CandidateMovingObject &>(from));
}


void DetectedMovingObject_CandidateMovingObject::MergeFrom(const DetectedMovingObject_CandidateMovingObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedMovingObject.CandidateMovingObject)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_vehicle_classification()->::osi3::MovingObject_VehicleClassification::MergeFrom(from._internal_vehicle_classification());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_head_pose()->::osi3::Orientation3d::MergeFrom(from._internal_head_pose());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_upper_body_pose()->::osi3::Orientation3d::MergeFrom(from._internal_upper_body_pose());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_moving_object_classification()->::osi3::MovingObject_MovingObjectClassification::MergeFrom(from._internal_moving_object_classification());
    }
    if (cached_has_bits & 0x00000010u) {
      probability_ = from.probability_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectedMovingObject_CandidateMovingObject::CopyFrom(const DetectedMovingObject_CandidateMovingObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedMovingObject.CandidateMovingObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedMovingObject_CandidateMovingObject::IsInitialized() const {
  return true;
}

void DetectedMovingObject_CandidateMovingObject::InternalSwap(DetectedMovingObject_CandidateMovingObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectedMovingObject_CandidateMovingObject, type_)
      + sizeof(DetectedMovingObject_CandidateMovingObject::type_)
      - PROTOBUF_FIELD_OFFSET(DetectedMovingObject_CandidateMovingObject, vehicle_classification_)>(
          reinterpret_cast<char*>(&vehicle_classification_),
          reinterpret_cast<char*>(&other->vehicle_classification_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedMovingObject_CandidateMovingObject::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fdetectedobject_2eproto_getter, &descriptor_table_osi_5fdetectedobject_2eproto_once,
      file_level_metadata_osi_5fdetectedobject_2eproto[3]);
}

// ===================================================================

class DetectedMovingObject::_Internal {
 public:
  using HasBits = decltype(std::declval<DetectedMovingObject>()._has_bits_);
  static const ::osi3::DetectedItemHeader& header(const DetectedMovingObject* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::BaseMoving& base(const DetectedMovingObject* msg);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::BaseMoving& base_rmse(const DetectedMovingObject* msg);
  static void set_has_base_rmse(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reference_point(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_movement_state(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_percentage_side_lane_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_percentage_side_lane_right(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::osi3::ColorDescription& color_description(const DetectedMovingObject* msg);
  static void set_has_color_description(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::osi3::RadarSpecificObjectData& radar_specifics(const DetectedMovingObject* msg);
  static void set_has_radar_specifics(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::osi3::LidarSpecificObjectData& lidar_specifics(const DetectedMovingObject* msg);
  static void set_has_lidar_specifics(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::osi3::CameraSpecificObjectData& camera_specifics(const DetectedMovingObject* msg);
  static void set_has_camera_specifics(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::osi3::UltrasonicSpecificObjectData& ultrasonic_specifics(const DetectedMovingObject* msg);
  static void set_has_ultrasonic_specifics(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::osi3::DetectedItemHeader&
DetectedMovingObject::_Internal::header(const DetectedMovingObject* msg) {
  return *msg->header_;
}
const ::osi3::BaseMoving&
DetectedMovingObject::_Internal::base(const DetectedMovingObject* msg) {
  return *msg->base_;
}
const ::osi3::BaseMoving&
DetectedMovingObject::_Internal::base_rmse(const DetectedMovingObject* msg) {
  return *msg->base_rmse_;
}
const ::osi3::ColorDescription&
DetectedMovingObject::_Internal::color_description(const DetectedMovingObject* msg) {
  return *msg->color_description_;
}
const ::osi3::RadarSpecificObjectData&
DetectedMovingObject::_Internal::radar_specifics(const DetectedMovingObject* msg) {
  return *msg->radar_specifics_;
}
const ::osi3::LidarSpecificObjectData&
DetectedMovingObject::_Internal::lidar_specifics(const DetectedMovingObject* msg) {
  return *msg->lidar_specifics_;
}
const ::osi3::CameraSpecificObjectData&
DetectedMovingObject::_Internal::camera_specifics(const DetectedMovingObject* msg) {
  return *msg->camera_specifics_;
}
const ::osi3::UltrasonicSpecificObjectData&
DetectedMovingObject::_Internal::ultrasonic_specifics(const DetectedMovingObject* msg) {
  return *msg->ultrasonic_specifics_;
}
void DetectedMovingObject::clear_base() {
  if (base_ != nullptr) base_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void DetectedMovingObject::clear_base_rmse() {
  if (base_rmse_ != nullptr) base_rmse_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void DetectedMovingObject::clear_color_description() {
  if (color_description_ != nullptr) color_description_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void DetectedMovingObject::clear_radar_specifics() {
  if (radar_specifics_ != nullptr) radar_specifics_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void DetectedMovingObject::clear_lidar_specifics() {
  if (lidar_specifics_ != nullptr) lidar_specifics_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void DetectedMovingObject::clear_camera_specifics() {
  if (camera_specifics_ != nullptr) camera_specifics_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void DetectedMovingObject::clear_ultrasonic_specifics() {
  if (ultrasonic_specifics_ != nullptr) ultrasonic_specifics_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
DetectedMovingObject::DetectedMovingObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  candidate_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:osi3.DetectedMovingObject)
}
DetectedMovingObject::DetectedMovingObject(const DetectedMovingObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      candidate_(from.candidate_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::osi3::DetectedItemHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_base()) {
    base_ = new ::osi3::BaseMoving(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_base_rmse()) {
    base_rmse_ = new ::osi3::BaseMoving(*from.base_rmse_);
  } else {
    base_rmse_ = nullptr;
  }
  if (from._internal_has_color_description()) {
    color_description_ = new ::osi3::ColorDescription(*from.color_description_);
  } else {
    color_description_ = nullptr;
  }
  if (from._internal_has_radar_specifics()) {
    radar_specifics_ = new ::osi3::RadarSpecificObjectData(*from.radar_specifics_);
  } else {
    radar_specifics_ = nullptr;
  }
  if (from._internal_has_lidar_specifics()) {
    lidar_specifics_ = new ::osi3::LidarSpecificObjectData(*from.lidar_specifics_);
  } else {
    lidar_specifics_ = nullptr;
  }
  if (from._internal_has_camera_specifics()) {
    camera_specifics_ = new ::osi3::CameraSpecificObjectData(*from.camera_specifics_);
  } else {
    camera_specifics_ = nullptr;
  }
  if (from._internal_has_ultrasonic_specifics()) {
    ultrasonic_specifics_ = new ::osi3::UltrasonicSpecificObjectData(*from.ultrasonic_specifics_);
  } else {
    ultrasonic_specifics_ = nullptr;
  }
  ::memcpy(&reference_point_, &from.reference_point_,
    static_cast<size_t>(reinterpret_cast<char*>(&percentage_side_lane_right_) -
    reinterpret_cast<char*>(&reference_point_)) + sizeof(percentage_side_lane_right_));
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedMovingObject)
}

void DetectedMovingObject::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&percentage_side_lane_right_) -
    reinterpret_cast<char*>(&header_)) + sizeof(percentage_side_lane_right_));
}

DetectedMovingObject::~DetectedMovingObject() {
  // @@protoc_insertion_point(destructor:osi3.DetectedMovingObject)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DetectedMovingObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete base_rmse_;
  if (this != internal_default_instance()) delete color_description_;
  if (this != internal_default_instance()) delete radar_specifics_;
  if (this != internal_default_instance()) delete lidar_specifics_;
  if (this != internal_default_instance()) delete camera_specifics_;
  if (this != internal_default_instance()) delete ultrasonic_specifics_;
}

void DetectedMovingObject::ArenaDtor(void* object) {
  DetectedMovingObject* _this = reinterpret_cast< DetectedMovingObject* >(object);
  (void)_this;
}
void DetectedMovingObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetectedMovingObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DetectedMovingObject::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedMovingObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidate_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(base_ != nullptr);
      base_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(base_rmse_ != nullptr);
      base_rmse_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(color_description_ != nullptr);
      color_description_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(radar_specifics_ != nullptr);
      radar_specifics_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(lidar_specifics_ != nullptr);
      lidar_specifics_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(camera_specifics_ != nullptr);
      camera_specifics_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(ultrasonic_specifics_ != nullptr);
      ultrasonic_specifics_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&reference_point_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&percentage_side_lane_right_) -
        reinterpret_cast<char*>(&reference_point_)) + sizeof(percentage_side_lane_right_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectedMovingObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.DetectedItemHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.BaseMoving base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.BaseMoving base_rmse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_rmse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.DetectedMovingObject.ReferencePoint reference_point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::DetectedMovingObject_ReferencePoint_IsValid(val))) {
            _internal_set_reference_point(static_cast<::osi3::DetectedMovingObject_ReferencePoint>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.DetectedMovingObject.MovementState movement_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::DetectedMovingObject_MovementState_IsValid(val))) {
            _internal_set_movement_state(static_cast<::osi3::DetectedMovingObject_MovementState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double percentage_side_lane_left = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_percentage_side_lane_left(&has_bits);
          percentage_side_lane_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double percentage_side_lane_right = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_percentage_side_lane_right(&has_bits);
          percentage_side_lane_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.DetectedMovingObject.CandidateMovingObject candidate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candidate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.ColorDescription color_description = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_color_description(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.RadarSpecificObjectData radar_specifics = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_radar_specifics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.LidarSpecificObjectData lidar_specifics = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_lidar_specifics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.CameraSpecificObjectData camera_specifics = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera_specifics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.UltrasonicSpecificObjectData ultrasonic_specifics = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ultrasonic_specifics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectedMovingObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedMovingObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .osi3.DetectedItemHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional .osi3.BaseMoving base = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::base(this), target, stream);
  }

  // optional .osi3.BaseMoving base_rmse = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::base_rmse(this), target, stream);
  }

  // optional .osi3.DetectedMovingObject.ReferencePoint reference_point = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_reference_point(), target);
  }

  // optional .osi3.DetectedMovingObject.MovementState movement_state = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_movement_state(), target);
  }

  // optional double percentage_side_lane_left = 6;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_percentage_side_lane_left(), target);
  }

  // optional double percentage_side_lane_right = 7;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_percentage_side_lane_right(), target);
  }

  // repeated .osi3.DetectedMovingObject.CandidateMovingObject candidate = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_candidate_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_candidate(i), target, stream);
  }

  // optional .osi3.ColorDescription color_description = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::color_description(this), target, stream);
  }

  // optional .osi3.RadarSpecificObjectData radar_specifics = 100;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::radar_specifics(this), target, stream);
  }

  // optional .osi3.LidarSpecificObjectData lidar_specifics = 101;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::lidar_specifics(this), target, stream);
  }

  // optional .osi3.CameraSpecificObjectData camera_specifics = 102;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        102, _Internal::camera_specifics(this), target, stream);
  }

  // optional .osi3.UltrasonicSpecificObjectData ultrasonic_specifics = 103;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        103, _Internal::ultrasonic_specifics(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedMovingObject)
  return target;
}

size_t DetectedMovingObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedMovingObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.DetectedMovingObject.CandidateMovingObject candidate = 8;
  total_size += 1UL * this->_internal_candidate_size();
  for (const auto& msg : this->candidate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .osi3.DetectedItemHeader header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .osi3.BaseMoving base = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *base_);
    }

    // optional .osi3.BaseMoving base_rmse = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *base_rmse_);
    }

    // optional .osi3.ColorDescription color_description = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_description_);
    }

    // optional .osi3.RadarSpecificObjectData radar_specifics = 100;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *radar_specifics_);
    }

    // optional .osi3.LidarSpecificObjectData lidar_specifics = 101;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lidar_specifics_);
    }

    // optional .osi3.CameraSpecificObjectData camera_specifics = 102;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *camera_specifics_);
    }

    // optional .osi3.UltrasonicSpecificObjectData ultrasonic_specifics = 103;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ultrasonic_specifics_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .osi3.DetectedMovingObject.ReferencePoint reference_point = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reference_point());
    }

    // optional .osi3.DetectedMovingObject.MovementState movement_state = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_movement_state());
    }

    // optional double percentage_side_lane_left = 6;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double percentage_side_lane_right = 7;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectedMovingObject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DetectedMovingObject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectedMovingObject::GetClassData() const { return &_class_data_; }

void DetectedMovingObject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DetectedMovingObject *>(to)->MergeFrom(
      static_cast<const DetectedMovingObject &>(from));
}


void DetectedMovingObject::MergeFrom(const DetectedMovingObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedMovingObject)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candidate_.MergeFrom(from.candidate_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::osi3::DetectedItemHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_base()->::osi3::BaseMoving::MergeFrom(from._internal_base());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_base_rmse()->::osi3::BaseMoving::MergeFrom(from._internal_base_rmse());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_color_description()->::osi3::ColorDescription::MergeFrom(from._internal_color_description());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_radar_specifics()->::osi3::RadarSpecificObjectData::MergeFrom(from._internal_radar_specifics());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_lidar_specifics()->::osi3::LidarSpecificObjectData::MergeFrom(from._internal_lidar_specifics());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_camera_specifics()->::osi3::CameraSpecificObjectData::MergeFrom(from._internal_camera_specifics());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_ultrasonic_specifics()->::osi3::UltrasonicSpecificObjectData::MergeFrom(from._internal_ultrasonic_specifics());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      reference_point_ = from.reference_point_;
    }
    if (cached_has_bits & 0x00000200u) {
      movement_state_ = from.movement_state_;
    }
    if (cached_has_bits & 0x00000400u) {
      percentage_side_lane_left_ = from.percentage_side_lane_left_;
    }
    if (cached_has_bits & 0x00000800u) {
      percentage_side_lane_right_ = from.percentage_side_lane_right_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectedMovingObject::CopyFrom(const DetectedMovingObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedMovingObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedMovingObject::IsInitialized() const {
  return true;
}

void DetectedMovingObject::InternalSwap(DetectedMovingObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  candidate_.InternalSwap(&other->candidate_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectedMovingObject, percentage_side_lane_right_)
      + sizeof(DetectedMovingObject::percentage_side_lane_right_)
      - PROTOBUF_FIELD_OFFSET(DetectedMovingObject, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedMovingObject::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_osi_5fdetectedobject_2eproto_getter, &descriptor_table_osi_5fdetectedobject_2eproto_once,
      file_level_metadata_osi_5fdetectedobject_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::DetectedItemHeader* Arena::CreateMaybeMessage< ::osi3::DetectedItemHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::DetectedItemHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::DetectedStationaryObject_CandidateStationaryObject* Arena::CreateMaybeMessage< ::osi3::DetectedStationaryObject_CandidateStationaryObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::DetectedStationaryObject_CandidateStationaryObject >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::DetectedStationaryObject* Arena::CreateMaybeMessage< ::osi3::DetectedStationaryObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::DetectedStationaryObject >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::DetectedMovingObject_CandidateMovingObject* Arena::CreateMaybeMessage< ::osi3::DetectedMovingObject_CandidateMovingObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::DetectedMovingObject_CandidateMovingObject >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::DetectedMovingObject* Arena::CreateMaybeMessage< ::osi3::DetectedMovingObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::DetectedMovingObject >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
